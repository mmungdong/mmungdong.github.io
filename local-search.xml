<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LLM 应用开发平台特训营学习笔记</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/LLM%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E7%89%B9%E8%AE%AD%E8%90%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/LLM%20%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E7%89%B9%E8%AE%AD%E8%90%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>🔖 笔记来自学习慕课网的《AI Agent全栈开发工程师》<br>🔗 Link：<a href="https://class.imooc.com/llmappdev#Anchor">IT就业班_编程学习路线_开发学习就业班-慕课网就业班</a></p></blockquote><blockquote><p>📑参考文档<br><a href="https://agijuejin.feishu.cn/wiki/UvJPwhfkiitMzhkhEfycUnS9nAm">AGI 掘金知识库 - 飞书云文档</a></p></blockquote><h1 id="1-初识大语言模型"><a href="#1-初识大语言模型" class="headerlink" title="1. 初识大语言模型"></a>1. 初识大语言模型</h1><h2 id="1-1-LLM-基础知识"><a href="#1-1-LLM-基础知识" class="headerlink" title="1.1. LLM 基础知识"></a>1.1. LLM 基础知识</h2><ul><li>什么是大语言模型?<ul><li><a href="https://aibook.ren/archives/what-is-llm">一文全面看懂什么是大模型（LLM） - AI全书</a></li></ul></li><li>大语言模型的参数量怎么理解？<ul><li><a href="https://www.jianshu.com/p/744d2f674a03">LLM基础（一）：模型参数量、模型参数精度 - 简书</a></li><li><a href="https://www.51cto.com/aigc/2875.html">HunYuan MoE：聊一聊 LLM 参数量、计算量和 MFU 等-AI.x-AIGC专属社区-51CTO.COM</a></li></ul></li><li>大语言模型的基础单位 token 是个啥？<ul><li><a href="https://zhuanlan.zhihu.com/p/1938621073789785843">【写给小白的LLM】AI大模型中的 token 到底是个什么？</a></li></ul></li><li>大语言模型的词表是什么？<ul><li><a href="https://f1yingwhite.github.io/posts/machinelearning/nlp/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%AF%8D%E8%A1%A8/">大模型词表 - FlyingWhite</a></li></ul></li><li>token 的工作机制<ul><li><a href="https://segmentfault.com/a/1190000046178049">人工智能 - 大模型中的Token究竟是什么？从原理到作用深度解析 - dblens数据库AI管理工具 - SegmentFault 思否</a></li><li><a href="https://agijuejin.feishu.cn/wiki/AvLgwOOKEi8gIek5ENycokOinEb">解读AI大模型，从了解token开始 - 飞书云文档</a></li></ul></li><li>模型如何训练？<ul><li><a href="https://zhuanlan.zhihu.com/p/1934198252519031821">大模型入门指南：模型训练(Training)全解析！看这一篇就够了！</a></li></ul></li></ul><h2 id="1-2-LLM-在软件开发中的作用"><a href="#1-2-LLM-在软件开发中的作用" class="headerlink" title="1.2. LLM 在软件开发中的作用"></a>1.2. LLM 在软件开发中的作用</h2><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/blog20250823153022713.png?imageSlim" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>📚 卡片笔记写作法</title>
    <link href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%F0%9F%93%9A%20%E5%8D%A1%E7%89%87%E7%AC%94%E8%AE%B0%E5%86%99%E4%BD%9C%E6%B3%95/"/>
    <url>/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%F0%9F%93%9A%20%E5%8D%A1%E7%89%87%E7%AC%94%E8%AE%B0%E5%86%99%E4%BD%9C%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>🔗 <a href="https://book.douban.com/subject/35503571/">卡片笔记写作法 (豆瓣)</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>卢曼的成就：</p><blockquote><p>29年半以后，卢曼完成了《社会的社会》（The Society of Society,1997）这本分为两卷的大部头的最后一章，轰动了学术界。这是一个激进的新理论，不仅改变了社会学，而且激起了哲学、教育学、政治理论和心理学领域的热烈讨论。不过，并不是所有人都能跟上讨论，因为他所做的工作包罗万象，不仅与众不同，而且极其复杂。这部著作的每个章节都独立出版，每本书讨论了一种社会制度。他讨论的主题包含了法律、政治、经济、传播、艺术、教育、认识论，甚至还有爱情。<br>卢曼写的书为什么包括这么多主题，可见其阅读量很大，如何去探索自己喜欢的领域并将其整理成书也是一项挑战。</p></blockquote><h1 id="关于卡片写作的步骤"><a href="#关于卡片写作的步骤" class="headerlink" title="关于卡片写作的步骤"></a>关于卡片写作的步骤</h1><h2 id="卡片盒的使用步骤"><a href="#卡片盒的使用步骤" class="headerlink" title="卡片盒的使用步骤"></a>卡片盒的使用步骤</h2><h3 id="卢曼使用卡片盒的方法"><a href="#卢曼使用卡片盒的方法" class="headerlink" title="卢曼使用卡片盒的方法"></a>卢曼使用卡片盒的方法</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">严格来说，卢曼有两类卡片盒：一类是文献卡片盒，里面有文献和对文献内容的简要说明；另一类是主卡片盒，主要是他针对所阅读的内容收集和产生的想法。这些笔记都写在索引卡片上，存放在木质卡片盒里。<br><br>&gt;当他读到值得记录的内容时，就会在卡片的一面写上书目信息，在另一面对内容做简要的笔记（Schmidt,2013）。这些笔记最终会被放入文献卡片盒里。<br><br>接下来，在不久之后他会查看简要笔记，并思考这些笔记与自己的思考和写作的相关性。然后，他将转向主卡片盒，在新的索引卡片上写下他的想法、评论和思想，每个想法只用一张卡片，并只写在卡片的一面上，以便以后不必把它们从盒子里拿出来就可以阅读。卢曼的笔记通常简明扼要，一张卡片上足可以写下一个想法，但有时也会再加一张卡片来延展一个想法。<br><br>他在记笔记时通常会注意卡片盒中已有的笔记。而关于文献的笔记虽然简短，但他写得非常认真，与他在最后手稿中笔记的风格并无太大差别：都是用完整的句子，并明确地引用他从哪些文献中获取材料。更多的时候，一条新的笔记会直接跟进另一条笔记，并成为一个较长笔记链的一部分。这时他会在卡片盒中的其他卡片上添加上引用信息，其中有的卡片相隔不远，有的则是在完全不同的区域和相关文献中。有些笔记是直接相关的，读起来更像是评论，有些则包含了不太明显的联系，孤立存在的笔记很少。<br><br>卢曼并不只是照抄他所读过的文章中的观点或引文，而是将其从一个语境转化到另一个语境。这很像翻译，不同的语境用不同的词描述，但是要尽量真实地保持原意。用笔记记下“作者在某一章详细证明了他的方法”，比引用文中任何词句都更能充分地描述这一章的内容。<br><br>卢曼笔记的诀窍在于，他并不是按主题来组织他的笔记，而是以相当抽象的方式给它们编上数字。这些数字没有任何意义，只是为了永久地标识每条笔记。如果一条新的笔记可以直接指向一条已经存在的笔记，比如评论、更正或补充，或与之相关，他就直接把新笔记加在已有笔记后面。如果现有笔记的编号是22，新笔记就会被编为23号；如果已经存在23号，他就把新笔记编号为22a。他根据自己的喜好，用数字和字母组合，中间再加上一些斜线和逗号，能够分支出许多思想串。例如，一条关于因果关系和系统论的笔记编号为21/3d7a6，其后添加的新笔记就编号为21/3d7a7。<br><br>每当卢曼添加一条笔记时，他都会检查他的卡片盒中是否有其他相关的笔记，以便在它们之间建立可能的联系。直接在一条笔记后面添加新笔记只是方法之一，另一种方法是在这条笔记和（或）其他笔记之间添加一个链接，另一条笔记可以在系统中的任何地方。当然，这非常类似于我们在互联网上使用超链接的方式。但它们是完全不同的，关于这一点我会在后文中解释。如果把他的卡片盒看成是个人的维基百科或纸上的数据库，那将是相当具有误导性的。它们之间显然有相似的地方，但其微妙的差异才正是这个系统的独特之处。<br><br>通过添加这些笔记之间的链接，卢曼能够将同一条笔记添加到不同的上下文中。不同于其他系统一开始就有一个预设的主题顺序，卢曼笔记法是自下而上地开发主题，然后在卡片盒中不断地添加笔记，基于这个卡片盒，通过排序相关笔记的链接，来对一个主题进行整理。<br><br>卢曼笔记系统的最后一个元素是索引，他会从这个索引中引用一两条笔记，作为进入某个思路或主题的切入点。当然，带有分类收集链接的笔记是很好的切入点。<br></code></pre></td></tr></table></figure><h3 id="🔖-我们应该这样记录卡片"><a href="#🔖-我们应该这样记录卡片" class="headerlink" title="🔖 我们应该这样记录卡片"></a>🔖 我们应该这样记录卡片</h3><p>这里通过阅读该书整理下应该如何记卡片？（后续可能会持续更新迭代）</p><p>记闪念笔记：</p><ul><li>有一个想法&#x2F;好的片段先记录，不用对其进行主题划分或者其他的区分（因为闪念笔记很快会从我们的笔记中经过重新整理后删除，它只是一个中转站）</li></ul><p>记闪念笔记的方法（重要）：</p><ol><li><p>对其进行充分的思考理解，我们才能写下它</p></li><li><p>思考其与其他语境之间的联系</p><ul><li>语境是什么？语境是当前思考的上下文，因为我们的思考脱离了上下文在后面回忆起来都很难回忆</li></ul></li></ol><p>闪念笔记移到永久笔记：</p><ul><li>需要对已有的卡片进行重新整理，按主题或内容进行区分，经过自己思考的再加工后梳理到永久笔记中去，后续笔记的引用与扩展也是从永久笔记中去做</li></ul><h1 id="应该如何写作？"><a href="#应该如何写作？" class="headerlink" title="应该如何写作？"></a>应该如何写作？</h1><h3 id="从撰写一篇论文学会写作"><a href="#从撰写一篇论文学会写作" class="headerlink" title="从撰写一篇论文学会写作"></a>从撰写一篇论文学会写作</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs text">撰写论文的步骤<br><br>1.记闪念笔记（fleeting notes）。你手边需要随时有记笔记的工具，以捕捉脑海中闪现的每一个想法。不必多虑如何写或者写什么。这些都是闪念笔记，仅仅是你脑海中想法的备忘录，不用想太多其他东西。可以把它们放到一个你定义为“收集箱”的地方，稍后统一处理。我通常会随身携带一个小本，但如果碰巧没带，我也会用餐巾纸或收据来写，有时候我也会用手机留下必要语音记录。如果你已经整理好自己的想法，而且时间比较宽裕，也可以跳过这一步，直接把想法写下来，作为一条已完成的永久笔记放在你的卡片盒里。<br><br>2.记文献笔记（literature notes）。无论你读什么，都要做笔记，写下你不想忘记的内容，或者你认为可能会在自己的思考或写作中使用的内容。文献笔记要非常简短，精心选择，并使用自己语言记录，对引文要格外挑剔，不要只是抄写，而不去真正理解其含义。最后把这些笔记和参考书目的细节一起保存在你的文献管理系统中。<br><br>3.记永久笔记（permanent notes）。现在打开你的卡片盒，仔细阅读你在第一步或第二步所做的笔记（最好每天一次，以及在你开始遗忘为什么记它之前），并思考它们与你自己的研究、思考或兴趣所在的相关内容有何关联。因为这里面只包含你感兴趣的东西，所以翻阅卡片盒很快就可以完成。这种笔记上的思想不是为了收集，而是为了衍生想法、论点和讨论。新的信息是否与你卡片盒里或脑海里已有的信息相互矛盾、相互一致、相互印证或相互补充？是否能把已有的想法结合起来产生新的想法？这些想法又引发了什么问题？你可以为每一个想法准确地写下一条笔记，并像为别人写作一样，使用完整的句子，标注来源，提供参考资料，并尽量做到精确、清晰和简短。此时，扔掉第一步的闪念笔记，把第二步的文献笔记放入你的文献管理系统。待所有重要的内容都进入卡片盒后，你就可以忘记它们了。<br><br>4.现在把你新写的永久笔记添加到卡片盒中，方法如下：<br><br>（1）把每一条笔记都归档在一个或多个相关的笔记后面。如果使用软件，你可以把一条笔记“放在”多个笔记后面；如果你像卢曼那样使用纸笔记笔记，就必须将笔记放在最适合的位置，并手写添加其他笔记的链接。看新笔记与哪条笔记直接相关，如果还没有与其他笔记直接相关，就把它放在最后一条笔记之后。<br><br>（2）给相关笔记添加链接。<br><br>（3）这样做是为了确保你以后能够找到这条笔记，可以从索引页链接到它，也可以在你用来作为某个讨论或话题的切入点的笔记上做一个链接。<br><br>5.从系统内部自下而上发展主题、问题和研究课题。你可以看看目前有什么，缺什么，出现了什么问题。通过广泛阅读来挑战和加强自己的论点，并根据了解到的新信息改变和发展自己的论点。多做笔记，进一步发展思路，看看事情的发展方向。自己跟着兴趣走，一直选择有望获得最深刻见解的那条路。以你所拥有的东西为基础，即使你的卡片盒里还没有任何东西，你也永远不会从零开始，因为你的脑海里已经有了需要检验的想法、需要挑战的观点和需要回答的问题。不要为一个主题进行头脑风暴，而是要看一下卡片盒，看看哪里已经形成了笔记链，哪里已经建立了想法群；如果另一个更有希望的想法已经成型，就不要执着于前一个想法。你对某件事情越感兴趣，就会阅读得越多，思考得越多，进而收集的笔记越多，最终越有可能从中提出问题和想法。它可能正是你一开始就感兴趣的东西，但更有可能是你的兴趣已经发生了变化，这就是洞见的作用。<br><br>6.一段时间后，会积攒到足够多的想法去确定一个写作主题。这时，你的主题是基于你所拥有的素材，而不是基于即将阅读的文献可能提供的未知想法。思考一下这个主题的内在联系，收集所有与之相关的笔记（大部分的相关笔记已经有了一定顺序），把它们复制到大纲软件中，并把它们按顺序排列好。看看哪些还不够，哪些是多余的。不要等着所有的东西都集齐，而是要积极思考，给自己足够的时间去阅读和记笔记，以改进你的想法、论点和架构。<br><br>7.把你的笔记变成初稿。不要简单地把笔记复制到手稿里，要把它们转化成连贯的内容，并将它们嵌入到你论点的上下文中，同时从笔记中得出你的论点。检查论点中的漏洞，想办法完善或改变论点。<br><br>8.编辑、校对你的稿子。拍拍自己的肩膀，然后开始写下一篇文稿。<br><br>- 摘自原文<br></code></pre></td></tr></table></figure><h1 id="卡片盒可以帮助我解决什么？"><a href="#卡片盒可以帮助我解决什么？" class="headerlink" title="卡片盒可以帮助我解决什么？"></a>卡片盒可以帮助我解决什么？</h1><h2 id="1-卡片盒子的功能"><a href="#1-卡片盒子的功能" class="headerlink" title="1. 卡片盒子的功能"></a>1. 卡片盒子的功能</h2><p>背诵的东西会遗忘掉，但是通过自己理解并记录下来的东西并不会，我们需要通过阅读记录自己所理解的，这才是大脑最擅长的能力，而背诵什么的，过段时间后会遗忘，这是卡片笔记最擅长的，大脑和卡片盒子各司其职，效果才是最好的。</p><h2 id="2-从已有的知识再散发性思考出新的观点"><a href="#2-从已有的知识再散发性思考出新的观点" class="headerlink" title="2. 从已有的知识再散发性思考出新的观点"></a>2. 从已有的知识再散发性思考出新的观点</h2><p>阅读文本时简要记下文本的主要观点，然后将其与已有的笔记相关联，产生新的东西。</p><h2 id="3-减少注意力"><a href="#3-减少注意力" class="headerlink" title="3. 减少注意力"></a>3. 减少注意力</h2><p>对于我们自己3件比较重要的东西：1. 一次只做一件事 2.我们只能记住7件事。3. 珍惜有限的资源：驱动力&#x2F;意志力</p><p>通过休息，流程化的做事（以同样的方式收集💡点子到笔记上，早中晚吃什么固定化）这样都可以减少我们的意志力，休息可以帮我们回复意志力，休息很重要！</p><p>卡片可以帮我们节省大脑容量，让我们将注意力放到更重要的事情上。</p><h2 id="4-在记录永久笔记的过程中重新梳理自己的想法，二次思考"><a href="#4-在记录永久笔记的过程中重新梳理自己的想法，二次思考" class="headerlink" title="4. 在记录永久笔记的过程中重新梳理自己的想法，二次思考"></a>4. 在记录永久笔记的过程中重新梳理自己的想法，二次思考</h2><p>写永久笔记也是一样，它还内置了另一个反馈循环：用文字表达自己的想法，会让我们思考自己是否真的想清楚了。</p><h2 id="5-做事情的推动力"><a href="#5-做事情的推动力" class="headerlink" title="5. 做事情的推动力"></a>5. 做事情的推动力</h2><p>我们的工作之所以不断被推进，靠的不是事先计划，而是不断试错，而这个试错的过程就是卡片盒子。</p><h1 id="这样做可以帮助你更好的使用卡片笔记！"><a href="#这样做可以帮助你更好的使用卡片笔记！" class="headerlink" title="这样做可以帮助你更好的使用卡片笔记！"></a>这样做可以帮助你更好的使用卡片笔记！</h1>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>go 3方库 博客参考收集</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/go%203%E6%96%B9%E5%BA%93%20%E5%8D%9A%E5%AE%A2%E5%8F%82%E8%80%83%E6%94%B6%E9%9B%86/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/go%203%E6%96%B9%E5%BA%93%20%E5%8D%9A%E5%AE%A2%E5%8F%82%E8%80%83%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="gorm-数据库链接工具"><a href="#gorm-数据库链接工具" class="headerlink" title="gorm - 数据库链接工具"></a>gorm - 数据库链接工具</h2><ul><li><a href="https://jianghushinian.cn/2023/05/27/go-popular-orm-framework-gorm-introduction/">Go 语言流行 ORM 框架 GORM 使用介绍 | 江湖十年 | 学而不思则罔，思而不学则殆。</a></li><li><a href="https://developer.aliyun.com/article/1443758">GORM入门到精通：构建高效Go应用的终极指南-阿里云开发者社区</a></li></ul><h2 id="viper-配置管理工具"><a href="#viper-配置管理工具" class="headerlink" title="viper - 配置管理工具"></a>viper - 配置管理工具</h2><ul><li><a href="https://jianghushinian.cn/2023/04/25/how-to-use-viper-for-configuration-management-in-go/">在 Go 中如何使用 Viper 来管理配置 | 江湖十年 | 学而不思则罔，思而不学则殆。</a></li></ul><h2 id="Cobra-详解-Go-语言现代命令行框架"><a href="#Cobra-详解-Go-语言现代命令行框架" class="headerlink" title="Cobra 详解 - Go 语言现代命令行框架"></a>Cobra 详解 - Go 语言现代命令行框架</h2><ul><li><a href="https://jianghushinian.cn/2023/05/08/go-modern-command-line-framework-cobra-details/">Go 语言现代命令行框架 Cobra 详解 | 江湖十年 | 学而不思则罔，思而不学则殆。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>go3方库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux  和 wsl 自用 .bashrc 文件配置</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/linux%20%20%E5%92%8C%20wsl%20%E8%87%AA%E7%94%A8%20.bashrc%20%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/linux%20%20%E5%92%8C%20wsl%20%E8%87%AA%E7%94%A8%20.bashrc%20%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># .bashrc</span><br><br><span class="hljs-comment"># Source global definitions</span><br><span class="hljs-keyword">if</span> [ -f /etc/bashrc ]; <span class="hljs-keyword">then</span><br>    . /etc/bashrc<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Alias definitions.</span><br><span class="hljs-comment"># You may want to put all your additions into a separate file like</span><br><span class="hljs-comment"># ~/.bash_aliases, instead of adding them here directly.</span><br><span class="hljs-comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span><br><span class="hljs-keyword">if</span> [ -f ~/.bash_aliases ]; <span class="hljs-keyword">then</span><br>    . ~/.bash_aliases<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Enable color support of ls and also add handy aliases</span><br><span class="hljs-keyword">if</span> [ -x /usr/bin/dircolors ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">test</span> -r ~/.dircolors &amp;&amp; <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dircolors -b ~/.dircolors)</span>&quot;</span> || <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dircolors -b)</span>&quot;</span><br>    <span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span><br>    <span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls --color=auto -l&#x27;</span><br>    <span class="hljs-built_in">alias</span> la=<span class="hljs-string">&#x27;ls --color=auto -A&#x27;</span><br>    <span class="hljs-built_in">alias</span> l=<span class="hljs-string">&#x27;ls --color=auto -lA&#x27;</span><br>    <span class="hljs-built_in">alias</span> <span class="hljs-built_in">dir</span>=<span class="hljs-string">&#x27;dir --color=auto&#x27;</span><br>    <span class="hljs-built_in">alias</span> <span class="hljs-built_in">vdir</span>=<span class="hljs-string">&#x27;vdir --color=auto&#x27;</span><br><br>    <span class="hljs-built_in">alias</span> grep=<span class="hljs-string">&#x27;grep --color=auto&#x27;</span><br>    <span class="hljs-built_in">alias</span> fgrep=<span class="hljs-string">&#x27;fgrep --color=auto&#x27;</span><br>    <span class="hljs-built_in">alias</span> egrep=<span class="hljs-string">&#x27;egrep --color=auto&#x27;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Colored GCC warnings and errors</span><br><span class="hljs-built_in">export</span> GCC_COLORS=<span class="hljs-string">&#x27;error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01&#x27;</span><br><br><span class="hljs-comment"># Some aliases to prevent mistakes</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cp</span>=<span class="hljs-string">&#x27;cp -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">mv</span>=<span class="hljs-string">&#x27;mv -i&#x27;</span><br><br><span class="hljs-comment"># Create a default workspace directory to keep all work files in one place</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$HOME</span>/workspace ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/workspace<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># User-specific environment settings</span><br><span class="hljs-comment"># Basic environment</span><br><span class="hljs-comment"># Set system language to en_US.UTF-8 to avoid Chinese character display issues in the terminal</span><br><span class="hljs-built_in">export</span> LANG=<span class="hljs-string">&quot;en_US.UTF-8&quot;</span><br><span class="hljs-comment"># The default PS1 setting displays the full path, to prevent it from becoming too long,</span><br><span class="hljs-comment"># it now shows &quot;username@dev last_directory_name&quot;</span><br><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&#x27;[\u@dev \W]\$ &#x27;</span><br><span class="hljs-comment"># Set the workspace directory</span><br><span class="hljs-built_in">export</span> WORKSPACE=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/workspace&quot;</span><br><span class="hljs-comment"># Add $HOME/bin directory to the PATH variable</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment"># Set the default editor to vim</span><br><span class="hljs-built_in">export</span> EDITOR=vim<br><br><span class="hljs-comment"># When logging into the system, default to the Workspace directory</span><br><span class="hljs-comment"># cd $WORKSPACE</span><br><br><span class="hljs-comment"># User-specific aliases, configures and functions</span><br><br><span class="hljs-comment"># Go envs</span><br><span class="hljs-comment"># Go version setting</span><br><span class="hljs-built_in">export</span> GOVERSION=go1.22.2<br><span class="hljs-comment"># Go installation directory</span><br><span class="hljs-built_in">export</span> GO_INSTALL_DIR=<span class="hljs-variable">$HOME</span>/go<br><span class="hljs-comment"># GOROOT setting</span><br><span class="hljs-built_in">export</span> GOROOT=<span class="hljs-variable">$GO_INSTALL_DIR</span>/<span class="hljs-variable">$GOVERSION</span>/go<br><span class="hljs-comment"># GOPATH setting</span><br><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-variable">$WORKSPACE</span>/golang <span class="hljs-comment">#</span><br><span class="hljs-comment"># Add the binaries from both the Go language and those installed via go install to the PATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$GOROOT</span>/bin:<span class="hljs-variable">$GOPATH</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment"># Enable Go modules feature</span><br><span class="hljs-built_in">export</span> GO111MODULE=<span class="hljs-string">&quot;on&quot;</span><br><span class="hljs-comment"># Proxy server setting for installing Go modules</span><br><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.cn,direct<br><span class="hljs-built_in">export</span> GOPRIVATE=<br><span class="hljs-comment"># Turn off checking the hash value of Go dependency packages</span><br><span class="hljs-built_in">export</span> GOSUMDB=off<br><span class="hljs-comment"># Alias and environments for onex quick access</span><br><span class="hljs-built_in">export</span> GOSRC=<span class="hljs-string">&quot;<span class="hljs-variable">$WORKSPACE</span>/golang/src&quot;</span><br><span class="hljs-comment"># OneX project root directory, used in many places.</span><br><span class="hljs-built_in">export</span> ONEX_ROOT=<span class="hljs-string">&quot;<span class="hljs-variable">$GOSRC</span>/github.com/superproj/onex&quot;</span><br><span class="hljs-comment"># Allows you to run latest compiled onex components like executing</span><br><span class="hljs-comment"># Linux commands, for example: onexctl.</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;ONEX_ROOT&#125;</span>/_output/platforms/linux/amd64:<span class="hljs-variable">$&#123;ONEX_ROOT&#125;</span>/scripts:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> OVERSION=v1.0.0<br><span class="hljs-comment"># a very convenient alias used to enter superproj root directory.</span><br><span class="hljs-built_in">alias</span> sp=<span class="hljs-string">&quot;cd <span class="hljs-variable">$GOSRC</span>/github.com/superproj&quot;</span><br><span class="hljs-comment"># a very convenient alias used to enter onex root directory.</span><br><span class="hljs-built_in">alias</span> o=<span class="hljs-string">&quot;cd <span class="hljs-variable">$GOSRC</span>/github.com/superproj/onex&quot;</span><br><br><span class="hljs-built_in">export</span> GOSUMDB=sum.golang.org<br><br><span class="hljs-comment"># �VSCode  open setting</span><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$WT_SESSION</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(wslpath <span class="hljs-string">&quot;<span class="hljs-subst">$(powershell.exe -Command &#x27;Get-Location&#x27;)</span>&quot;</span>)</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wsl</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>errgroup - golang sync 的扩展库</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/errgroup%20-%20%E5%A2%9E%E5%BC%BA%20go%20%E7%9A%84%E5%B9%B6%E5%8F%91%E8%83%BD%E5%8A%9B/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/errgroup%20-%20%E5%A2%9E%E5%BC%BA%20go%20%E7%9A%84%E5%B9%B6%E5%8F%91%E8%83%BD%E5%8A%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="errgroup-是什么？"><a href="#errgroup-是什么？" class="headerlink" title="errgroup 是什么？"></a>errgroup 是什么？</h2><p>errgroup 是Go官方扩展库 <code>golang.org/x/sync</code> 中的并发原语，用于管理多个 goroutine 的协同执行和错误处理。它解决了标准库 <code>sync.WaitGroup</code> 无法便捷传递错误的问题，支持在并发任务中统一处理错误，并支持在首个错误发生时取消所有任务。</p><h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><ol><li><strong>错误聚合与传播</strong><br> <strong>当任意一个 goroutine 返回错误时，errgroup 会立即取消其他未完成的任务，并将错误传递给主 goroutine，避免资源浪费。</strong></li><li><strong>批量任务取消</strong><br> 通过 <code>context.Context</code> 实现任务组的级联取消，一旦某个任务失败，整个任务组会被终止。</li><li><strong>超时控制</strong><br> 支持结合 <code>context.WithTimeout</code> 设置任务组超时时间，防止长时间阻塞。</li></ol><h2 id="与标准库-sync-WaitGroup-的对比"><a href="#与标准库-sync-WaitGroup-的对比" class="headerlink" title="与标准库 sync.WaitGroup 的对比"></a>与标准库 <code>sync.WaitGroup</code> 的对比</h2><p>相较于 <code>sync.WaitGroup</code> 仅提供等待机制，errgroup增加了以下能力：</p><ul><li>错误自动收集与传播；</li><li>任务取消的原子性操作；</li><li>更简洁的并发任务管理代码结构。</li></ul><h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get github.com/golang/sync<br></code></pre></td></tr></table></figure><h2 id="使用标准库的-sync-WaitGroup-收集并发错误"><a href="#使用标准库的-sync-WaitGroup-收集并发错误" class="headerlink" title="使用标准库的 sync.WaitGroup 收集并发错误"></a>使用标准库的 <code>sync.WaitGroup</code> 收集并发错误</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>  <span class="hljs-string">&quot;fmt&quot;</span><br>  <span class="hljs-string">&quot;net/http&quot;</span><br>  <span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> urls = []<span class="hljs-type">string</span>&#123;<br>    <span class="hljs-string">&quot;http://www.baidu.org/&quot;</span>,          <span class="hljs-comment">// 错误URL</span><br>    <span class="hljs-string">&quot;http://www.bilibili.com/&quot;</span>,       <span class="hljs-comment">// 正常URL</span><br>    <span class="hljs-string">&quot;http://www.somestupidname.com/&quot;</span>, <span class="hljs-comment">// 正常URL</span><br>  &#125;<br><br>  <span class="hljs-comment">// 1. 定义错误集合（类似K8s收集所有错误）</span><br>  <span class="hljs-keyword">var</span> errors []<span class="hljs-type">error</span><br>  <span class="hljs-comment">// 2. 定义互斥锁，保证并发安全</span><br>  <span class="hljs-keyword">var</span> mu sync.Mutex<br>  <span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br>  <span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> urls &#123;<br>    wg.Add(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">// 3. 传入url作为参数，避免goroutine共享循环变量（关键！）</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(u <span class="hljs-type">string</span>)</span></span> &#123;<br>      <span class="hljs-keyword">defer</span> wg.Done()<br>      resp, err := http.Get(u)<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <br>        <span class="hljs-comment">// 加锁保护错误集合写入</span><br>        mu.Lock()<br>        errors = <span class="hljs-built_in">append</span>(errors, fmt.Errorf(<span class="hljs-string">&quot;访问 %s 失败: %v&quot;</span>, u, err))<br>        mu.Unlock()<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-keyword">defer</span> resp.Body.Close()<br>      fmt.Printf(<span class="hljs-string">&quot;访问 %s 成功，状态码: %s\n&quot;</span>, u, resp.Status)<br>    &#125;(url) <span class="hljs-comment">// 传入当前迭代的url</span><br>  &#125;<br><br>  wg.Wait() <span class="hljs-comment">// 等待所有任务完成</span><br><br>  <span class="hljs-comment">// 4. 打印所有收集到的错误（类似K8s汇总错误信息）</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errors) &gt; <span class="hljs-number">0</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;\n收集到以下错误：&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, err := <span class="hljs-keyword">range</span> errors &#123;<br>      fmt.Printf(<span class="hljs-string">&quot;错误 %d: %v\n&quot;</span>, i+<span class="hljs-number">1</span>, err)<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;\n所有任务执行成功，无错误&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">访问 http://www.bilibili.com/ 成功，状态码: 200 OK<br>访问 http://www.somestupidname.com/ 成功，状态码: 200 OK<br><br>收集到以下错误：<br>错误 1: 访问 http://www.baidu.org/ 失败: Get &quot;http://www.baidu.org/&quot;: EOF<br></code></pre></td></tr></table></figure><p>这里必须要把所有的并发任务执行完成后，才可以返回所有的 goroutinue，而且还需要声明两个变量 errors 和 mutex 来确保并发安全。</p><h2 id="使用-errgroup-来收集并发错误"><a href="#使用-errgroup-来收集并发错误" class="headerlink" title="使用 errgroup 来收集并发错误"></a>使用 <code>errgroup</code> 来收集并发错误</h2><p>安装 <code>go get golang.org/x/sync</code></p><p>下面我们看看如果使用了 errgroup 可以怎么做：</p><h3 id="1-常规用法"><a href="#1-常规用法" class="headerlink" title="1.  常规用法"></a>1.  常规用法</h3><p>使用 <code>errgroup</code> 来收集并发错误：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>  <span class="hljs-string">&quot;fmt&quot;</span><br>  <span class="hljs-string">&quot;net/http&quot;</span><br>  <span class="hljs-string">&quot;sync&quot;</span><br><br>  <span class="hljs-string">&quot;golang.org/x/sync/errgroup&quot;</span><br>)<br><br>  <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> urls = []<span class="hljs-type">string</span>&#123;<br>    <span class="hljs-string">&quot;http://www.baidu.org/&quot;</span>,           <span class="hljs-comment">// 错误URL</span><br>    <span class="hljs-string">&quot;http://www.bilibili.com/&quot;</span>,        <span class="hljs-comment">// 正常URL</span><br>    <span class="hljs-string">&quot;http://www.somestupidname.xxyy/&quot;</span>, <span class="hljs-comment">// 错误URL</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 1. 定义错误集合，用于存储所有错误</span><br>  <span class="hljs-keyword">var</span> allErrors []<span class="hljs-type">error</span><br>  <span class="hljs-comment">// 2. 互斥锁，保证多个goroutine并发写入错误时的安全</span><br>  <span class="hljs-keyword">var</span> mu sync.Mutex<br>  <span class="hljs-comment">// 创建errgroup</span><br>  <span class="hljs-keyword">var</span> g errgroup.Group<br><br>  <span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> urls &#123;<br>    <span class="hljs-comment">// 3. 传入当前url作为参数，避免goroutine共享循环变量</span><br>    u := url<br>    g.Go(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br>      resp, err := http.Get(u)<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <br>        <span class="hljs-comment">// 加锁保护错误集合的写入</span><br>        mu.Lock()<br>        <span class="hljs-comment">// 存储详细错误信息（包含URL）</span><br>        allErrors = <span class="hljs-built_in">append</span>(allErrors, fmt.Errorf(<span class="hljs-string">&quot;访问 %s 失败: %w&quot;</span>, u, err))<br>        mu.Unlock()<br>        <br>        <span class="hljs-comment">// 返回错误（errgroup会记录第一个错误，但我们主要靠allErrors收集所有）</span><br>        <span class="hljs-keyword">return</span> err<br>      &#125;<br>      <span class="hljs-keyword">defer</span> resp.Body.Close()<br>      fmt.Printf(<span class="hljs-string">&quot;访问 %s 成功，状态码: %s\n&quot;</span>, u, resp.Status)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">// 等待所有goroutine完成（无论是否有错误）</span><br>  _ = g.Wait() <span class="hljs-comment">// 忽略errgroup返回的第一个错误，我们关注allErrors</span><br><br>  <span class="hljs-comment">// 4. 打印所有收集到的错误</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(allErrors) &gt; <span class="hljs-number">0</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;\n收集到所有错误：&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, err := <span class="hljs-keyword">range</span> allErrors &#123;<br>      fmt.Printf(<span class="hljs-string">&quot;错误 %d: %v\n&quot;</span>, i+<span class="hljs-number">1</span>, err)<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;\n所有请求均成功，无错误&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">访问 http://www.bilibili.com/ 成功，状态码: 200 OK<br><br>收集到所有错误：<br>错误 1: 访问 http://www.baidu.org/ 失败: Get &quot;http://www.baidu.org/&quot;: EOF<br>错误 2: 访问 http://www.somestupidname.xxyy/ 失败: Get &quot;http://www.somestupidname.xxyy/&quot;: EOF<br></code></pre></td></tr></table></figure><h3 id="2-取消上下文"><a href="#2-取消上下文" class="headerlink" title="2. 取消上下文"></a>2. 取消上下文</h3><p>如果收集到一个错误后立刻取消其他 goroutinue，避免资源浪费，并在 <code>Wait</code> 方法中返回第一个非 <code>nil</code> 的错误：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;context&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br><br>    <span class="hljs-string">&quot;golang.org/x/sync/errgroup&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> urls = []<span class="hljs-type">string</span>&#123;<br>        <span class="hljs-string">&quot;https://www.baidu.org/&quot;</span>,          <span class="hljs-comment">// 错误URL</span><br>        <span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span>,       <span class="hljs-comment">// 正常URL</span><br>        <span class="hljs-string">&quot;https://www.somestupidname.xxyy/&quot;</span>, <span class="hljs-comment">// 错误URL</span><br>    &#125;<br><br>    <span class="hljs-comment">// 1. 创建可取消的上下文</span><br>    ctx, cancel := context.WithCancel(context.Background())<br>    <span class="hljs-keyword">defer</span> cancel()<br><br>    <span class="hljs-comment">// 2. 定义错误集合和互斥锁</span><br>    <span class="hljs-keyword">var</span> allErrors []<span class="hljs-type">error</span><br>    <span class="hljs-keyword">var</span> mu sync.Mutex<br><br>    <span class="hljs-comment">// 3. 创建带上下文的errgroup</span><br>    g, ctx := errgroup.WithContext(ctx)<br><br>    <span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> urls &#123;<br>        u := url <span class="hljs-comment">// 避免goroutine共享循环变量</span><br>        g.Go(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br>            <span class="hljs-comment">// 4. 创建带上下文的HTTP请求</span><br>            req, err := http.NewRequestWithContext(ctx, <span class="hljs-string">&quot;GET&quot;</span>, u, <span class="hljs-literal">nil</span>)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                mu.Lock()<br>                allErrors = <span class="hljs-built_in">append</span>(allErrors, fmt.Errorf(<span class="hljs-string">&quot;创建请求 %s 失败: %w&quot;</span>, u, err))<br>                mu.Unlock()<br>                <span class="hljs-keyword">return</span> err<br>            &#125;<br><br>            <span class="hljs-comment">// 发送请求</span><br>            resp, err := http.DefaultClient.Do(req)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                mu.Lock()<br>                allErrors = <span class="hljs-built_in">append</span>(allErrors, fmt.Errorf(<span class="hljs-string">&quot;访问 %s 失败: %w&quot;</span>, u, err))<br>                mu.Unlock()<br>                <span class="hljs-keyword">return</span> err <span class="hljs-comment">// 触发上下文取消</span><br>            &#125;<br>            <span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>            <span class="hljs-comment">// 检查上下文是否已取消</span><br>            <span class="hljs-keyword">select</span> &#123;<br>            <span class="hljs-keyword">case</span> &lt;-ctx.Done():<br>                mu.Lock()<br>                allErrors = <span class="hljs-built_in">append</span>(allErrors, fmt.Errorf(<span class="hljs-string">&quot;请求 %s 被取消: %w&quot;</span>, u, ctx.Err()))<br>                mu.Unlock()<br>                <span class="hljs-keyword">return</span> ctx.Err()<br>            <span class="hljs-keyword">default</span>:<br>                fmt.Printf(<span class="hljs-string">&quot;访问 %s 成功，状态码: %s\n&quot;</span>, u, resp.Status)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>            &#125;<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 等待所有goroutine完成</span><br>    <span class="hljs-keyword">if</span> err := g.Wait(); err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>    &#125;<br><br>    <span class="hljs-comment">// 6. 打印所有错误</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(allErrors) &gt; <span class="hljs-number">0</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;\n收集到所有错误：&quot;</span>)<br>        <span class="hljs-keyword">for</span> i, err := <span class="hljs-keyword">range</span> allErrors &#123;<br>            fmt.Printf(<span class="hljs-string">&quot;错误 %d: %v\n&quot;</span>, i+<span class="hljs-number">1</span>, err)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;\n所有请求均成功，无错误&quot;</span>)<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Error:  Get &quot;https://www.somestupidname.xxyy/&quot;: EOF<br><br>收集到所有错误：<br>错误 1: 访问 https://www.somestupidname.xxyy/ 失败: Get &quot;https://www.somestupidname.xxyy/&quot;: EOF<br>错误 2: 访问 https://www.bilibili.com/ 失败: Get &quot;https://www.bilibili.com/&quot;: context canceled<br>错误 3: 访问 https://www.baidu.org/ 失败: Get &quot;https://www.baidu.org/&quot;: EOF<br></code></pre></td></tr></table></figure><p>这里我们可以看到错误 2 的错误原因是上下文被取消造成的。</p><h3 id="3-限制并发数量"><a href="#3-限制并发数量" class="headerlink" title="3. 限制并发数量"></a>3. 限制并发数量</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;golang.org/x/sync/errgroup&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>tasks := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;<br><br><span class="hljs-comment">// 1. 并发计数器：记录当前正在执行的任务数</span><br><span class="hljs-keyword">var</span> currentConcurrency <span class="hljs-type">int</span><br><span class="hljs-comment">// 互斥锁：保护并发计数器的读写安全</span><br><span class="hljs-keyword">var</span> mu sync.Mutex<br><br><span class="hljs-comment">// 创建errgroup并限制最大并发数为2</span><br>g, ctx := errgroup.WithContext(context.Background())<br>g.SetLimit(<span class="hljs-number">2</span>) <span class="hljs-comment">// 最大并发数2</span><br><br><span class="hljs-keyword">for</span> _, task := <span class="hljs-keyword">range</span> tasks &#123;<br>taskID := task<br>g.Go(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 2. 任务开始：并发数+1</span><br>mu.Lock()<br>currentConcurrency++<br>fmt.Printf(<span class="hljs-string">&quot;任务 %d 开始，当前并发数: %d\n&quot;</span>, taskID, currentConcurrency)<br>mu.Unlock()<br><br><span class="hljs-comment">// 模拟任务执行（耗时500ms）</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span> ctx.Err()<br><span class="hljs-keyword">default</span>:<br>time.Sleep(<span class="hljs-number">500</span> * time.Millisecond)<br>&#125;<br><br><span class="hljs-comment">// 3. 任务结束：并发数-1</span><br>mu.Lock()<br>currentConcurrency--<br>fmt.Printf(<span class="hljs-string">&quot;任务 %d 结束，当前并发数: %d\n&quot;</span>, taskID, currentConcurrency)<br>mu.Unlock()<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br>&#125;<br><br><span class="hljs-comment">// 等待所有任务完成</span><br><span class="hljs-keyword">if</span> err := g.Wait(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;执行出错: %v\n&quot;</span>, err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;所有任务执行完毕&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">任务 2 开始，当前并发数: 1<br>任务 1 开始，当前并发数: 2<br>任务 1 结束，当前并发数: 1<br>任务 3 开始，当前并发数: 2<br>任务 2 结束，当前并发数: 1<br>任务 4 开始，当前并发数: 2<br>任务 4 结束，当前并发数: 1<br>任务 5 开始，当前并发数: 2<br>任务 3 结束，当前并发数: 1<br>任务 6 开始，当前并发数: 2<br>任务 6 结束，当前并发数: 1<br>任务 7 开始，当前并发数: 2<br>任务 5 结束，当前并发数: 1<br>任务 8 开始，当前并发数: 2<br>任务 8 结束，当前并发数: 1<br>任务 9 开始，当前并发数: 2<br>任务 7 结束，当前并发数: 1<br>任务 10 开始，当前并发数: 2<br>任务 9 结束，当前并发数: 1<br>任务 10 结束，当前并发数: 0<br>所有任务执行完毕<br></code></pre></td></tr></table></figure><p>从执行结果看，并发数始终没有超过 2。</p><h3 id="4-尝试启动"><a href="#4-尝试启动" class="headerlink" title="4. 尝试启动"></a>4. 尝试启动</h3><p><code>errgroup</code> 还提供了 <code>errgroup.TryGo</code> 可以<strong>尝试启动一个任务</strong>，它返回一个 <code>bool</code> 值，标识任务是否启动成功，<code>true</code> 表示成功，<code>false</code> 表示失败。</p><p><code>errgroup.TryGo</code> 需要搭配 <code>errgroup.SetLimit</code> 一同使用，因为如果不限制并发数量，那么 <code>errgroup.TryGo</code> 始终返回 <code>true</code>，当达到最大并发数量限制时，<code>errgroup.TryGo</code> 返回 <code>false</code>。</p><p>示例如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;golang.org/x/sync/errgroup&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 创建一个 errgroup.Group</span><br><span class="hljs-keyword">var</span> g errgroup.Group<br><span class="hljs-comment">// 设置最大并发限制为 3</span><br>g.SetLimit(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 启动 10 个 goroutine</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-comment">// 捕获当前循环变量i（避免闭包延迟绑定导致的序号错乱）</span><br>num := i<br><span class="hljs-keyword">if</span> g.TryGo(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 打印正在运行的 goroutine</span><br>fmt.Printf(<span class="hljs-string">&quot;goroutine %d 正在启动\n&quot;</span>, num)<br>time.Sleep(<span class="hljs-number">2</span> * time.Second) <span class="hljs-comment">// 模拟工作</span><br>fmt.Printf(<span class="hljs-string">&quot;goroutine %d 已完成\n&quot;</span>, num)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;) &#123;<br><span class="hljs-comment">// 如果成功启动，打印提示</span><br>fmt.Printf(<span class="hljs-string">&quot;goroutine %d 启动成功\n&quot;</span>, num)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 如果达到并发限制，打印提示</span><br>fmt.Printf(<span class="hljs-string">&quot;goroutine %d 无法启动（已达并发限制）\n&quot;</span>, num)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 等待所有 goroutine 完成</span><br><span class="hljs-keyword">if</span> err := g.Wait(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;遇到错误：%v\n&quot;</span>, err)<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;所有goroutine已完成。&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">goroutine 1 启动成功<br>goroutine 1 正在启动<br>goroutine 2 启动成功<br>goroutine 3 启动成功<br>goroutine 4 无法启动（已达并发限制）<br>goroutine 5 无法启动（已达并发限制）<br>goroutine 6 无法启动（已达并发限制）<br>goroutine 7 无法启动（已达并发限制）<br>goroutine 8 无法启动（已达并发限制）<br>goroutine 9 无法启动（已达并发限制）<br>goroutine 10 无法启动（已达并发限制）<br>goroutine 3 正在启动<br>goroutine 2 正在启动<br>goroutine 2 已完成<br>goroutine 1 已完成<br>goroutine 3 已完成<br>所有goroutine已完成。<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/golang/sync">https://github.com/golang/sync</a></li><li><a href="https://mp.weixin.qq.com/s/JD6FDfCEWO6uQZhyvrIWkA">mp.weixin.qq.com&#x2F;s&#x2F;JD6FDfCEWO6uQZhyvrIWkA</a></li><li><a href="https://blog.csdn.net/ra681t58cjxsgckj31/article/details/143616687">Go 并发控制：errgroup 详解-CSDN博客</a></li><li><a href="https://jianghushinian.cn/2024/11/04/x-sync-errgroup/">Go 并发控制：errgroup 详解 | 江湖十年 | 学而不思则罔，思而不学则殆。</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>go3方库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 提交规范</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/git%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/git%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Commit-Message-规范"><a href="#Commit-Message-规范" class="headerlink" title="Commit Message 规范"></a>Commit Message 规范</h1><p>这里选用 Angular 的提交规范</p><h2 id="Angular-规范是什么？"><a href="#Angular-规范是什么？" class="headerlink" title="Angular 规范是什么？"></a>Angular 规范是什么？</h2><p>Angular 规范其实是一种语义化的提交规范（Semantic Commit Messages），所谓语义化的提交规范包含以下内容：</p><ul><li>Commit Message 是语义化的：Commit Message 都会被归为一个有意义的类型，用来说明本次 commit 的类型。</li><li>Commit Message 是规范化的：Commit Message 遵循预先定义好的规范，比如 Commit Message 格式固定、都属于某个类型，这些规范不仅可被开发者识别也可以被工具识别。</li></ul><h2 id="Angular-规范"><a href="#Angular-规范" class="headerlink" title="Angular 规范"></a>Angular 规范</h2><p>在 Angular 规范中，Commit Message 包含三个部分，分别是 <strong>Header</strong>、<strong>Body</strong> 和 <strong>Footer</strong>，格式如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">&lt;type&gt;[<span class="hljs-keyword">optional</span> scope]: &lt;description&gt;<br><span class="hljs-comment">// 空行</span><br>[<span class="hljs-keyword">optional</span> body]<br><span class="hljs-comment">// 空行</span><br>[<span class="hljs-keyword">optional</span> footer(s)]<br></code></pre></td></tr></table></figure><p>其中，header 是必需的，body 和 footer 可以省略。在以上规范中，<scope>必须用括号 () 括起来， <code>&lt;type&gt;[&lt;scope&gt;]</code> 后必须紧跟冒号 ，冒号后必须紧跟空格，2 个空行也是必须的。</p><p>以下是一个符合 Angular 规范的 Commit Message：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">fix($</span><span class="language-bash">compile): couple of unit tests <span class="hljs-keyword">for</span> IE9</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Please enter the Commit Message <span class="hljs-keyword">for</span> your changes. Lines starting</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">with <span class="hljs-string">&#x27;#&#x27;</span> will be ignored, and an empty message aborts the commit.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">On branch master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Changes to be committed:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">...</span><br><br><br>Older IEs serialize html uppercased, but IE9 does not...<br>Would be better to expect case insensitive, unfortunately jasmine does<br>not allow to user regexps for throw expectations.<br><br><br>Closes #392<br>Breaks foo.bar api, foo.baz should be used instead<br></code></pre></td></tr></table></figure><p>在实际开发中，为了使 Commit Message 在 GitHub 或者其他 Git 工具上更加易读，我们往往会限制每行 message 的长度。根据需要，可以限制为 50&#x2F;72&#x2F;100 个字符，这里我将长度限制在 72 个字符以内（也有一些开发者会将长度限制为 100，你可根据需要自行选择）。</p><h2 id="Angular-规范格式"><a href="#Angular-规范格式" class="headerlink" title="Angular 规范格式"></a>Angular 规范格式</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分只有一行，包括三个字段：type（必选）、scope（可选）和 subject（必选）。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>我们先来说 <strong>type</strong>，它用来说明 commit 的类型。为了方便记忆，我把这些类型做了归纳，它们主要可以归为 Development 和 Production 共两类。它们的含义是：</p><ul><li>Development：这类修改一般是项目管理类的变更，不会影响最终用户和生产环境的代码，比如 CI 流程、构建方式等的修改。遇到这类修改，通常也意味着可以免测发布。</li><li>Production：这类修改会影响最终的用户和生产环境的代码。所以对于这种改动，我们一定要慎重，并在提交前做好充分的测试。</li></ul><p>我在这里列出了 Angular 规范中的常见 type 和它们所属的类别，你在提交 Commit Message 的时候，一定要注意区分它的类别。举个例子，我们在做 Code Review 时，如果遇到 Production 类型的代码，一定要认真 Review，因为这种类型，会影响到现网用户的使用和现网应用的功能。</p><table><thead><tr><th><strong>类型</strong></th><th><strong>类别</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>feat</td><td>Production</td><td>新增功能</td></tr><tr><td>fix</td><td>Production</td><td>Bug 修复</td></tr><tr><td>perf</td><td>Production</td><td>提高代码性能的变更</td></tr><tr><td>refactor</td><td>Production</td><td>其他代码类的变更，这些变更不属于 feat、fix、perf 和 style，例如简化代码、重命名变量、删除冗余代码等</td></tr><tr><td>style</td><td>Development</td><td>代码格式类的变更，比如用 gofmt 格式化代码、删除空行等</td></tr><tr><td>test</td><td>Development</td><td>新增测试用例或是更新现有测试用例</td></tr><tr><td>ci</td><td>Development</td><td>持续集成和部署相关的改动，比如修改 Jenkins、GitLab CI 等 CI 配置文件或者更新 systemd unit 文件</td></tr><tr><td>docs</td><td>Development</td><td>文档类的更新，包括修改用户文档或者开发文档等</td></tr><tr><td>chore</td><td>Development</td><td>其他类型，比如构建流程、依赖管理或者辅助工具的变动等</td></tr></tbody></table><p><strong>WIP</strong>: 这里如果代码开发到一半未完成时，可以使用 WIP 提交到自己分支，表示这是一个未开发完成的标识，共享到团队成员以便别人知道这个分支暂不适合合并到主分支，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text"># 支持 CD 发布的回滚功能，但是还未开发完成，或者也可以直接在自己的分支提交信息为 WIP<br>WIP: Support CD deploy rollback<br></code></pre></td></tr></table></figure><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>scope 这里先不建议填写，因为把握不好颗粒度反而会让项目很难维护。</p><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>subject 是 commit 的简短描述，必须以动词开头、使用现在时。比如，我们可以用 change，却不能用 changed 或 changes，而且这个动词的第一个字母必须是小写。通过这个动词，我们可以明确地知道 commit 所执行的操作。此外我们还要注意，subject 的结尾不能加英文句号。</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>Header 对 commit 做了高度概括，可以方便我们查看 Commit Message。那我们如何知道具体做了哪些变更呢？答案就是，可以通过 Body 部分，它是对本次 commit 的更详细描述，是可选的。</p><p>Body 部分可以分成多行，而且格式也比较自由。不过，和 Header 里的<code>&lt;subject&gt;</code>一样，它也要以动词开头，使用现在时。此外，它还必须<strong>要包括修改的动机</strong>，以及<strong>和跟上一版本相比的改动点</strong>。</p><p>除范围为 “docs” 的提交外，所有提交都必须包含正文。当正文为必填项时，其长度必须至少为 20 个字符。</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>Footer 部分不是必选的，可以根据需要来选择，主要用来说明本次 commit 导致的后果。在实际应用中，Footer 通常用来说明不兼容的改动和关闭的 Issue 列表，格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">BREAKING CHANGE: &lt;breaking change summary&gt;<br>// 空行<br>&lt;breaking change description + migration instructions&gt;<br>// 空行<br>// 空行<br>Fixes #&lt;issue number&gt;<br></code></pre></td></tr></table></figure><p>接下来，我给你详细说明下这两种情况：</p><ul><li>不兼容的改动：如果当前代码跟上一个版本不兼容，需要在 Footer 部分，以 BREAKING CHANG: 开头，后面跟上不兼容改动的摘要。Footer 的其他部分需要说明变动的描述、变动的理由和迁移方法，例如：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">BREAKING CHANGE:</span> <span class="hljs-string">isolate</span> <span class="hljs-string">scope</span> <span class="hljs-string">bindings</span> <span class="hljs-string">definition</span> <span class="hljs-string">has</span> <span class="hljs-string">changed</span> <span class="hljs-string">and</span><br>    <span class="hljs-string">the</span> <span class="hljs-string">inject</span> <span class="hljs-string">option</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">directive</span> <span class="hljs-string">controller</span> <span class="hljs-string">injection</span> <span class="hljs-string">was</span> <span class="hljs-string">removed.</span><br><br>    <span class="hljs-attr">To migrate the code follow the example below:</span><br><br>    <span class="hljs-attr">Before:</span><br><br>    <span class="hljs-attr">scope:</span> &#123;<br>      <span class="hljs-attr">myAttr:</span> <span class="hljs-string">&#x27;attribute&#x27;</span>,<br>    &#125;<br><br>    <span class="hljs-attr">After:</span><br><br>    <span class="hljs-attr">scope:</span> &#123;<br>      <span class="hljs-attr">myAttr:</span> <span class="hljs-string">&#x27;@&#x27;</span>,<br>    &#125;<br>    <span class="hljs-string">The</span> <span class="hljs-string">removed</span> <span class="hljs-string">inject</span> <span class="hljs-string">wasn&#x27;t</span> <span class="hljs-string">generaly</span> <span class="hljs-string">useful</span> <span class="hljs-string">for</span> <span class="hljs-string">directives</span> <span class="hljs-string">so</span> <span class="hljs-string">there</span> <span class="hljs-string">should</span> <span class="hljs-string">be</span> <span class="hljs-literal">no</span> <span class="hljs-string">code</span> <span class="hljs-string">using</span> <span class="hljs-string">it.</span><br></code></pre></td></tr></table></figure><ul><li>关闭的 Issue 列表：关闭的 Bug 需要在 Footer 部分新建一行，并以 Closes 开头列出，例如：Closes #123。如果关闭了多个 Issue，可以这样列出：Closes #123, #432, #886。例如:</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Change pause <span class="hljs-built_in">version</span> <span class="hljs-built_in">value</span> <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">constant</span> <span class="hljs-keyword">for</span> image<br>    <br>    Closes <span class="hljs-comment">#1137</span><br></code></pre></td></tr></table></figure><h3 id="Revert-Commit"><a href="#Revert-Commit" class="headerlink" title="Revert Commit"></a>Revert Commit</h3><p>除了 <strong>Header</strong>、<strong>Body</strong> 和 <strong>Footer</strong> 这 3 个部分，<strong>Commit Message</strong> 还有一种特殊情况：如果当前 commit 还原了先前的 commit，则应以 revert: 开头，后跟还原的 commit 的 Header。而且，在 Body 中必须写成 This reverts commit <code>&lt;hash&gt;</code> ，其中 hash 是要还原的 commit 的 SHA 标识。例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">revert: feat(iam-apiserver): <span class="hljs-keyword">add</span> <span class="hljs-string">&#x27;Host&#x27;</span> <span class="hljs-keyword">option</span><br><br>This reverts <span class="hljs-keyword">commit</span> <span class="hljs-number">079360</span>c7cfc830ea8a6e13f4c8b8114febc9b48a.<br></code></pre></td></tr></table></figure><p>为了更好地遵循 Angular 规范，建议你在提交代码时养成不用 git commit -m，即不用-m 选项的习惯，而是直接用 git commit 或者 git commit -a 进入交互界面编辑 Commit Message。这样可以更好地格式化 Commit Message。</p><p>但是除了 Commit Message 规范之外，在代码提交时，我们还需要关注 3 个重点内容：提交频率、合并提交和 Commit Message 修改。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zj-git-guide.readthedocs.io/zh-cn/latest/message/Angular%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83/">Angular提交信息规范 - Git Guide</a></li><li><a href="https://konglingfei.com/onex/convention/commit.html#%E4%BB%80%E4%B9%88%E6%98%AF-angular-%E8%A7%84%E8%8C%83">Git Commit Message 规范 | 云原生AI实战星球</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 常用操作整理</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/git%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/git%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Github-上提交-pr-操作"><a href="#Github-上提交-pr-操作" class="headerlink" title="Github 上提交 pr 操作"></a><strong>Github 上提交 pr 操作</strong></h2><ol><li><p>先fork仓库到自己仓库</p></li><li><p>拉取自己仓库代码</p></li><li><p>拉出自己的开发分支</p></li><li><p>【<strong>重点</strong>】开发完成后，保证自己的分支只提交过一个commit（这里的commit指的是自己提交的coommit，多的commit则要进行压缩合并操作）</p></li><li><p>【<strong>重点】<strong>先同步远程仓库代码，也就是上自己仓库中找到同步的远程仓库，点一下</strong>“sync”</strong>，拉取自己仓库的主分支代码（这里的主分支默认为main），保证主分支代码是最新的</p></li><li><p>【**重点】**然后进行 rebase 操作，进入到自己的本地开发分支下面，执行 <code>git rebase main</code>,这样会把自己的开发分支基于main分支再映射一遍，可能会有冲突，如果到这里没有冲突，就可以提交到自己远程仓库，发起pr操作</p></li><li><p>【**重点】解冲突：**这里执行完rebase后，如果有冲突编辑器会按顺序让你确认需要提交的最终文件，假如a.go、b.go、c.go这3个文件有冲突，则先对a.go进行解冲突，解完后执行 <code>git add .</code> ,将解完的冲突提交到暂存区，执行 <code>git rebase --continue</code> 继续解下一个冲突, 按这样解完所有的冲突后就可以执行 push 动作，接着就可以到远程操作提交自己的pr，描述下自己的更改都做了什么了！</p></li></ol><h2 id="追加文件修改到上一次提交"><a href="#追加文件修改到上一次提交" class="headerlink" title="追加文件修改到上一次提交"></a><strong>追加文件修改到上一次提交</strong></h2><ol><li><p>修改你需要追加的文件</p></li><li><p>执行 <code>git add .</code></p></li><li><p>执行 <code>git commit --amend</code> 后进入修改上一次的commit message页面，修改完成后wq后保存退出</p></li><li><p>如果不需要修改上一次的commit message，则直接执行 <code>git commit --amend --no-edit</code></p></li></ol><h2 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a><strong>代码回滚</strong></h2><ul><li><strong>reset</strong>：将当前的 HEAD 指针指向该 commitID，并将<strong>该 commit 之后的修改的文件</strong>移动到<strong>工作区</strong></li><li><strong>reset –hard</strong>：【注意】将当前的 HEAD 指针指向该 commitID，<strong>撤销该 commit 之后的所有文件更改</strong></li><li><strong>reset –soft</strong>：将当前的 HEAD 指针指向该 commitID，并将<strong>该 commit 之后的修改的文件移动到暂存区</strong>修改完后查看 commit 没问题后执行 <code>git push -f</code> 强制推送到远端</li><li><strong>revert</strong>：还原某次提交的文件到<strong>该次提交前的状态</strong></li><li>回滚指定 commit 中的文件，场景：很早之前的一个commit中的一个文件发现修改错了，想要检出来重新提交</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git checkout &lt;commit-hash&gt; -- &lt;file-path&gt;<br></code></pre></td></tr></table></figure><h2 id="压缩提交的两种方式"><a href="#压缩提交的两种方式" class="headerlink" title="压缩提交的两种方式"></a><strong>压缩提交的两种方式</strong></h2><ol><li><p>使用<strong>代码回滚</strong>中的 <strong>reset –soft</strong> 到指定要压缩的 commit 的前一个commit，这样所有的更改都会到暂存区，再重新编辑提交信息后进行提交。</p></li><li><p>使用 <code>git log</code> 查看要压缩的所有的提交的<strong>前一个commit</strong>,复制该commit ID，然后执行<code>git rebase -i [commit ID]</code>,进入压缩界面，将第一行的pick留下，其他行改为小写的s，然后wq保存退出，进入更改commit message界面，修改成你的message，然后wq保存退出，就ok了。</p></li></ol><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a><strong>合并冲突</strong></h2><h2 id="合并过程中遇到冲突但是不想处理冲突时需要退出"><a href="#合并过程中遇到冲突但是不想处理冲突时需要退出" class="headerlink" title="合并过程中遇到冲突但是不想处理冲突时需要退出"></a><strong>合并过程中遇到冲突但是不想处理冲突时需要退出</strong></h2><p>执行 <code>git merge --abort</code></p><h2 id="检出-a-分支上的提交到-b-分支"><a href="#检出-a-分支上的提交到-b-分支" class="headerlink" title="检出 a 分支上的提交到 b 分支"></a><strong>检出 a 分支上的提交到 b 分支</strong></h2><p>假设我们现在需要把 a 分支上的一些提交（如哈希值为 32 到 35 的提交）检出到 b 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">// 首先我们切换到 b 分支<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git choutout b</span><br><br>// 如果想搞成[]区间，使用 git cherry-pick 32^..35 相当于[32 35]包含32<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git cherry-pick 32^..35</span><br></code></pre></td></tr></table></figure><p><code>git cherry-pick --continue</code>：用户解决代码冲突后，第一步将修改的文件重新加入暂存区（git add .），第二步使用下面的命令，让 Cherry pick 过程继续执行。</p><p><code>git cherry-pick --abort</code>：发生代码冲突后，放弃合并，回到操作前的样子。</p><p><code>git cherry-pick --quit</code>: 发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。</p><p>📝参考：<a href="https://blog.csdn.net/muzidigbig/article/details/122321393">https://blog.csdn.net/muzidigbig/article/details/122321393</a></p><h2 id="合并分支时忽略空白行的冲突-使用频率低）"><a href="#合并分支时忽略空白行的冲突-使用频率低）" class="headerlink" title="合并分支时忽略空白行的冲突(使用频率低）"></a>合并分支时忽略空白行的冲突(使用频率低）</h2><ul><li>Xignore-all-space: 在比较行时 <strong>完全忽略</strong> 空白修改</li><li>Xignore-space-change:将一个空白符与多个连续的空白字符视作等价的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge -Xignore-space-change [branch name]</span><br></code></pre></td></tr></table></figure><h2 id="查看当前所有目录文件的-sha-2-值"><a href="#查看当前所有目录文件的-sha-2-值" class="headerlink" title="查看当前所有目录文件的 sha-2 值"></a><strong>查看当前所有目录文件的 sha-2 值</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git ls-files -s<br></code></pre></td></tr></table></figure><p>📝参考：</p><p><a href="https://blog.csdn.net/weixin_44154094/article/details/114337077">https://blog.csdn.net/weixin_44154094&#x2F;article&#x2F;details&#x2F;114337077</a></p><p><a href="https://blog.csdn.net/weiwosuoai/article/details/141179308?spm=1001.2014.3001.5501">动图展示 10 大 Git 命令，让你轻松掌握Git-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从特性门控中学习权限读写限制</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%BB%8E%E7%89%B9%E6%80%A7%E9%97%A8%E6%8E%A7%E4%B8%AD%E5%AD%A6%E4%B9%A0%E6%9D%83%E9%99%90%E8%AF%BB%E5%86%99%E9%99%90%E5%88%B6/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%BB%8E%E7%89%B9%E6%80%A7%E9%97%A8%E6%8E%A7%E4%B8%AD%E5%AD%A6%E4%B9%A0%E6%9D%83%E9%99%90%E8%AF%BB%E5%86%99%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里通过特性门控的实现学习到如何通过不同的接口来实现权限读写限制，为应用初始化和业务调用分别提供不同的接口。</p></blockquote><p>如果不了解 k8s 的特性门控，需要先阅读参考文章后再来看这部分的代码实现。</p><p>首先当我们自己在使用特性门控时，代码如下：</p><ol><li>创建自定义门控列表</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> feature<br><br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;k8s.io/component-base/featuregate&quot;</span><br>)<br><br><br><span class="hljs-keyword">var</span> (<br><span class="hljs-comment">// DefaultMutableFeatureGate 是 DefaultFeatureGate 的可变版本。</span><br><span class="hljs-comment">// 只有顶级命令 / 选项设置以及 k8s.io/component-base/featuregate/testing 包应该使用这个。</span><br><span class="hljs-comment">// 需要在测试期间修改特性门控的测试应该使用：</span><br><span class="hljs-comment">// defer featuregatetesting.SetFeatureGateDuringTest (t, utilfeature.DefaultFeatureGate, features.&lt;FeatureName&gt;, &lt;value&gt;)()</span><br><br><span class="hljs-comment">// MutableFeatureGate 接口定义： https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/component-base/featuregate/feature_gate.go\#L124</span><br>    DefaultMutableFeatureGate featuregate.MutableFeatureGate = featuregate.NewFeatureGate()<br><br><br><span class="hljs-comment">// DefaultFeatureGate是一个共享的全局功能门。</span><br><span class="hljs-comment">// 需要修改此功能门的顶级命令/选项设置应使用DefaultMutableFeatureGate。</span><br><br><span class="hljs-comment">// 这个门控只读，可以供业务调用时使用，避免在业务执行过程中不小心修改门控的信息</span><br><span class="hljs-comment">// 所以虽然这个 DefaultFeatureGate 的值为 DefaultMutableFeatureGate，但是通过不同的接口限制，限制该对象的用法，用来限制权限</span><br><br><span class="hljs-comment">// FeatureGate 接口定义：https://github.com/kubernetes/kubernetes/blob/93844abbe2ec93ce25ab96ff20cc75e750957fe5/staging/src/k8s.io/component-base/featuregate/feature_gate.go\#L109</span><br>    DefaultFeatureGate featuregate.FeatureGate = DefaultMutableFeatureGate<br>)<br></code></pre></td></tr></table></figure><ul><li>DefaultMutableFeatureGate: 这个门控可写，用来在应用初始化时使用</li><li>DefaultFeatureGate:<ul><li>这个门控只读，可以供业务调用时使用，避免在业务执行过程中不小心修改门控的信息</li><li>所以虽然这个 DefaultFeatureGate 的值为 DefaultMutableFeatureGate，但是通过不同的接口限制，限制该对象的用法，用来限制权限</li></ul></li></ul><ol><li><strong>新增功能门控</strong></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> feature<br><br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;k8s.io/apimachinery/pkg/util/runtime&quot;</span><br>    <span class="hljs-string">&quot;k8s.io/component-base/featuregate&quot;</span><br>)<br><br><br><span class="hljs-comment">// Define a new feature gate.</span><br><span class="hljs-keyword">const</span> MyNewFeature featuregate.Feature = <span class="hljs-string">&quot;MyNewFeature&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// runtime.Must(utilfeature.DefaultMutableFeatureGate.Add(defaultFeatureGates))</span><br>    runtime.Must(DefaultMutableFeatureGate.Add(defaultFeatureGates))<br>&#125;<br><br><br><span class="hljs-comment">// defaultFeatureGates consists of all known specific feature keys.</span><br><span class="hljs-comment">// To add a new feature, define a key for it above and add it here.</span><br><span class="hljs-keyword">var</span> defaultFeatureGates = <span class="hljs-keyword">map</span>[featuregate.Feature]featuregate.FeatureSpec&#123;<br>    <span class="hljs-comment">// owner: @colin404</span><br>    <span class="hljs-comment">// Deprecated: v1.31</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// An example feature gate.</span><br>    MyNewFeature: &#123;Default: <span class="hljs-literal">false</span>, PreRelease: featuregate.Alpha&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>注册功能门控</strong></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br><br><br>    <span class="hljs-string">&quot;github.com/spf13/pflag&quot;</span><br>    <span class="hljs-string">&quot;github.com/superproj/k8sdemo/featuregates/feature&quot;</span><br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Create a new FlagSet for managing command-line flags</span><br>    fs := pflag.NewFlagSet(<span class="hljs-string">&quot;feature&quot;</span>, pflag.ExitOnError)<br><br><br>    <span class="hljs-comment">// Set the usage function to provide a custom help message</span><br>    fs.Usage = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;Usage of %s:\n&quot;</span>, os.Args[<span class="hljs-number">0</span>])<br>        fs.PrintDefaults()<br>    &#125;<br><br><br>    <span class="hljs-comment">// Define a boolean flag for displaying help</span><br>    help := fs.BoolP(<span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;Show this help message.&quot;</span>)<br><br><br>    <span class="hljs-comment">// Add the feature gates to the flag set</span><br>    feature.DefaultMutableFeatureGate.AddFlag(fs)<br><br><br>    <span class="hljs-comment">// Parse the command-line flags</span><br>    fs.Parse(os.Args[<span class="hljs-number">1</span>:])<br><br><br>    <span class="hljs-comment">// Display help message if the help flag is set</span><br>    <span class="hljs-keyword">if</span> *help &#123;<br>        fs.Usage()<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br><br>    <span class="hljs-comment">// Check if the MyNewFeature feature gate is enabled</span><br>    <span class="hljs-keyword">if</span> feature.DefaultFeatureGate.Enabled(feature.MyNewFeature) &#123;<br>        <span class="hljs-comment">// Logic when the new feature is enabled</span><br>        fmt.Println(<span class="hljs-string">&quot;Feature Gates: MyNewFeature is opened&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Logic when the new feature is disabled</span><br>        fmt.Println(<span class="hljs-string">&quot;Feature Gates: MyNewFeature is closed&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>应用启动时给特性门控初始化</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"> $ </span><span class="language-bash">go run main.go -h</span><br>Usage of /tmp/go-build224395384/b001/exe/main:<br>      --feature-gates mapStringBool   A set of key=value pairs that describe feature gates for alpha/experimental features. Options are:<br>                                      AllAlpha=true|false (ALPHA - default=false)<br>                                      AllBeta=true|false (BETA - default=false)<br>                                      MyNewFeature=true|false (ALPHA - default=false)<br>  -h, --help                          Show this help message.<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run main.go  --feature-gates=MyNewFeature=<span class="hljs-literal">false</span></span><br>Feature Gates: MyNewFeature is closed<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run main.go  --feature-gates=MyNewFeature=<span class="hljs-literal">true</span></span><br>Feature Gates: MyNewFeature is opened<br></code></pre></td></tr></table></figure><h1 id="📎-参考文章"><a href="#📎-参考文章" class="headerlink" title="📎 参考文章"></a>📎 参考文章</h1><ul><li><a href="https://articles.zsxq.com/id_mp6aqenpvltk.html">https://articles.zsxq.com/id_mp6aqenpvltk.html</a></li><li><a href="https://articles.zsxq.com/id_nddb3ragu7du.html">https://articles.zsxq.com/id_nddb3ragu7du.html</a></li><li><a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/features/kube_features.go#L1973">https://github.com/kubernetes/kubernetes/blob/master/pkg/features/kube_features.go#L1973</a></li><li><a href="https://github.com/onexstack/onex/blob/v0.1.1/internal/pkg/feature/features.go">https://github.com/onexstack/onex/blob/v0.1.1/internal/pkg/feature/features.go</a></li><li><a href="https://github.com/onexstack/onex/blob/v0.1.1/internal/controller/miner/controller.go#L106">https://github.com/onexstack/onex/blob/v0.1.1/internal/controller/miner/controller.go#L106</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高质量博客地址收藏</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E9%AB%98%E8%B4%A8%E9%87%8F%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80%E6%94%B6%E8%97%8F/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E9%AB%98%E8%B4%A8%E9%87%8F%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><blockquote><p>[!info] 万字长文：彻底掌握 Go 1.23 中的迭代器<br>本文带大家一起来深入探究一下 Go 1.<br><a href="https://jianghushinian.cn/2025/07/17/go-iterator/">https://jianghushinian.cn/2025/07/17/go-iterator/</a>  </p></blockquote><ul><li><strong>Golang pprof 案例实战与原理解析</strong></li></ul><blockquote><p>[!info] mp.weixin.qq.com  </p><p><a href="https://mp.weixin.qq.com/s/Qwmo9FHCF010-0rMUbyuww">https://mp.weixin.qq.com/s/Qwmo9FHCF010-0rMUbyuww</a>  </p></blockquote><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ul><li>b 站 李立超的 <strong>JavaScript</strong> 基础笔记</li></ul><blockquote><p>[!info] javascript全笔记-基础版（尚硅谷视频李立超老师）_尚硅谷javascript笔记-CSDN博客<br>文章浏览阅读5.<br><a href="https://blog.csdn.net/weixin_51717662/article/details/127350191">https://blog.csdn.net/weixin_51717662&#x2F;article&#x2F;details&#x2F;127350191</a>  </p></blockquote><ul><li><strong>XiaoYu2002 - JavaScript 高级系列</strong></li></ul><blockquote><p>[!info] juejin.cn  </p><p><a href="https://juejin.cn/column/7403629671684177955?share_token=0814c846-ca1a-44e3-8f31-9b50ff0d1e4e">https://juejin.cn/column/7403629671684177955?share_token&#x3D;0814c846-ca1a-44e3-8f31-9b50ff0d1e4e</a>  </p></blockquote><h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><ul><li>从 0 学习小程序开发</li></ul><blockquote><p>[!info] mp.weixin.qq.com  </p><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIzODc1MjgwNw==&action=getalbum&album_id=4047135855184396309&subscene=126&scenenote=https://mp.weixin.qq.com/s?__biz=MzIzODc1MjgwNw==&mid=2247484073&idx=1&sn=34bd6844d23a44ca8af1501aa5471d63&chksm=e8bd86b1266be7b45e19b42689249e4b9f0cdf56c60c46df0715210bcfed4c414b67ad5ea240&forbs=1&scene=126&subscene=91&sessionid=1752773535&flutter_pos=0&clicktime=1752773542&enterid=1752773542&finder_biz_enter_id=5&jumppath=1001_1752772826786%252C1102_1752773533174%252C1001_1752773534560%252C50094_1752773535484&jumppathdepth=4&ascene=56&fasttmpl_type=0&fasttmpl_fullversion=7824325-zh_CN-zip&fasttmpl_flag=0&realreporttime=1752773542225&devicetype=android-35&version=28003d3f&nettype=ctnet&abtest_cookie=AAACAA%253D%253D&lang=zh_CN&session_us=gh_8de54bc16233&countrycode=IS&exportkey=n_ChQIAhIQ5%252BYdvu%252FkMM82gDQknz2v%252BRLwAQIE97dBBAEAAAAAAMTFNFBEKp4AAAAOpnltbLcz9gKNyK89dVj0CPL%252BzgffKuIF4Ie8Q1YX96XRm41rDApnQ%252FWjx70xl3oo5bRA%252FMuAA%252FBy0ADHYRG%252BiIkXM0gE1gkUn%252FHnOlnzwEdOmwZLRMmmi3tHLYU75xXpXyUN3i46AiaGITG3N9Mb2na4zozs%252FBgJK149VWwvz6fYLp1wWNudeJ4DkJvszR64ggX3QIaLgWzUS8oJwS5MCdesC1x3gjgXu%252FttR9o0e8uEGakgIr0SN9YlEqOHF%252BGOpBQxkrbYes6gQA84GNZEGITTtpIwo0e4Cg%253D%253D&pass_ticket=OSvDd6Y7%252BRlu%252Fc8fVzvQw%252BHyFTmIZNhVpIbyPQ1OlsGPca6OpKxPuy0D91bqnEMR&wx_header=3&nolastread=1#wechat_redirect">https://mp.weixin.qq.com/mp/appmsgalbum?__biz&#x3D;MzIzODc1MjgwNw&#x3D;&#x3D;&amp;action&#x3D;getalbum&amp;album_id&#x3D;4047135855184396309&amp;subscene&#x3D;126&amp;scenenote&#x3D;https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIzODc1MjgwNw%3D%3D%26mid%3D2247484073%26idx%3D1%26sn%3D34bd6844d23a44ca8af1501aa5471d63%26chksm%3De8bd86b1266be7b45e19b42689249e4b9f0cdf56c60c46df0715210bcfed4c414b67ad5ea240%26forbs%3D1%26scene%3D126%26subscene%3D91%26sessionid%3D1752773535%26flutter_pos%3D0%26clicktime%3D1752773542%26enterid%3D1752773542%26finder_biz_enter_id%3D5%26jumppath%3D1001_1752772826786%252C1102_1752773533174%252C1001_1752773534560%252C50094_1752773535484%26jumppathdepth%3D4%26ascene%3D56%26fasttmpl_type%3D0%26fasttmpl_fullversion%3D7824325-zh_CN-zip%26fasttmpl_flag%3D0%26realreporttime%3D1752773542225%26devicetype%3Dandroid-35%26version%3D28003d3f%26nettype%3Dctnet%26abtest_cookie%3DAAACAA%253D%253D%26lang%3Dzh_CN%26session_us%3Dgh_8de54bc16233%26countrycode%3DIS%26exportkey%3Dn_ChQIAhIQ5%252BYdvu%252FkMM82gDQknz2v%252BRLwAQIE97dBBAEAAAAAAMTFNFBEKp4AAAAOpnltbLcz9gKNyK89dVj0CPL%252BzgffKuIF4Ie8Q1YX96XRm41rDApnQ%252FWjx70xl3oo5bRA%252FMuAA%252FBy0ADHYRG%252BiIkXM0gE1gkUn%252FHnOlnzwEdOmwZLRMmmi3tHLYU75xXpXyUN3i46AiaGITG3N9Mb2na4zozs%252FBgJK149VWwvz6fYLp1wWNudeJ4DkJvszR64ggX3QIaLgWzUS8oJwS5MCdesC1x3gjgXu%252FttR9o0e8uEGakgIr0SN9YlEqOHF%252BGOpBQxkrbYes6gQA84GNZEGITTtpIwo0e4Cg%253D%253D%26pass_ticket%3DOSvDd6Y7%252BRlu%252Fc8fVzvQw%252BHyFTmIZNhVpIbyPQ1OlsGPca6OpKxPuy0D91bqnEMR%26wx_header%3D3&amp;nolastread&#x3D;1#wechat_redirect</a>  </p></blockquote><h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><ul><li>Xiaoyu2002 - <strong>NodeJS系列</strong></li></ul><blockquote><p>[!info] juejin.cn  </p><p><a href="https://juejin.cn/column/7352763028537065513?share_token=0e0afb6a-465e-4092-9e29-d982561e3513">https://juejin.cn/column/7352763028537065513?share_token&#x3D;0e0afb6a-465e-4092-9e29-d982561e3513</a>  </p></blockquote><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ul><li>码哥跳动 - Redis</li></ul><blockquote><p>[!info] mp.weixin.qq.com  </p><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzkzMDI1NjcyOQ==&action=getalbum&album_id=1918295695426404359&scene=126#wechat_redirect">https://mp.weixin.qq.com/mp/appmsgalbum?__biz&#x3D;MzkzMDI1NjcyOQ&#x3D;&#x3D;&amp;action&#x3D;getalbum&amp;album_id&#x3D;1918295695426404359&amp;scene&#x3D;126#wechat_redirect</a>  </p></blockquote><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><ul><li>码哥跳动 - kafka</li></ul><blockquote><p>[!info] mp.weixin.qq.com  </p><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzkzMDI1NjcyOQ==&action=getalbum&album_id=1918297111809310722&scene=126#wechat_redirect">https://mp.weixin.qq.com/mp/appmsgalbum?__biz&#x3D;MzkzMDI1NjcyOQ&#x3D;&#x3D;&amp;action&#x3D;getalbum&amp;album_id&#x3D;1918297111809310722&amp;scene&#x3D;126#wechat_redirect</a>  </p></blockquote><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><ul><li>微服务架构设计</li></ul><blockquote><p>[!info] 微服务架构设计 | 微服务架构设计<br>架构的重要性已不言而喻，但凡一个软件项目必定会涉及服务的架构，因此市面上介绍此类知识的书籍可谓汗牛充栋。机缘巧合下笔者结识一出版社朋友并希望我写一本微服务相关的书籍，笔者虽在此方面小有经验，但颇为担心落得个拾人牙慧的骂名。 在几经调研后，笔者发现微服务架构的话题很大，可切入的方式很多，结合自身经验还是有一些差异化的内容可写，遂开始尝试性的撰写此书。一般人偏理解性文章的平均阅读速度是200-250字&#x2F;分钟，本书撰写之初就定下15万字的上限，即希望大部分符合要求的读者（见本书受众）都可以在1天内（12小时左右）看完，能够理解本书所写的内容进而了解到微服务架构的全貌、关键点并有助于工作提升，在未来的一段时间内如有余力可继续完成本书的扩展阅读以进一步加深理解。 由于工作强度、书籍质量及个人能力等原因此书的完成前后经历了近一年时间，在此特别感谢家人的理解及同事的帮助及指点。<br><a href="https://gudaoxuri.gitbook.io/microservices-architecture">https://gudaoxuri.gitbook.io/microservices-architecture</a>  </p></blockquote><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><ul><li>架构相关书籍 15 本</li></ul><p><a href="https://wx.zsxq.com/columns/48888882442228">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具</a></p><h1 id="资料（待归类）"><a href="#资料（待归类）" class="headerlink" title="资料（待归类）"></a>资料（待归类）</h1><ul><li><a href="https://vonng.gitbook.io/vonng">https://vonng.gitbook.io/vonng</a> - 数据和架构相关</li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客参考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的提示词</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%90%E7%A4%BA%E8%AF%8D/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%90%E7%A4%BA%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="代码编程"><a href="#代码编程" class="headerlink" title="代码编程"></a>代码编程</h1><h2 id="学习某段代码"><a href="#学习某段代码" class="headerlink" title="学习某段代码"></a>学习某段代码</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs text">请将下方代码视为我正在学习的开源项目 k8s【项目名】 的一部分，帮我做以下分析(以markdown格式回复)：  <br># 1. 功能速览：描述代码实现的核心功能（例如：”实现 Pod 网络策略的规则匹配与流量过滤”）。  <br>  <br># 2. 技术剖析  <br>  <br>## 2.1. 核心逻辑  <br>- 关键算法：如调度算法、状态机模型等  <br>- 数据结构：如自定义资源对象（CRD）、索引器（Indexer）等  <br>  <br>## 2.2. 接口设计  <br>- 输入输出：函数参数、返回值类型  <br>- 依赖关系：调用的下游组件 / API  <br>- 扩展点：钩子函数、插件机制  <br>  <br>## 2.3. 鲁棒性保障(边界条件/异常处理)  <br>- 错误处理：重试策略、熔断机制  <br>- 边界条件：空值检查、并发控制  <br>  <br># 3. 代码精读（标注关键行）：用 // 形式，解释关键变量、条件判断、设计意图。  <br>  <br># 4. 设计模式（若有）：指出用到的设计模式（如工厂、策略、装饰器），并说明为何在此处适用。  <br>  <br># 5. 工程实践借鉴：  <br>## 5.1. 语言最佳实践（如Python的生成器、Rust的生命周期）  <br>## 5.2. 工程技巧（如零拷贝、懒加载、防御性编程）  <br>## 5.3. 速记口诀：用一句话总结如何快速回忆这段逻辑（如“先校验再缓存，最后异步落盘”）。  <br>  <br># 6. 潜在改进点（如果这段代码需要改进的化需要指出有哪些改进点）：  <br>- 性能优化：缓存策略、异步处理  <br>- 可观测性：日志结构化、指标采集  <br>- 扩展性：插件机制设计<br></code></pre></td></tr></table></figure><h2 id="实现某个功能的代码"><a href="#实现某个功能的代码" class="headerlink" title="实现某个功能的代码"></a>实现某个功能的代码</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text"> 请用【编程语言】为我实现【功能描述】功能，要求：  <br>  <br>1. 仅包含完成该功能所需的最小代码，禁止超出以下边界：  <br>- 输入边界：仅接受【输入示例】格式的数据。  <br>- 输出边界：必须返回【输出示例】格式的结果，禁止额外信息。  <br>- 依赖边界：仅使用【允许的语言标准库/模块】，禁止第三方库。  <br>2. 代码需包含边界检查：对输入参数的类型、长度、范围进行严格校验，非法输入直接抛出**明确异常信息（如`ValueError(&quot;输入必须为1-100的整数&quot;)`）。  <br>3. 在代码顶部用注释标明：  <br>  <br>注释示例：  <br># 语言：  <br># 功能：  <br># 边界：<br></code></pre></td></tr></table></figure><h2 id="面试题目收集"><a href="#面试题目收集" class="headerlink" title="面试题目收集"></a>面试题目收集</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">请从牛客、csdn、掘金、博客园、github 这几个平台，搜集关于 golang GMP 方面的程序员面试题，请将搜集到的面试题进行整理，确保覆盖上述提及的知识点，且既有深入底层原理的题目，也有结合实际应用场景的题目。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提示词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生优质书籍参考</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%BA%91%E5%8E%9F%E7%94%9F%E4%BC%98%E8%B4%A8%E4%B9%A6%E7%B1%8D%E5%8F%82%E8%80%83/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%BA%91%E5%8E%9F%E7%94%9F%E4%BC%98%E8%B4%A8%E4%B9%A6%E7%B1%8D%E5%8F%82%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Golang-参考书籍"><a href="#Golang-参考书籍" class="headerlink" title="Golang 参考书籍"></a>Golang 参考书籍</h1><ul><li><a href="https://book.douban.com/subject/27044219/">Go程序设计语言 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/11577300/">Go语言编程 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/36667173/">深入理解Go并发编程 (豆瓣)</a></li></ul><h1 id="微服务参考书籍"><a href="#微服务参考书籍" class="headerlink" title="微服务参考书籍"></a>微服务参考书籍</h1><ul><li><a href="https://book.douban.com/subject/26772677/">微服务设计 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/26693152/">微服务架构与实践 (豆瓣)</a></li></ul><h1 id="Docker-参考书籍"><a href="#Docker-参考书籍" class="headerlink" title="Docker 参考书籍"></a>Docker 参考书籍</h1><ul><li><a href="https://book.douban.com/subject/26894736/">Docker——容器与容器云（第2版） (豆瓣)</a></li><li><a href="https://m.douban.com/book/subject/30329430/">Docker技术入门与实战 第3版 (豆瓣)</a></li></ul><h1 id="Kubernetes-参考书籍"><a href="#Kubernetes-参考书籍" class="headerlink" title="Kubernetes 参考书籍"></a><strong>Kubernetes 参考书籍</strong></h1><ol><li>Kubernetes 全讲：<a href="https://book.douban.com/subject/35751539/">《Kubernetes快速入门》</a>、<a href="https://book.douban.com/subject/36926473/">《Kubernetes权威指南 从Docker到Kubernetes实践全接触 上 第6版_上》</a>、<a href="https://book.douban.com/subject/36978519/">《Kubernetes权威指南 从Docker到Kubernetes实践全接触 上 第6版_下》</a></li><li>Kubernetes 源码：<a href="https://book.douban.com/subject/36978517/">《深入理解Kubernetes源码》</a></li><li>Kubernetes 网络：<a href="https://book.douban.com/subject/34855927/">《Kubernetes网络权威指南：基础、原理与实践》</a>、<a href="https://book.douban.com/subject/37227940/">深入理解Kubernetes网络系统原理</a></li><li>Kubernetes 编程：<a href="https://book.douban.com/subject/35498478/">《Kubernetes编程》</a>、<a href="https://book.douban.com/subject/35631481/">《云原生应用开发：Operator原理与实践》</a>、<a href="https://book.douban.com/subject/36209350/">《Kubernetes Operator开发进阶》</a></li><li>Kubernetes 实战、架构：<a href="https://book.douban.com/subject/30333237/">《基于 Kubernetes 的容器云平台实战》</a>、<a href="https://book.douban.com/subject/35588781/">《多云和混合云 云原生多集群和应用管理》</a>、<a href="https://book.douban.com/subject/35637708/">《云原生架构：从技术演进到最佳实践 : 从技术演进到最佳实践》</a></li></ol><h1 id="服务网格参考书籍"><a href="#服务网格参考书籍" class="headerlink" title="服务网格参考书籍"></a>服务网格参考书籍</h1><ul><li><a href="https://book.douban.com/subject/34438220/">云原生服务网格Istio：原理、实践、架构与源码解析 (豆瓣)</a></li></ul><h1 id="虚拟化参考书籍"><a href="#虚拟化参考书籍" class="headerlink" title="虚拟化参考书籍"></a>虚拟化参考书籍</h1><ul><li><a href="https://book.douban.com/subject/3619896/">《系统虚拟化 : 原理与实现》</a></li><li><a href="https://book.douban.com/subject/25743939/">《KVM 虚拟化技术: 实战与原理解析》</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发参考手册</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E5%BC%80%E5%8F%91%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E5%BC%80%E5%8F%91%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>随手查阅的开发手册，翻阅率较高的内容需要放在这里</p></blockquote><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p>Go 编码规范： <a href="https://feizaonet.feishu.cn/docx/HgjGdU8eeoKTJjxOvN8cM6ebnff">https://feizaonet.feishu.cn/docx/HgjGdU8eeoKTJjxOvN8cM6ebnff</a></p><h1 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h1><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03 基础 go 包开发 - 日志包</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/03%20%E5%9F%BA%E7%A1%80%20go%20%E5%8C%85%E5%BC%80%E5%8F%91%20-%20%E6%97%A5%E5%BF%97%E5%8C%85/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/03%20%E5%9F%BA%E7%A1%80%20go%20%E5%8C%85%E5%BC%80%E5%8F%91%20-%20%E6%97%A5%E5%BF%97%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1-日志记录"><a href="#1-日志记录" class="headerlink" title="1. 日志记录"></a>1. 日志记录</h1><p>记录日志通常涉及到以下几个方面：</p><ul><li><strong>日志记录方式</strong></li><li><strong>日志记录规范</strong></li><li><strong>日志保存方式</strong></li></ul><h2 id="1-1-日志记录方式"><a href="#1-1-日志记录方式" class="headerlink" title="1.1 日志记录方式"></a>1.1 <strong>日志记录方式</strong></h2><p>在 Go 项目开发中，通过日志包来记录日志。所以，在项目开发之前，需要准备一个易用、满足需求的 Go 日志包。准备日志包的方式有以下三种：</p><ol><li><strong>使用开源日志包</strong>：使用开源的日志包，例如 log、glog、logrus、zap 等。Docker、 ilium、Tyk 等项目使用了 logrus，etcd 则使用了 log 和 zap；</li><li><strong>定制化开源日志包</strong>：基于开源日志包封装一个满足特定需求的日志包。例如，Kubernetes 使用的 klog 是基于 glog 开发的。有些项目封装的日志包还会兼容多种类别的 Logger；</li><li><strong>自研日志包</strong>：根据需求，从零开发一个日志包。</li></ol><p>目前已有许多开源日志包，社区比较受欢迎的开源日志包有 logrus、zap、zerolog、apex&#x2F;log、log15 等。其中最受欢迎的两个日志包是 logrus 和 zap。k8s 使用的时 klog 进行记录。</p><p>一般项目中基于 logrus 或者 zap 两个包进行使用基本足够：</p><ul><li>logrus 功能强大、使用简单，不仅实现了日志包的基本功能，还有很多高级特性，适合一些大型项目，尤其是需要结构化日志记录的项目。因为 logrus 封装了<strong>很多能力</strong>，<strong>性能一般</strong>。</li><li>zap 提供了很强大的日志功能，性能高，内存分配次数少，适合对日志性能要求很高的项目。另外，zap 包中的子包 zapcore，<strong>提供了很多底层的日志接口，适合用来做二次封装</strong>。</li></ul><p>logrus、 zap、 klog 对比：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>特性对比</strong></td><td>logrus （1）</td><td>zap （2）</td><td>klog （3）</td></tr><tr><td><strong>日志级别</strong></td><td>支持 Debug、Info、Warn、Error、Fatal、Panic</td><td>支持 Debug、Info、Warn、Error、DPanic、Panic、Fatal</td><td>支持 Info、Warning、Error、Fatal、Panic</td></tr><tr><td><strong>结构化日志</strong></td><td>支持，通过 Fields 添加结构化字段</td><td>支持，性能优化，可直接将复杂类型作为字段</td><td>支持，但不如 logrus 和 zap 灵活</td></tr><tr><td><strong>日志格式</strong></td><td>默认文本格式，可自定义为 JSON</td><td>提供 Console 和 JSON 编码器，可灵活配置</td><td>默认文本格式，可自定义为 JSON</td></tr><tr><td><strong>日志输出</strong></td><td>支持控制台、文件等</td><td>支持控制台、文件、网络等</td><td>支持控制台、文件</td></tr><tr><td><strong>调用堆栈</strong></td><td>支持，可输出堆栈信息</td><td>支持，可在特定级别输出堆栈</td><td>支持，可在日志中输出堆栈信息</td></tr><tr><td><strong>插件支持</strong></td><td>支持，可通过插件扩展功能</td><td>支持，可通过 Hooks 机制扩展</td><td>不支持</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>性能对比</strong></td><td>logrus （3）</td><td>zap （1）</td><td>klog （2）</td></tr><tr><td><strong>性能表现</strong></td><td>性能一般，适合中小规模项目</td><td>性能极高，适合对性能要求极高的项目</td><td>性能较好，但不如 zap</td></tr><tr><td><strong>内存分配</strong></td><td>内存分配较多，性能瓶颈</td><td>使用 <code>sync.Pool</code>，内存分配少</td><td>内存分配适中</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>易用性</strong></td><td>logrus （1）</td><td>zap （3）</td><td>klog （2）</td></tr><tr><td><strong>学习成本</strong></td><td>较低，适合新手</td><td>较高，功能丰富</td><td>较低，基于 glog 封装</td></tr><tr><td><strong>使用复杂度</strong></td><td>使用简单，适合快速开发</td><td>功能强大但配置复杂</td><td>使用简单，适合 Kubernetes</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>logrus</td><td>zap</td><td>klog</td></tr><tr><td><strong>适用项目</strong></td><td>中小型项目、对结构化日志有需求的项目</td><td>高性能要求、大规模分布式系统</td><td>Kubernetes 生态</td></tr><tr><td><strong>二次封装</strong></td><td>不太适合，功能封装较多</td><td>非常适合，底层接口丰富</td><td>不适合，主要用于 Kubernetes</td></tr></tbody></table><p>综上：</p><ul><li><strong>logrus</strong>：功能强大且灵活，适合中小规模项目，尤其是对结构化日志有需求的场景。</li><li><strong>zap</strong>：性能卓越，适合对性能要求极高的项目，尤其是分布式系统。</li><li><strong>klog</strong>：适合 Kubernetes 生态，使用简单，但功能相对有限。</li></ul><p>如果是 Kubernetes 生态，应该选用 klog，平时开发直接选用 zap 即可。</p><p>定制化开源日志包以及自研日志包大概都接触不上，所以暂时不赘述。</p><h2 id="1-2-日志记录规范"><a href="#1-2-日志记录规范" class="headerlink" title="1.2 日志记录规范"></a><strong>1.2 日志记录规范</strong></h2><p>miniblog 也制定了相应的日志规范，具体规范内容见 <a href="https://github.com/mmungdong/miniblog/blob/master/docs/devel/zh-CN/conversions/logging.md">docs&#x2F;devel&#x2F;zh-CN&#x2F;conversions&#x2F;logging.md</a>。该日志规范可以在后续的开发过程中根据需求不断更新和迭代。</p><p>在 miniblog 的日志规范中，有以下两点规范需要注意：</p><ol><li>错误日志应在最初发生错误的位置打印。这样做一方面可以避免上层代码缺失关键的日志信息（因为上层代码可能无法获取错误发生处的详细信息），另一方面可以减少日志漏打的情况（距离错误发生位置越远，越容易忽略错误的存在，从而导致日志未被打印）；</li><li>当调用第三方报函数或放发报错时，需要在错误处打印日志，例如：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">if</span> err := os.Chdir(<span class="hljs-string">&quot;/root&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br>    log.Errorf(<span class="hljs-string">&quot;change dir failed: %v&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>对于嵌套的 Error，可在 Error 产生的最初位置打印 Error 日志，上层如果不需要添加必要的信息，可以直接返回下层的 Error。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;flag&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;github.com/golang/glog&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    flag.Parse()<br>    <span class="hljs-keyword">defer</span> glog.Flush()<br>    <span class="hljs-keyword">if</span> err := loadConfig(); err != <span class="hljs-literal">nil</span> &#123;<br>        glog.Error(err)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 正例：直接返回错误</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadConfig</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">return</span> decodeConfig() <span class="hljs-comment">// 直接返回</span><br>&#125;<br><br><span class="hljs-comment">// 正例：如果需要基于函数返回的错误，封装更多的信息，可以封装返回的 err。否则，建议直接返回 err</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">decodeConfig</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">if</span> err := readConfig(); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 添加必要的信息，用户名称</span><br><br>        <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;could not decode configuration data for user %s: %v&quot;</span>, <span class="hljs-string">&quot;colin&quot;</span>, err) <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br>    glog.Errorf(<span class="hljs-string">&quot;read: end of input.&quot;</span>)<br>    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;read: end of input&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在最初产生错误的位置打印日志，可以很方便地追踪到错误产生的根源，并且错误日志只打印一次，可以减少重复的日志打印，减少排障时重复日志干扰，也可以提高代码的简洁度。当然，在开发中也可以根据需要对错误补充一些有用的信息，以记录错误产生的其他影响。</p><h2 id="1-3-日志保存方式"><a href="#1-3-日志保存方式" class="headerlink" title="1.3 日志保存方式"></a>1.3 <strong>日志保存方式</strong></h2><p>我们可以将日志保存到任意需要的位置，常见的保存位置包括以下几种：</p><ol><li>**标准输出：**通常用于开发和测试阶段，主要目的是便于调试和查看；</li><li>**日志文件：**这是生产环境中最常见的日志保存方式。保存的日志通常会被 Filebeat、Fluentd 等日志采集组件收集，并存储到 Elasticsearch 等系统中；</li><li>**消息中间件：**例如 Kafka。日志包会调用 API 接口将日志保存到 Kafka 中。为了提高性能，通常会使用异步任务队列异步保存。然而，在这种情况下，需要开发异步上报逻辑，且服务重启时可能导致日志丢失，因此这种方式较少被采用。</li></ol><p>当前比较受欢迎的日志包（如 zap、logrus 等）都支持将日志同时保存到多个位置。例如，miniblog 项目的日志包底层封装了 zap，zap 支持同时将日志输出到标准输出和日志文件中。</p><p>如果应用采用容器化部署，建议优先将日志输出到标准输出。容器平台通常具备采集容器日志的能力，采集日志时可以选择从标准输出采集或从容器内的日志文件中采集。如果选择从日志文件采集，则需要配置日志采集路径；而如果选择从标准输出采集，则无需额外配置，可以直接复用容器平台现有的能力，从而实现日志记录与日志采集的完全解耦。在 Kubernetes 最新的日志设计方案中，也建议应用直接将日志输出到标准输出。</p><h1 id="2-miniblog-日志包"><a href="#2-miniblog-日志包" class="headerlink" title="2. miniblog 日志包"></a>2. miniblog 日志包</h1><h2 id="2-1-miniblog-日志包开发"><a href="#2-1-miniblog-日志包开发" class="headerlink" title="2.1 miniblog 日志包开发"></a>2.1 <strong>miniblog 日志包开发</strong></h2><p>这里不做过多说明，详情参考文章：<a href="https://articles.zsxq.com/id_ozc2krpnuap6.html">10 | 基础 Go 包开发：日志包设计和实现</a></p><h2 id="2-2-miniblog-日志包使用"><a href="#2-2-miniblog-日志包使用" class="headerlink" title="2.2 miniblog 日志包使用"></a>2.2 <strong>miniblog 日志包使用</strong></h2><h3 id="2-2-1-开箱即用前需要知道的知识点"><a href="#2-2-1-开箱即用前需要知道的知识点" class="headerlink" title="2.2.1 开箱即用前需要知道的知识点"></a>2.2.1 开箱即用前需要知道的知识点</h3><p><strong>日志级别和记录方法：</strong></p><ol><li>**日志级别：**在记录日志时，按严重性由低到高通常包括 Debug、Info、Warn、Error、Panic、Fatal 级别。Warn 级别在有些日志包中也叫 Warning 级别；</li><li>**日志记录方法：**每个日志级别，根据记录方式，又包括非格式化记录、格式化记录和结构化记录三种方式。形如 Info(msg string) 的方法为非格式化记录方式。形如 Infof(format string, args …any) 的方法为格式化记录方式。形如 Infow(msg string, kvs …any) 的方法为结构化记录方式。Infow 方法名中的 w 代表“with”，即“带有”额外的上下文信息。这些方法与没有 w 的方法（如 Debug，Info 等）相比，允许你在日志消息后面附加额外的键值对（key-value），从而提供更详细的上下文信息。</li></ol><p>miniblog 在设计时，为了满足项目不同日志级别的记录需求，实现了 Debug、Info、Warn、Error、Panic、Fatal 级别的记录方法。</p><p>在 Go 项目开发中，建议的日志记录方式为<strong>结构化记录方式（带有 w 后缀的，例如</strong> Infow**）**。</p><p><strong>格式化记录方式可以通过结构化记录方式来替代</strong>，例如：log.Infof(“Failed to create user: %s”, username) 可替换为 log.Infow(“Failed to create user”, “username”, username)。</p><p><strong>所以，miniblog 项目为了方便日志记录，降低开发者理解日志记录方法的负担，只实现了结构化记录方法。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Logger 定义了 miniblog 项目的日志接口。</span><br><span class="hljs-comment">// 该接口包含了项目中支持的日志记录方法，提供对不同日志级别的支持。</span><br><span class="hljs-keyword">type</span> Logger <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-comment">// Debugw 用于记录调试级别的日志，通常用于开发阶段，包含详细的调试信息。</span><br>    Debugw(msg <span class="hljs-type">string</span>, kvs ...any)<br><br>    <span class="hljs-comment">// Infow 用于记录信息级别的日志，表示系统的正常运行状态。</span><br>    Infow(msg <span class="hljs-type">string</span>, kvs ...any)<br><br>    <span class="hljs-comment">// Warnw 用于记录警告级别的日志，表示可能存在问题但不影响系统正常运行。</span><br>    Warnw(msg <span class="hljs-type">string</span>, kvs ...any)<br><br>    <span class="hljs-comment">// Errorw 用于记录错误级别的日志，表示系统运行中出现的错误，需要开发人员介入处理。</span><br>    Errorw(msg <span class="hljs-type">string</span>, kvs ...any)<br><br>    <span class="hljs-comment">// Panicw 用于记录严重错误级别的日志，表示系统无法继续运行，记录日志后会触发 panic。</span><br>    Panicw(msg <span class="hljs-type">string</span>, kvs ...any)<br><br>    <span class="hljs-comment">// Fatalw 用于记录致命错误级别的日志，表示系统无法继续运行，记录日志后会直接退出程序。</span><br>    Fatalw(msg <span class="hljs-type">string</span>, kvs ...any)<br><br>    <span class="hljs-comment">// Sync 用于刷新日志缓冲区，确保日志被完整写入目标存储。</span><br>    Sync()<br>&#125;<br></code></pre></td></tr></table></figure><p>将日志包 log 放置在 internal&#x2F;pkg 目录下的原因在于，日志包封装了一些定制化的逻辑，不适合对外暴露，所以不适合放在 pkg&#x2F; 目录下。但是日志包又是项目内的共享包，所以需要放在 internal&#x2F;pkg 目录下。</p><p>通过定义 Logger 接口，可以体现<strong>接口即规范</strong>的编程哲学。这意味着，通过 Logger 接口可以清晰地表明 zapLogger 需要实现哪些方法，并明确日志调用者应调用哪些方法。在 Go 项目中，通常将日志接口命名为 Logger。</p><h2 id="2-3-miniblog-日志包开箱即用"><a href="#2-3-miniblog-日志包开箱即用" class="headerlink" title="2.3 miniblog 日志包开箱即用"></a>2.3 miniblog 日志包开箱即用</h2><h3 id="2-3-1-初始化日志包"><a href="#2-3-1-初始化日志包" class="headerlink" title="2.3.1 初始化日志包"></a>2.3.1 初始化日志包</h3><p>日志配置,实际开发项目中如有特殊配置项再更新改配置：<a href="https://github.com/mmungdong/miniblog/blob/master/internal/pkg/log/options.go">https://github.com/mmungdong/miniblog/blob/master/internal/pkg/log/options.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Copyright 2024 孔令飞 &lt;colin404@foxmail.com&gt;. All rights reserved.</span><br><span class="hljs-comment">// Use of this source code is governed by a MIT style</span><br><span class="hljs-comment">// license that can be found in the LICENSE file. The original repo for</span><br><span class="hljs-comment">// this file is https://github.com/onexstack/miniblog. The professional</span><br><span class="hljs-comment">// version of this repository is https://github.com/onexstack/onex.</span><br><br><span class="hljs-keyword">package</span> log<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;go.uber.org/zap/zapcore&quot;</span><br>)<br><br><span class="hljs-comment">// Options 定义了日志配置的选项结构体.</span><br><span class="hljs-comment">// 通过该结构体，可以自定义日志的输出格式、级别以及其他相关配置.</span><br><span class="hljs-keyword">type</span> Options <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// DisableCaller 指定是否禁用 caller 信息.</span><br><span class="hljs-comment">// 如果设置为 false（默认值），日志中会显示调用日志所在的文件名和行号，例如：&quot;caller&quot;:&quot;main.go:42&quot;.</span><br>DisableCaller <span class="hljs-type">bool</span><br><span class="hljs-comment">// DisableStacktrace 指定是否禁用堆栈信息.</span><br><span class="hljs-comment">// 如果设置为 false（默认值），在日志级别为 panic 或更高时，会打印堆栈跟踪信息.</span><br>DisableStacktrace <span class="hljs-type">bool</span><br><span class="hljs-comment">// Level 指定日志级别.</span><br><span class="hljs-comment">// 可选值包括：debug、info、warn、error、dpanic、panic、fatal.</span><br><span class="hljs-comment">// 默认值为 info.</span><br>Level <span class="hljs-type">string</span><br><span class="hljs-comment">// Format 指定日志的输出格式.</span><br><span class="hljs-comment">// 可选值包括：console（控制台格式）和 json（JSON 格式）.</span><br><span class="hljs-comment">// 默认值为 console.</span><br>Format <span class="hljs-type">string</span><br><span class="hljs-comment">// OutputPaths 指定日志的输出位置.</span><br><span class="hljs-comment">// 默认值为标准输出（stdout），也可以指定文件路径或其他输出目标.</span><br>OutputPaths []<span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// NewOptions 创建并返回一个带有默认值的 Options 对象.</span><br><span class="hljs-comment">// 该方法用于初始化日志配置选项，提供默认的日志级别、格式和输出位置.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewOptions</span><span class="hljs-params">()</span></span> *Options &#123;<br><span class="hljs-keyword">return</span> &amp;Options&#123;<br><span class="hljs-comment">// 默认启用 caller 信息</span><br>DisableCaller: <span class="hljs-literal">false</span>,<br><span class="hljs-comment">// 默认启用堆栈信息</span><br>DisableStacktrace: <span class="hljs-literal">false</span>,<br><span class="hljs-comment">// 默认日志级别为 info</span><br>Level: zapcore.InfoLevel.String(),<br><span class="hljs-comment">// 默认日志输出格式为 console</span><br>Format: <span class="hljs-string">&quot;console&quot;</span>,<br><span class="hljs-comment">// 默认日志输出位置为标准输出</span><br>OutputPaths: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;stdout&quot;</span>&#125;,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># 日志配置</span><br><span class="hljs-attr">log:</span><br>  <span class="hljs-comment"># 是否开启 caller，如果开启会在日志中显示调用日志所在的文件和行号</span><br>  <span class="hljs-attr">disable-caller:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 是否禁止在 panic 及以上级别打印堆栈信息</span><br>  <span class="hljs-attr">disable-stacktrace:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 指定日志级别，可选值：debug, info, warn, error, dpanic, panic, fatal</span><br>  <span class="hljs-comment"># 生产环境建议设置为 info</span><br>  <span class="hljs-attr">level:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-comment"># 指定日志显示格式，可选值：console, json</span><br>  <span class="hljs-comment"># 生产环境建议设置为 json</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">json</span><br>  <span class="hljs-comment"># 指定日志输出位置，多个输出，用 `逗号 + 空格` 分开。stdout：标准输出</span><br>  <span class="hljs-attr">output-paths:</span> [<span class="hljs-string">/tmp/miniblog.log</span>, <span class="hljs-string">stdout</span>]<br></code></pre></td></tr></table></figure><p>初始化日志包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br>    ...<br>    <span class="hljs-string">&quot;github.com/onexstack/miniblog/internal/pkg/log&quot;</span><br>    ...<br>)<br>...<br><span class="hljs-comment">// run 是主运行逻辑，负责初始化日志、解析配置、校验选项并启动服务器。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">run</span><span class="hljs-params">(opts *options.ServerOptions)</span></span> <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-comment">// 如果传入 --version，则打印版本信息并退出</span><br>    version.PrintAndExitIfRequested()<br>    <br>    <span class="hljs-comment">// 初始化日志</span><br>    log.Init(logOptions())<br>    <span class="hljs-keyword">defer</span> log.Sync() <span class="hljs-comment">// 确保日志在退出时被刷新到磁盘</span><br>    ...<br>&#125;<br><br><span class="hljs-comment">// logOptions 从 viper 中读取日志配置，构建 *log.Options 并返回.</span><br><span class="hljs-comment">// 注意：viper.Get&lt;Type&gt;() 中 key 的名字需要使用 . 分割，以跟 YAML 中保持相同的缩进.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logOptions</span><span class="hljs-params">()</span></span> *log.Options &#123;<br>    opts := log.NewOptions()<br>    <span class="hljs-keyword">if</span> viper.IsSet(<span class="hljs-string">&quot;log.disable-caller&quot;</span>) &#123;<br>        opts.DisableCaller = viper.GetBool(<span class="hljs-string">&quot;log.disable-caller&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> viper.IsSet(<span class="hljs-string">&quot;log.disable-stacktrace&quot;</span>) &#123;<br>        opts.DisableStacktrace = viper.GetBool(<span class="hljs-string">&quot;log.disable-stacktrace&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> viper.IsSet(<span class="hljs-string">&quot;log.level&quot;</span>) &#123;<br>        opts.Level = viper.GetString(<span class="hljs-string">&quot;log.level&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> viper.IsSet(<span class="hljs-string">&quot;log.format&quot;</span>) &#123;<br>        opts.Format = viper.GetString(<span class="hljs-string">&quot;log.format&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> viper.IsSet(<span class="hljs-string">&quot;log.output-paths&quot;</span>) &#123;<br>        opts.OutputPaths = viper.GetStringSlice(<span class="hljs-string">&quot;log.output-paths&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> opts<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在 run 函数中，添加了 log.Init(logOptions()) 函数调用，用来在应用运行时，初始化日志实例，并在 miniblog 应用退出时，调用 log.Sync() 将缓存中的日志写入磁盘中。</p></blockquote><h1 id="🤗-总结归纳"><a href="#🤗-总结归纳" class="headerlink" title="🤗 总结归纳"></a>🤗 总结归纳</h1><ul><li>整理日志记录打印以及保存方式</li><li>miniblog 日志包开箱即用说明方式</li></ul><h1 id="📎-参考文章"><a href="#📎-参考文章" class="headerlink" title="📎 参考文章"></a>📎 参考文章</h1><ul><li><a href="https://articles.zsxq.com/id_ozc2krpnuap6.html">10 | 基础 Go 包开发：日志包设计和实现</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>miniblog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode 常用插件</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/vscode%20%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/vscode%20%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="中文包"><a href="#中文包" class="headerlink" title="中文包"></a>中文包</h1><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans</a>  </p></blockquote><h1 id="主题-icon"><a href="#主题-icon" class="headerlink" title="主题 &amp; icon"></a>主题 &amp; icon</h1><ul><li>主题- github theme</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme">https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme">https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme</a>  </p></blockquote><ul><li>主题 - one dark pro</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme</a>  </p></blockquote><ul><li>icon - material icon</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme</a>  </p></blockquote><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul><li>GitLens</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens</a>  </p></blockquote><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><ul><li>Golang 官方包</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=golang.Go">https://marketplace.visualstudio.com/items?itemName=golang.Go</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=golang.Go">https://marketplace.visualstudio.com/items?itemName=golang.Go</a>  </p></blockquote><h1 id="工具插件"><a href="#工具插件" class="headerlink" title="工具插件"></a>工具插件</h1><ul><li>open in the browser</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser">https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser">https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser</a>  </p></blockquote><ul><li>code runner</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner</a>  </p></blockquote><ul><li>code debugger</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=wowbox.code-debuger">https://marketplace.visualstudio.com/items?itemName=wowbox.code-debuger</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=wowbox.code-debuger">https://marketplace.visualstudio.com/items?itemName=wowbox.code-debuger</a>  </p></blockquote><ul><li>go to method</li></ul><blockquote><p>[!info] <a href="https://marketplace.visualstudio.com/items?itemName=trixnz.go-to-method">https://marketplace.visualstudio.com/items?itemName=trixnz.go-to-method</a>  </p><p><a href="https://marketplace.visualstudio.com/items?itemName=trixnz.go-to-method">https://marketplace.visualstudio.com/items?itemName=trixnz.go-to-method</a>  </p></blockquote><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>todo</p>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05 Go web 服务器实现</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/05%20Go%20web%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/05%20Go%20web%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是-web-应用？"><a href="#1-什么是-web-应用？" class="headerlink" title="1. 什么是 web 应用？"></a>1. 什么是 web 应用？</h1><h2 id="1-1-web-应用，web-服务和-web-服务器的概念"><a href="#1-1-web-应用，web-服务和-web-服务器的概念" class="headerlink" title="1.1. web 应用，web 服务和 web 服务器的概念"></a>1.1. web 应用，web 服务和 web 服务器的概念</h2><ul><li>**Web 服务：**Web 服务是一种通过网络提供的功能服务，其通信基于标准的 HTTP、RPC 或其他协议。Web 服务遵循客户端-服务器模型，客户端使用 Web 服务支持的协议向服务端发送请求，服务端处理请求后返回相应的数据包。在通信过程中，为了确保双方能够理解对方的信息，需要使用统一约定的通信协议和数据交换格式。</li><li>**Web 应用：**Web 应用是基于 Web 技术开发的具体应用程序，它是 Web 服务的实现者，运行在 Web 服务器上。Web 应用可以利用 Web 服务实现特定的功能，例如通过远程 API 获取数据。</li><li>**Web 服务器：**Web 服务器指提供 Web 服务的软件或硬件设备，是 Web 应用运行和管理所需的基础架构和环境。Web 服务器负责配置、监控和维护 Web 应用，同时在客户端与 Web 应用之间充当通信桥梁。客户端向 Web 服务器发送请求，服务器将请求转发到具体的 Web 应用进行处理，并将结果返回给客户端。</li></ul><p>总结来看，Web 应用是基于 Web 技术开发的具体应用程序，其中包含了多个 Web 服务。Web 应用可以部署在 Web 服务器上，而 Web 服务器则为 Web 应用提供运行与管理所需的基础设施。</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250628022119291.png"></p><h2 id="1-2-如何实现一个-web-服务器"><a href="#1-2-如何实现一个-web-服务器" class="headerlink" title="1.2. 如何实现一个 web 服务器"></a>1.2. 如何实现一个 web 服务器</h2><p>为了高效开发一个 Web 服务，通常需要进行以下技术选型：</p><ol><li>**通信协议：**根据具体的业务场景和需求选择合适的通信协议；</li><li>**数据交换格式：**根据具体的业务场景和需求选择适用的数据交换格式。在选择数据交换格式时，还需考虑通信协议的支持情况，因为不同的通信协议支持的数据交换格式可能不同；</li><li>**Web 框架：**由于 Web 服务通常包含多个 API 接口，选择合适的 Web 框架可以提高开发效率和代码复用率。我们可以选择从零自行设计开发一个框架，也可以直接使用业界成熟的开源 Web 框架。在选择 Web 框架时，需要考虑通信协议和数据交换格式，因为每个 Web 框架支持的通信协议和数据交换格式可能有所不同。一款优秀的 Web 框架通常能够满足所需的通信协议和数据交换格式。</li></ol><h2 id="1-3-如何选择合适的通信协议和数据交换格式"><a href="#1-3-如何选择合适的通信协议和数据交换格式" class="headerlink" title="1.3. 如何选择合适的通信协议和数据交换格式"></a>1.3. <strong>如何选择合适的通信协议和数据交换格式</strong></h2><p>开发 Web 服务的第一步是根据业务场景和需求选择适用的通信协议与数据交换格式，二者的定义如下：</p><ol><li>**通信协议：**通信协议是规定计算机或设备之间通信规则的协议，定义了数据传输的格式、传输方式、错误检测及纠正机制等。常见的通信协议包括 HTTP、RPC、WebSocket、TCP&#x2F;IP、FTP 等。不同的通信协议支持的数据交换格式也会有所不同；</li><li>**数据交换格式：**数据交换格式（也称数据序列化格式）是为不同系统之间传输和解析数据制定的规范，定义了数据的结构、编码方式及解析方法。常见的数据交换格式包括 JSON、Protobuf、XML 等。</li></ol><p>首先，我们需要根据业务场景和需求，选择合适的通信协议。在 Go 项目开发中，常用的通信协议包括 HTTP、RPC 和 WebSocket，其中使用最频繁的是 HTTP 和 RPC。在实际开发中，通常选择 REST API 接口规范来开发 API 接口，这些 API 接口的底层通信基于 HTTP 协议。而实现 RPC 通信时，则通常使用 gRPC 框架。gRPC 是由谷歌开源的一个 RPC 框架。</p><blockquote><p>提示</p><p>RPC 也可以理解为一种通信协议，但它是基于其他协议（例如 TCP、UDP、HTTP）封装而成的通信协议。</p></blockquote><p>接下来，根据所选的通信协议，选择最佳适配的数据交换格式。HTTP 和 RPC 各自有其推荐使用的数据交换格式，这可以视为事实上的标准。在无特殊需求的情况下，一般不需要改变这种适配关系：HTTP 协议通常采用 JSON 数据格式，而 RPC 通常采用 Protobuf 数据格式。</p><blockquote><p>HTTP 和 RPC 在不同的场景下各有适配。在企业应用开发中，通常会结合两种通信协议，共同构建一个高效的 Go 应用：</p><ol><li>**对外：**REST（基于 HTTP 协议）+JSON 的组合。由于 REST API 接口规范清晰直观，JSON 数据格式易于理解和使用，并且客户端和服务端通过 HTTP 协议通信时无需使用相同的编程语言，因此 REST+JSON 更适合用于对外提供 API 接口；</li><li>**对内：**gRPC（基于 RPC 协议）+Protobuf 的组合。由于 RPC 协议调用便捷、Protobuf 格式的数据传输效率更高，因此 gRPC+Protobuf 更适合用于对内提供高性能的 API 接口。</li></ol></blockquote><p>为了更好地开发 Web 服务，通常不会直接使用裸 HTTP 或 RPC 协议，而是基于这些协议封装一层框架来使用。因此，文中提到的“通信协议”实际上指的是协议在实际应用中的使用形态。</p><p>REST+JSON 和 RPC+Protobuf 这两种组合在企业级应用中应用广泛。二者并非相互取代，而是各自适用于不同的场景，相辅相成。在企业应用中，REST 与 RPC 的组合方式通常如图</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250628022826784.png"></p><p>外部请求通过 REST+JSON 访问 Web 服务，Web 服务通过 RPC+Protobuf 访问应用内的其他服务。应用内服务间调用通过 RPC+Protobuf 来调用。</p><p>此外，很多 Go 应用采用了一种更灵活、更强大的构建方式：在一个 Web 服务器中同时实现 REST 接口和 RPC 接口。外部客户端调用 REST 接口，内部服务调用 RPC 接口，而 REST API 通过代理，将请求转发到内部的 RPC 接口。通过这种方式，只需实现一套 RPC 接口，就可以通过代理对外提供 REST 接口。例如，可以使用 grpc-gateway 将 HTTP 请求转换为 gRPC 请求。</p><h2 id="1-3-如何选择一个优秀的-Web-框架"><a href="#1-3-如何选择一个优秀的-Web-框架" class="headerlink" title="1.3. 如何选择一个优秀的 Web 框架"></a><strong>1.3. 如何选择一个优秀的 Web 框架</strong></h2><p>当前自己的 golang 技术栈选项：</p><ul><li>http: gin, echo</li><li>rpc: grpc-go</li></ul><h2 id="1-4-miniblog-项目中实现的-Web-服务类型"><a href="#1-4-miniblog-项目中实现的-Web-服务类型" class="headerlink" title="1.4. miniblog 项目中实现的 Web 服务类型"></a>1.4. <strong>miniblog 项目中实现的 Web 服务类型</strong></h2><p>miniblog 是一个小而美的项目，虽然项目不大，却同时实现了 HTTP 和 gRPC 两种 Web 服务类型，miniblog 具体的服务类型如图：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250628023146515.png"></p><p>miniblog 项目使用 Gin 框架实现了 HTTP 服务，使用 gRPC 框架实现了 gRPC 服务，使用 grpc-gateway 实现了 HTTP 反向代理服务，用来将 HTTP 服务转换为 gRPC 服务。</p><p>同时，miniblog 项目支持通过配置文件中的 tls.use-tls 配置项开启 TLS 认证。mb-apiserver 服务启动时，可通过配置文件中的 server-mode 配置项来配置启动的 Web 服务类型：</p><ol><li>server-mode&#x3D;gin：启动使用 Gin Web 框架开发的 HTTP 服务；</li><li>server-mode&#x3D;grpc：启动使用 grpc+grpc-gateway 框架开发的 gRPC 服务，同时支持 HTTP 请求。在 mb-apiserver 接收到 HTTP 请求后，HTTP 反向代理服务，会将 HTTP 请求转换为 gRPC 请求，并转发给 gRPC 服务接口。</li></ol><p>为什么 miniblog 项目会同时实现 HTTP 反向代理服务、gRPC 服务和 HTTP 服务：</p><ol><li>H**TTP 反向代理服务+gRPC 服务：**在 Go 项目开发中，外部系统一般通过 HTTP 接口访问服务，而内部系统则基于性能和调用便捷性的考虑，更倾向于使用 RPC 接口通信。一般情况下，服务只需要对外提供一种类型的通信协议。例如，仅提供 gRPC 接口，外部系统如果需要访问可以访问 API 网关，请求在 API 网关层被转换为 gRPC 请求。但这种方式依赖于 API 网关基础设施，在企业应用开发中，有些服务因为种种原因（例如，企业没有 API 网关），并不会接入 API 网关，所以这在这种情况下，服务内置一个 HTTP 反向代理服务器，用于支持 HTTP 请求，并将请求自动转换为 gRPC 请求，以解决此类诉求。miniblog 服务的 HTTP 反向代理服务器+gRPC 服务的组合模式，既能满足外部系统的访问需求，又能满足内部服务之间的访问需求；</li><li>**HTTP 服务：**绝大多数企业应用通过 HTTP 接口对外提供服务，这类 HTTP 服务通常使用 Gin 框架开发。本课程中的 HTTP 服务实现仅用于展示如何使用 Gin 框架开发 HTTP 接口。</li></ol><h1 id="2-gRPC-服务实现"><a href="#2-gRPC-服务实现" class="headerlink" title="2. gRPC 服务实现"></a>2. gRPC 服务实现</h1><h2 id="2-1-rpc-介绍"><a href="#2-1-rpc-介绍" class="headerlink" title="2.1. rpc 介绍"></a>2.1. rpc 介绍</h2><blockquote><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议。该协议允许运行在一台计算机上的程序调用另一台计算机上的子程序，而开发者无需为这种交互编写额外的代码。</p></blockquote><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250628023814532.png"></p><p>RPC 调用的具体流程如下：</p><ol><li>客户端通过本地调用的方式调用客户端存根（Client Stub）；</li><li>客户端存根将参数打包（也称为 Marshalling）成一个消息，并发送该消息；</li><li>客户端所在的操作系统（OS）将消息发送到服务端；</li><li>服务端接收到消息后，将消息传递给服务端存根（Server Stub）；</li><li>服务端存根将消息解包（也称为 Unmarshalling），得到参数；</li><li>服务端存根调用服务端的子程序（函数），完成处理后，将结果按照相反的步骤返回给客户端。</li></ol><p>需要注意的是，Stub 负责处理参数和返回值的序列化（Serialization）、参数的打包与解包，以及网络层的通信。在 RPC 中，客户端的 Stub 通常被称为“Stub”，而服务端的 Stub 通常被称为“Skeleton”。</p><h2 id="2-2-gRPC-介绍"><a href="#2-2-gRPC-介绍" class="headerlink" title="2.2. gRPC 介绍"></a>2.2. gRPC 介绍</h2><p>gRPC 是由谷歌开发的一种高性能、开源且支持多种编程语言的通用 RPC 框架，基于 HTTP&#x2F;2 协议开发，并默认采用 Protocol Buffers 作为数据序列化协议。gRPC 具有以下特性：</p><ol><li>**语言中立：**支持多种编程语言，例如 Go、Java、C、C++、C#、Node.js、PHP、Python、Ruby 等；</li><li>**基于 IDL 定义服务：**通过 IDL（Interface Definition Language）文件定义服务，并使用 proto3 工具生成指定语言的数据结构、服务端接口以及客户端存根。这种方法能够解耦服务端和客户端，实现客户端与服务端的并行开发；</li><li>**基于 HTTP&#x2F;2 协议：**通信协议基于标准的 HTTP&#x2F;2 设计，支持双向流、消息头压缩、单 TCP 的多路复用以及服务端推送等能力；</li><li>**支持 Protocol Buffer 序列化：**Protocol Buffer（简称 Protobuf）是一种与语言无关的高性能序列化框架，可以减少网络传输流量，提高通信效率。此外，Protobuf 语法简单且表达能力强，非常适合用于接口定义。</li></ol><p>与许多其他 RPC 框架类似，gRPC 也通过 IDL 语言来定义接口（包括接口名称、传入参数和返回参数等）。在服务端，gRPC 服务实现了预定义的接口。在客户端，gRPC 存根提供了与服务端相同的方法。</p><h2 id="2-3-Protocol-Buffers-介绍"><a href="#2-3-Protocol-Buffers-介绍" class="headerlink" title="2.3. Protocol Buffers 介绍"></a>2.3. <strong>Protocol Buffers 介绍</strong></h2><p>Protocol Buffers（简称 Protobuf）是由谷歌开发的一种用于对数据结构进行序列化的方法，可用于数据通信协议、数据存储格式等，也是一种灵活且高效的数据格式，与 XML 和 JSON 类似。由于 Protobuf 具有出色的传输性能，因此常被用于对数据传输性能要求较高的系统中。Protobuf 的主要特性如下：</p><ol><li>**更快的数据传输速度：**Protobuf 在传输过程中会将数据序列化为二进制格式，相较于 XML 和 JSON 的文本传输格式，这种序列化方式能够显著减少 I&#x2F;O 操作，从而提升数据传输的速度；</li><li>**跨平台多语言支持：**Protobuf 自带的编译工具 protoc 可以基于 Protobuf 定义文件生成多种语言的客户端或服务端代码，供程序直接调用，因此适用于多语言需求的场景；</li><li>**良好的扩展性和兼容性：**Protobuf 能够在不破坏或影响现有程序的基础上，更新已有的数据结构，提高系统的灵活性；</li><li>**基于 IDL 文件定义服务：**通过 proto3 工具可以生成特定语言的数据结构、服务端和客户端接口。</li></ol><p>在 gRPC 框架中，Protocol Buffers 主要有以下四个作用：</p><p>**第一，可以用来定义数据结构。**举个例子，下面的代码定义了一个 LoginRequest 数据结构：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Protobuf"><span class="hljs-comment">// LoginRequest 表示登录请求</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">LoginRequest</span> &#123;<br>    <span class="hljs-comment">// username 表示用户名称</span><br>    <span class="hljs-type">string</span> username = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// password 表示用户密码</span><br>    <span class="hljs-type">string</span> password = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**第二，可以用来定义服务接口。**下面的代码定义了一个 MiniBlog 服务：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Protobuf"><span class="hljs-keyword">service </span><span class="hljs-title class_">MiniBlog</span> &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">rpc</span> Login(LoginRequest) <span class="hljs-keyword">returns</span> (LoginResponse) </span>&#123;&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>第三，可以通过 protobuf 序列化和反序列化，提升传输效率:</strong></p><p>使用 XML 或 JSON 编译数据时，虽然数据文本格式可读性更高，但在进行数据交换时，设备需要耗费大量的 CPU 资源进行 I&#x2F;O 操作，从而影响整体传输速率。而 Protocol Buffers 不同于前者，它会将字符串序列化为二进制数据后再进行传输。这种二进制格式的字节数比 JSON 或 XML 少得多，因此传输速率更高。</p><p><strong>第四，Protobuf 是标准化的:</strong></p><p>我们可以基于标准的 Protobuf 文件生成多种编程语言的客户端、服务端代码。在 Go 项目开发中，可以基于这种标准化的语言开发多种 protoc 编译插件，从而大大提高开发效率。</p><h2 id="2-4-miniblog-实现-gRPC-服务器"><a href="#2-4-miniblog-实现-gRPC-服务器" class="headerlink" title="2.4. miniblog 实现 gRPC 服务器"></a>2.4. <strong>miniblog 实现 gRPC 服务器</strong></h2><blockquote><p>具体代码参见：<a href="https://github.com/mmungdong/miniblog/tree/master/pkg/api/apiserver/v1">miniblog&#x2F;pkg&#x2F;api&#x2F;apiserver&#x2F;v1 at master · mmungdong&#x2F;miniblog</a></p></blockquote><p>为了展示如何实现一个 gRPC 服务器，并展示如何通信，miniblog 模拟了一个场景：miniblog 配套一个运营系统，运营系统需要通过接口获取所有的用户，进行注册用户统计。为了提高内部接口通信的性能，运营系统通过 gRPC 接口访问 miniblog 的 API 接口。为此，miniblog 需要实现一个 gRPC 服务器。那么如何实现一个 gRPC 服务器呢？其实很简单，可以通过以下几步来实现：</p><ol><li>定义 gRPC 服务；</li><li>生成客户端和服务器代码；</li><li>实现 gRPC 服务端；</li><li>实现 gRPC 客户端；</li><li>测试 gRPC 服务。</li></ol><p>grpc-go 官方仓库中提供了许多代码实现供参考，例如 <a href="https://github.com/grpc/grpc-go/tree/master/examples">examples</a> 目录。gRPC 官方文档也包含了大量 gRPC 框架的使用教程。建议在学习后续内容之前，先根据官方的 <a href="https://grpc.io/docs/languages/go/quickstart/">Quick start 文档</a>完成一次 gRPC 服务的创建和使用流程，这将有助于你更好地理解后续内容。</p><h3 id="2-4-1-定义-gRPC-服务"><a href="#2-4-1-定义-gRPC-服务" class="headerlink" title="2.4.1. 定义 gRPC 服务"></a>2.4.1. <strong>定义 gRPC 服务</strong></h3><p>我们需要编写.proto 格式的 Protobuf 文件来描述一个 gRPC 服务。服务内容包括以下部分：</p><ol><li>**服务定义：**描述服务包含的 API 接口；</li><li>**请求和返回参数的定义：**服务定义了一系列 API 接口，每个 API 接口都需要指定请求参数和返回参数。</li></ol><p>新建 <a href="https://github.com/onexstack/miniblog/blob/feature/s09/pkg/api/apiserver/v1/apiserver.proto">pkg&#x2F;api&#x2F;apiserver&#x2F;v1&#x2F;apiserver.proto</a> 文件，其内容如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>; <span class="hljs-comment">// 告诉编译器此文件使用什么版本的语法</span><br><br><span class="hljs-keyword">package</span> v1;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;google/protobuf/empty.proto&quot;</span>;       <span class="hljs-comment">// 导入空消息</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;apiserver/v1/healthz.proto&quot;</span>;        <span class="hljs-comment">// 健康检查消息定义</span><br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;github.com/onexstack/miniblog/pkg/api/apiserver/v1;v1&quot;</span>;<br><br><span class="hljs-comment">// MiniBlog 定义了一个 MiniBlog RPC 服务</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">MiniBlog</span> &#123;<br>    <span class="hljs-comment">// Healthz 健康检查</span><br>    <span class="hljs-function"><span class="hljs-keyword">rpc</span> Healthz(google.protobuf.Empty) <span class="hljs-keyword">returns</span> (HealthzResponse) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>syntax 关键字可以指定当前使用的版本号，这里采用的是 proto3 版本</p><p>package 关键字用于指定生成的 .pb.go 文件所属的包名。</p><p>import 关键字用来导入其他 Protobuf 文件。</p><p>option 关键字用于对 .proto 文件进行配置，其中 go_package 是必需的配置项，其值必须设置为包的导入路径。</p><p>service 关键字用来定义一个 MiniBlog 服务，服务中包含了所有的 RPC 接口。</p><p>在 MiniBlog 服务中，使用 rpc 关键字定义服务的 API 接口。接口中包含了请求参数 google.protobuf.Empty 和返回参数 HealthzResponse。在上述 Protobuf 文件中，google.protobuf.Empty 是谷歌提供的一个特殊的 Protobuf 消息类型，其作用是表示一个“空消息”。它来自于谷歌的 Protocol Buffers 标准库，定义在 <a href="https://github.com/golang/protobuf/tree/master/ptypes/empty">google&#x2F;protobuf&#x2F;empty.proto</a> 文件中。</p><p>gRPC 支持定义四种类型的服务方法。上述示例中定义的是简单模式的服务方法，也是 miniblog 使用的 gRPC 模式。以下是四种服务方法的具体介绍：</p><ol><li>**简单模式（Simple RPC）：**这是最基本的 gRPC 调用形式。客户端发起一个请求，服务端返回一个响应。定义格式为 rpc SayHello (HelloRequest) returns (HelloReply) {}；</li><li>**服务端流模式（Server-side streaming RPC）：**客户端发送一个请求，服务端返回数据流，客户端从流中依次读取数据直到流结束。定义格式为 rpc SayHello (HelloRequest) returns (stream HelloReply) {}；</li><li>**客户端流模式（Client-side streaming RPC）：**客户端以数据流的形式连续发送多条消息至服务端，服务端在处理完所有数据之后返回一次响应。定义格式为 rpc SayHello (stream HelloRequest) returns (HelloReply) {}；</li><li>**双向数据流模式（Bidirectional streaming RPC）：**客户端和服务端可以同时以数据流的方式向对方发送消息，实现实时交互。定义格式为 rpc SayHello (stream HelloRequest) returns (stream HelloReply) {}。</li></ol><p>在 apiserver.proto 文件中，定义了 <a href="https://github.com/onexstack/miniblog/blob/feature/s09/pkg/api/apiserver/v1/apiserver.proto#L20">Healthz</a> 接口，还需要为这些接口定义请求参数和返回参数。考虑到代码未来的可维护性，这里建议将不同资源类型的请求参数定义保存在不同的文件中。在 Go 项目开发中，将不同资源类型相关的结构体定义和方法实现分别保存在不同的文件中，是一个好的开发习惯，代码按资源分别保存在不同的文件中，可以提高代码的维护效率。</p><p>同样，为了提高代码的可维护性，建议接口的请求参数和返回参数都定义成固定的格式：</p><ol><li><strong>请求参数格式：</strong>&lt;接口名&gt;Request，例如 LoginRequest；</li><li><strong>返回参数格式：</strong>&lt;接口名&gt;Response，例如 LoginResponse。</li></ol><p>根据上面的可维护性要求，新建 <a href="https://github.com/onexstack/miniblog/blob/feature/s09/pkg/api/apiserver/v1/healthz.proto">pkg&#x2F;api&#x2F;apiserver&#x2F;v1&#x2F;healthz.proto</a> 文件，在文件中定义健康检查相关的请求参数，内容如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Protobuf"><span class="hljs-comment">// Healthz API 定义，包含健康检查响应的相关消息和状态</span><br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>; <span class="hljs-comment">// 告诉编译器此文件使用什么版本的语法</span><br><br><span class="hljs-keyword">package</span> v1;<br><br><span class="hljs-keyword">option</span> go_package = <span class="hljs-string">&quot;github.com/onexstack/miniblog/pkg/api/apiserver/v1&quot;</span>;<br><br><span class="hljs-comment">// ServiceStatus 表示服务的健康状态</span><br><span class="hljs-keyword">enum </span><span class="hljs-title class_">ServiceStatus</span> &#123;<br>    <span class="hljs-comment">// Healthy 表示服务健康</span><br>    Healthy = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Unhealthy 表示服务不健康</span><br>    Unhealthy = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// HealthzResponse 表示健康检查的响应结构体</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HealthzResponse</span> &#123;<br>    <span class="hljs-comment">// status 表示服务的健康状态</span><br>    ServiceStatus status = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// timestamp 表示请求的时间戳</span><br>    <span class="hljs-type">string</span> timestamp = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// message 表示可选的状态消息，描述服务健康的更多信息</span><br>    <span class="hljs-type">string</span> message = <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 healthz.proto 文件中，使用 message 关键字定义消息类型（即接口参数）。消息类型由多个字段组成，每个字段包括字段类型和字段名称。位于等号（&#x3D;）右侧的值并非字段默认值，而是数字标签，可理解为字段的唯一标识符（类似于数据库中的主键），不可重复。标识符用于在编译后的二进制消息格式中对字段进行识别。**一旦 Protobuf 消息投入使用，字段的标识符就不应再修改。**数字标签的取值范围为 [1, 536870911]，其中 19000 至 19999 为保留数字，不能使用。</p><p>在实际项目开发中，最常用的是 optional 和 repeated 关键字。Protobuf 更多的语法示例请参考 <a href="https://github.com/onexstack/miniblog/blob/feature/s09/pkg/api/apiserver/v1/example.proto">pkg&#x2F;api&#x2F;apiserver&#x2F;v1&#x2F;example.proto</a> 文件，更多 Protobuf 语法请参考 Protobuf 的官方文档。  </p><h3 id="2-4-2-生成客户端和服务器代码"><a href="#2-4-2-生成客户端和服务器代码" class="headerlink" title="2.4.2. 生成客户端和服务器代码"></a>2.4.2. <strong>生成客户端和服务器代码</strong></h3><p>编写好 Protobuf 文件后，需要使用 protoc 工具对 Protobuf 文件进行编译，以生成所需的客户端和服务端代码。由于在项目迭代过程中，Protobuf 文件可能会经常被修改并需要重新编译，为了提高开发效率和简化项目维护的复杂度，我们可以将编译操作定义为 <a href="https://github.com/onexstack/miniblog/blob/feature/s09/Makefile#L66">Makefile</a> 中的一个目标。在 Makefile 文件中，添加以下代码：  </p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Makefile">...<br><span class="hljs-comment"># Protobuf 文件存放路径</span><br>APIROOT=<span class="hljs-variable">$(PROJ_ROOT_DIR)</span>/pkg/api<br>...<br><span class="hljs-section">protoc: # 编译 protobuf 文件.</span><br>    @echo <span class="hljs-string">&quot;===========&gt; Generate protobuf files&quot;</span><br>    @protoc                                              \<br>        --proto_path=<span class="hljs-variable">$(APIROOT)</span>                          \<br>        --proto_path=<span class="hljs-variable">$(PROJ_ROOT_DIR)</span>/third_party/protobuf    \<br>        --go_out=paths=source_relative:<span class="hljs-variable">$(APIROOT)</span>        \<br>        --go-grpc_out=paths=source_relative:<span class="hljs-variable">$(APIROOT)</span>   \<br>        <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> find <span class="hljs-variable">$(APIROOT)</span> -name *.proto)</span><br></code></pre></td></tr></table></figure><p>上述 protoc 规则的命令中，protoc 是 Protocol Buffers 文件的编译器工具，用于编译 .proto 文件生成代码。需要先安装 protoc 命令后才能使用。protoc 通过插件机制实现对不同语言的支持。例如，使用 –xxx_out 参数时，protoc 会首先查询是否存在内置的 xxx 插件。如果没有内置的 xxx 插件，则会继续查询系统中是否存在名为 protoc-gen-xxx 的可执行程序。例如 –go_out 参数使用的插件名为 protoc-gen-go。</p><p>以下是 protoc 命令参数的说明：</p><ol><li>-proto_path 或 -I：用于指定编译源码的搜索路径，类似于 C&#x2F;C++中的头文件搜索路径，在构建 .proto 文件时，protoc 会在这些路径下查找所需的 Protobuf 文件及其依赖；</li><li>-go_out：用于生成与 gRPC 服务相关的 Go 代码，并配置生成文件的路径和文件结构。例如 –go_out&#x3D;plugins&#x3D;grpc,paths&#x3D;import:.。主要参数包括 plugins 和 paths。分别表示生成 Go 代码所使用的插件，以及生成的 Go 代码的位置。这里我们使用到了 paths 参数，它支持以下两个选项：</li><li>import（默认值）：按照生成的 Go 代码包的全路径创建目录结构；</li><li>source_relative：表示生成的文件应保持与输入文件相对路径一致。假设 Protobuf 文件位于 pkg&#x2F;api&#x2F;apiserver&#x2F;v1&#x2F;example.proto，启用该选项后，生成的代码也会位于 pkg&#x2F;api&#x2F;apiserver&#x2F;v1&#x2F;目录。如果没有设置 paths&#x3D;source_relative，默认情况下，生成的 Go 文件的路径可能与包含路径有直接关系，并不总是与输入文件相对路径保持一致。</li><li>-go-grpc_out：功能与 –go_out 类似，但该参数用于指定生成的 *_grpc.pb.go 文件的存放路径。</li></ol><p>在 pkg&#x2F;api&#x2F;apiserver&#x2F;v1&#x2F;apiserver.proto 文件中，通过以下语句导入了 empty.proto 文件：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Protobuf"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;google/protobuf/empty.proto&quot;</span>;<br></code></pre></td></tr></table></figure><p>因此，需要将 empty.proto 文件保存在匹配的路径下，并通过以下参数将其添加到 Protobuf 文件的搜索路径中：–proto_path&#x3D;$(PROJ_ROOT_DIR)&#x2F;third_party&#x2F;protobuf。</p><p>由于 empty.proto 是第三方项目的文件，根据目录结构规范，应将其存放在项目根目录下的 third_party 目录中。</p><p>执行以下命令编译 Protobuf 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">make protoc<br></code></pre></td></tr></table></figure><p>述命令会在 <a href="https://github.com/onexstack/miniblog/tree/feature/s09/pkg/api/apiserver/v1">pkg&#x2F;api&#x2F;apiserver&#x2F;v1&#x2F;</a> 目录下生成以下两类文件：</p><ol><li>.pb.go：包含与 Protobuf 文件中定义的消息类型（使用 message 关键字）对应的 Go 语言结构体、枚举类型、以及与这些结构体相关的序列化、反序列化代码。主要功能是将 Protobuf 数据格式与 Go 语言中的结构体进行映射，并支持 Protobuf 协议的数据序列化与反序列化操作；</li><li>_grpc.pb.go：包含与 Protobuf 文件中定义的服务（使用 service 关键字）对应的 gRPC 服务代码。该文件会定义客户端和服务端用到的接口（interface），并包含注册服务的方法（如 RegisterService）。</li></ol><blockquote><p>💡 提示：<br>由于编译 Protobuf 文件不是每次构建都需要执行的操作，因此未将 protoc 目标添加为 Makefile 中 all 目标的依赖项。</p></blockquote><h3 id="2-4-3-实现-gRPC-服务端"><a href="#2-4-3-实现-gRPC-服务端" class="headerlink" title="2.4.3. 实现 gRPC 服务端"></a>2.4.3. <strong>实现 gRPC 服务端</strong></h3><p>启动 gRPC 服务，需要指定一些核心配置，例如 gRPC 服务监听的端口。所以，需要先给应用添加 gRPC 服务配置。根据 miniblog 应用构建模型，需要先添加初始化配置，再添加运行时配置，之后根据运行时配置创建一个 gRPC 服务实例。代码实现如代码清单 7-1 所示（位于 <a href="https://github.com/onexstack/miniblog/blob/feature/s09/cmd/mb-apiserver/app/options/options.go#L25">cmd&#x2F;mb-apiserver&#x2F;app&#x2F;options&#x2F;options.go</a> 文件中）。</p><p>TODO</p><h1 id="🤗-总结归纳"><a href="#🤗-总结归纳" class="headerlink" title="🤗 总结归纳"></a>🤗 总结归纳</h1><p>总结文章的内容</p><h1 id="📎-参考文章"><a href="#📎-参考文章" class="headerlink" title="📎 参考文章"></a>📎 参考文章</h1><ul><li><a href="https://articles.zsxq.com/id_o96j60qppjpt.html">12 | Web 服务器实现：什么是 Web 应用？</a></li><li>引用文章</li></ul><blockquote><p>有关Notion安装或者使用上的问题，欢迎您在底部评论区留言，一起交流~</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>miniblog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04 基础 go 包开发 - 错误包</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/04%20%E5%9F%BA%E7%A1%80%20go%20%E5%8C%85%E5%BC%80%E5%8F%91%20-%20%E9%94%99%E8%AF%AF%E5%8C%85/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/04%20%E5%9F%BA%E7%A1%80%20go%20%E5%8C%85%E5%BC%80%E5%8F%91%20-%20%E9%94%99%E8%AF%AF%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1-错误返回方法"><a href="#1-错误返回方法" class="headerlink" title="1. 错误返回方法"></a>1. 错误返回方法</h1><p>在 Go 项目开发中，错误的返回方式通常有以下两种：</p><ol><li>始终返回 HTTP 200 状态码，并在 HTTP 返回体中返回错误信息。</li><li>返回 HTTP 400 状态码（Bad Request），并在 HTTP 返回体中返回错误信息。</li></ol><p><strong>方式一：成功返回，返回体中返回错误信息</strong></p><p>例如 Facebook API 的错误返回设计，始终返回 200 HTTP 状态码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Syntax error \&quot;Field picture specified more than once. This is only possible before version 2.1\&quot; at character 23: id,name,picture,picture&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;OAuthException&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2500</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fbtrace_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxxxxxxxxxx&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在上述错误返回的实现方式中，HTTP 状态码始终固定返回 200，仅需关注业务错误码，整体实现较为简单。然而，此方式存在一个明显的缺点：对于每一次 HTTP 请求，既需要检查 HTTP 状态码以判断请求是否成功，还需要解析响应体以获取业务错误码，从而判断业务逻辑是否成功。理想情况下，我们期望客户端对成功的 HTTP 请求能够直接将响应体解析为需要的 Go 结构体，并进行后续的业务逻辑处理，而不用再判断请求是否成功。</p><p><strong>方式二：失败返回，返回体中返回错误信息</strong></p><p>Twitter API 的错误返回设计会根据错误类型返回对应的 HTTP 状态码，并在返回体中返回错误信息和自定义业务错误码。成功的业务请求则返回 200 HTTP 状态码。例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JSON">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">400</span> Bad Request<br>x-connection-hash<span class="hljs-punctuation">:</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>set-cookie<span class="hljs-punctuation">:</span> guest_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>Date<span class="hljs-punctuation">:</span> Thu<span class="hljs-punctuation">,</span> <span class="hljs-number">01</span> Jun <span class="hljs-number">2017</span> <span class="hljs-number">03</span><span class="hljs-punctuation">:</span><span class="hljs-number">04</span><span class="hljs-punctuation">:</span><span class="hljs-number">23</span> GMT<br>Content-Length<span class="hljs-punctuation">:</span> <span class="hljs-number">62</span><br>x-response-time<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>strict-transport-security<span class="hljs-punctuation">:</span> max-age=<span class="hljs-number">631138519</span><br>Connection<span class="hljs-punctuation">:</span> keep-alive<br>Content-Type<span class="hljs-punctuation">:</span> application/json; charset=utf<span class="hljs-number">-8</span><br>Server<span class="hljs-punctuation">:</span> tsa_b<br><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;errors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">215</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bad Authentication data.&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>方式二相比方式一，对于成功的请求不需要再次判错。然而，方式二还可以进一步优化：整数格式的业务错误码 215 可读性较差，用户无法从 215 直接获取任何有意义的信息。建议将其替换为语义化的字符串，例如：NotFound.PostNotFound。</p><p>Twitter API 返回的错误是一个数组，在实际开发获取错误时，需要先判断数组是否为空，如不为空，再从数组中获取错误，开发复杂度较高。建议采用更简单的错误返回格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;InvalidParameter.BadAuthenticationData&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bad Authentication data.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>需要特别注意的是，message 字段会直接展示给外部用户，因此必须确保其内容不包含敏感信息，例如数据库的 id 字段、内部组件的 IP 地址、用户名等信息。返回的错误信息中，还可以根据需要返回更多字段，例如：错误指引文档 URL 等。</p><h1 id="2-miniblog-错误返回设计与实现"><a href="#2-miniblog-错误返回设计与实现" class="headerlink" title="2. miniblog 错误返回设计与实现"></a>2. miniblog 错误返回设计与实现</h1><h2 id="2-1-错误返回方式"><a href="#2-1-错误返回方式" class="headerlink" title="2.1 错误返回方式"></a>2.1 错误返回方式</h2><p>miniblog 项目错误返回格式采用了方式二，在接口失败时返回对应的 HTTP&#x2F;gRPC 状态码，并在返回体中返回具体的错误信息，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">404</span> Not Found<br>...<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NotFound.UserNotFound&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;User not found.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在错误返回方式二中，需要返回一个业务错误码。返回业务错误码可以带来以下好处：</p><ol><li>**快速定位问题：**开发人员可以借助错误码迅速定位问题，并精确到具体的代码行。例如，错误码可以直接指示问题的含义，同时通过工具（如 grep）轻松定位到错误码在代码中的具体位置；</li><li>**便于排查问题：**用户能够通过错误码判断接口失败的原因，并将错误码提供给开发人员，以便快速定位问题并进行排查；</li><li>**承载丰富信息：**错误码通常包含了详细的信息，例如错误的级别、所属错误类别以及具体的错误描述。这些错误信息可以帮助用户和开发者快速定位问题；</li><li>**灵活定义：**错误码由开发者根据需要灵活定义，不依赖和受限于第三方框架，例如 net&#x2F;http 和 google.golang.org&#x2F;grpc；</li><li>**便于逻辑判断：**在业务开发中，判断错误类别以执行对应的逻辑处理是一个常见需求。通过自定义错误码，可以轻松实现。例如：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON">import <span class="hljs-string">&quot;errors&quot;</span><br>import <span class="hljs-string">&quot;path/to/errno&quot;</span><br><br>if errors.Is(err<span class="hljs-punctuation">,</span> errno.InternalServerError) <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 对应错误处理逻辑</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-错误码规范"><a href="#2-2-错误码规范" class="headerlink" title="2.2 错误码规范"></a>2.2 错误码规范</h2><p>错误码是直接暴露给用户的，因此需要设计一个易读、易懂且规范化的错误码。在设计错误码时可以根据实际需求自行设计，也可以参考其他优秀的设计方案。</p><p>腾讯云 API 3.0 的错误码设计规范：<a href="https://github.com/mmungdong/miniblog/blob/master/docs/devel/zh-CN/conversions/error_code.md">https://github.com/mmungdong/miniblog/blob/master/docs/devel/zh-CN/conversions/error_code.md</a></p><p>腾讯云采用了两级错误码设计。以下是两级错误码设计相较于简单错误码（如 215、InvalidParameter）的优势：</p><ol><li>**语义化：**语义化的错误码可以通过名字直接反映错误的类型，便于快速理解错误；</li><li>**更加灵活：**二级错误码的格式为&lt;平台级.资源级&gt;。其中，平台级错误码是固定值，用于指代某一类错误，客户端可以利用该错误码进行通用错误处理。资源级错误码则用于更精确的错误定位。此外，服务端既可根据需求自定义错误码，也可使用默认错误码。</li></ol><p>miniblog 项目预定义了一些平台级错误码：<a href="https://github.com/mmungdong/miniblog/blob/master/internal/pkg/errno/code.go">https://github.com/mmungdong/miniblog/blob/master/internal/pkg/errno/code.go</a></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>错误码</strong></td><td><strong>错误描述</strong></td><td><strong>错误类型</strong></td></tr><tr><td>OK</td><td>请求成功</td><td>-</td></tr><tr><td>InternalError</td><td>内部错误</td><td>1</td></tr><tr><td>NotFound</td><td>资源不存在</td><td>0</td></tr><tr><td>BindError</td><td>绑定失败，解析请求体失败</td><td>0</td></tr><tr><td>InvalidArgument</td><td>参数错误（包括参数类型、格式、值等错误）</td><td>0</td></tr><tr><td>Unauthenticated</td><td>认证失败</td><td>0</td></tr><tr><td>PermissionDenied</td><td>授权失败</td><td>0</td></tr><tr><td>OperationFailed</td><td>操作失败</td><td>2</td></tr></tbody></table><p>表中，错误类型 0 代表客户端错误，1 代表服务端错误，2 代表客户端错误&#x2F;服务端错误，- 代表请求成功。</p><h2 id="2-3-错误包设计"><a href="#2-3-错误包设计" class="headerlink" title="2.3 错误包设计"></a>2.3 错误包设计</h2><p>开发一个错误包，需要先为错误包起一个易读、易理解的包名。在 Go 项目开发中，如果自定义包的名称如 errors、context 等，会与 Go 标准库中已存在的 errors 或 context 包发生命名冲突，如果代码中需要同时使用自定义包与标准库包时，通常会通过为标准库包起别名的方式解决。例如，可以通过 import stderrors “errors” 来为标准库的 errors 包定义别名。</p><p>为了避免频繁使用这种起别名的操作，在开发自定义包时，可以从包命名上避免与标准库包名冲突。建议将可能冲突的包命名为 &lt;冲突包原始名&gt;x**，**其名称中的“x”代表扩展（extended）或实验（experimental）。这种命名方式是一种扩展命名约定，通常用于表示此包是对标准库中已有包功能的扩展或补充。需要注意的是，这并非 Go 语言的官方规范，而是开发者为了防止命名冲突、增强语义所采用的命名方式。miniblog 项目的自定义 contextx 包也采用了这种命名风格。</p><p>因此，为了避免与标准库的 errors 包命名冲突，miniblog 项目的错误包命名为 errorsx，寓意为“扩展的错误处理包”。</p><p><strong>miniblog 的错误包为 errno，引用</strong> “<a href="http://github.com/onexstack/onexstack/pkg/errorsx">github.com&#x2F;onexstack&#x2F;onexstack&#x2F;pkg&#x2F;errorsx</a>“</p><p>由于 miniblog 项目的错误包命名为 errorsx，为保持命名一致性，定义了一个名为 ErrorX 的结构体，用于描述错误信息，具体定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// ErrorX 定义了 OneX 项目体系中使用的错误类型，用于描述错误的详细信息.</span><br><span class="hljs-keyword">type</span> ErrorX <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// Code 表示错误的 HTTP 状态码，用于与客户端进行交互时标识错误的类型.</span><br>    Code <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;code,omitempty&quot;`</span><br><br>    <span class="hljs-comment">// Reason 表示错误发生的原因，通常为业务错误码，用于精准定位问题.</span><br>    Reason <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;reason,omitempty&quot;`</span><br><br>    <span class="hljs-comment">// Message 表示简短的错误信息，通常可直接暴露给用户查看.</span><br>    Message <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;message,omitempty&quot;`</span><br><br>    <span class="hljs-comment">// Metadata 用于存储与该错误相关的额外元信息，可以包含上下文或调试信息.</span><br>    Metadata <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;metadata,omitempty&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ErrorX 是一个错误类型，因此需要实现 Error 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Error 实现 error 接口中的 `Error` 方法.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(err *ErrorX)</span></span> Error() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;error: code = %d reason = %s message = %s metadata = %v&quot;</span>, err.Code, err.Reason, err.Message, err.Metadata)<br>&#125;<br></code></pre></td></tr></table></figure><p>Error() 返回的错误信息中，包含了 HTTP 状态码、错误发生的原因、错误信息和额外的错误元信息。通过这些详尽的错误信息返回，帮助开发者快速定位错误。</p><blockquote><p>提示</p><p>miniblog 项目属于 OneX 技术体系中的一个实战项目，其设计和实现方式跟 OneX 技术体系中的其他项目保持一致。考虑到包的复用性，errorsx 包的实现位于 <a href="https://github.com/onexstack/onexstack/tree/master/pkg/errorsx">onexstack</a> 项目根目录下的 pkg&#x2F;errorsx 目录中。</p></blockquote><p>在 Go 项目开发中，发生错误的原因有很多，大多数情况下，开发者希望将真实的错误信息返回给用户。因此，还需要提供一个方法用来设置 ErrorX 结构体中的 Message 字段。同样的，还需要提供设置 Metadata 字段的方法。为了满足上述诉求，给 ErrorX 增加 WithMessage、WithMetadata、KV 三个方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// WithMessage 设置错误的 Message 字段.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(err *ErrorX)</span></span> WithMessage(format <span class="hljs-type">string</span>, args ...any) *ErrorX &#123;<br>    err.Message = fmt.Sprintf(format, args...)<br>    <span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-comment">// WithMetadata 设置元数据.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(err *ErrorX)</span></span> WithMetadata(md <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>) *ErrorX &#123;<br>    err.Metadata = md<br>    <span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-comment">// KV 使用 key-value 对设置元数据.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(err *ErrorX)</span></span> KV(kvs ...<span class="hljs-type">string</span>) *ErrorX &#123;<br>    <span class="hljs-keyword">if</span> err.Metadata == <span class="hljs-literal">nil</span> &#123;<br>        err.Metadata = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>) <span class="hljs-comment">// 初始化元数据映射</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(kvs); i += <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-comment">// kvs 必须是成对的</span><br>        <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(kvs) &#123;<br>            err.Metadata[kvs[i]] = kvs[i+<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> err<br>&#125;<br></code></pre></td></tr></table></figure><p>设置 Message、Metadata 字段的方法名分别为 WithMessage、WithMetadata。WithXXX，在 Go 项目开发中是一种很常见的命名方式，寓意是：设置 XXX。KV 方法则以追加的方式给 Metadata 增加键值对。WithMessage、WithMetadata、KV 都返回了 *ErrorX 类型的实例，目的是为了实现链式调用，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// GRPCStatus 返回 gRPC 状态表示.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(err *ErrorX)</span></span> GRPCStatus() *status.Status &#123;<br>    details := errdetails.ErrorInfo&#123;Reason: err.Reason, Metadata: err.Metadata&#125;<br>    s, _ := status.New(httpstatus.ToGRPCCode(err.Code), err.Message).WithDetails(&amp;details)<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Go 项目开发中，通常需要将一个 error 类型的错误 err，解析为 *ErrorX 类型，并获取 *ErrorX 中的 Code 字段和 Reason 字段的值。Code 字段可用来设置 HTTP 状态码，Reason 字段可用来判断错误类型, 完整代码参见：<a href="https://github.com/onexstack/onexstack/blob/master/pkg/errorsx/errorsx.go">https://github.com/onexstack/onexstack/blob/master/pkg/errorsx/errorsx.go</a>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Code 返回错误的 HTTP 代码.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Code</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> http.StatusOK <span class="hljs-comment">//nolint:mnd</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> FromError(err).Code<br>&#125;<br><br><span class="hljs-comment">// Reason 返回特定错误的原因.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Reason</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> ErrInternal.Reason<br>    &#125;<br>    <span class="hljs-keyword">return</span> FromError(err).Reason<br>&#125;<br><br><span class="hljs-comment">// FromError 尝试将一个通用的 error 转换为自定义的 *ErrorX 类型.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FromError</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> *ErrorX &#123;<br>    <span class="hljs-comment">// 如果传入的错误是 nil，则直接返回 nil，表示没有错误需要处理.</span><br>    <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br><br>    <span class="hljs-comment">// 检查传入的 error 是否已经是 ErrorX 类型的实例.</span><br>    <span class="hljs-comment">// 如果错误可以通过 errors.As 转换为 *ErrorX 类型，则直接返回该实例.</span><br>    <span class="hljs-keyword">if</span> errx := <span class="hljs-built_in">new</span>(ErrorX); errors.As(err, &amp;errx) &#123;<br>        <span class="hljs-keyword">return</span> errx<br>    &#125;<br><br>    <span class="hljs-comment">// gRPC 的 status.FromError 方法尝试将 error 转换为 gRPC 错误的 status 对象.</span><br>    <span class="hljs-comment">// 如果 err 不能转换为 gRPC 错误（即不是 gRPC 的 status 错误），</span><br>    <span class="hljs-comment">// 则返回一个带有默认值的 ErrorX，表示是一个未知类型的错误.</span><br>    gs, ok := status.FromError(err)<br>    <span class="hljs-keyword">if</span> !ok &#123;<br>        <span class="hljs-keyword">return</span> New(ErrInternal.Code, ErrInternal.Reason, err.Error())<br>    &#125;<br><br>    <span class="hljs-comment">// 如果 err 是 gRPC 的错误类型，会成功返回一个 gRPC status 对象（gs）.</span><br>    <span class="hljs-comment">// 使用 gRPC 状态中的错误代码和消息创建一个 ErrorX.</span><br>    ret := New(httpstatus.FromGRPCCode(gs.Code()), ErrInternal.Reason, gs.Message())<br><br>    <span class="hljs-comment">// 遍历 gRPC 错误详情中的所有附加信息（Details）.</span><br>    <span class="hljs-keyword">for</span> _, detail := <span class="hljs-keyword">range</span> gs.Details() &#123;<br>        <span class="hljs-keyword">if</span> typed, ok := detail.(*errdetails.ErrorInfo); ok &#123;<br>            ret.Reason = typed.Reason<br>            <span class="hljs-keyword">return</span> ret.WithMetadata(typed.Metadata)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Go 项目开发中，经常还要对比一个 error 类型的错误 err 是否是某个预定义错误，因此 *ErrorX 也需要实现一个 Is 方法，Is 方法实现如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Is 判断当前错误是否与目标错误匹配.</span><br><span class="hljs-comment">// 它会递归遍历错误链，并比较 ErrorX 实例的 Code 和 Reason 字段.</span><br><span class="hljs-comment">// 如果 Code 和 Reason 均相等，则返回 true；否则返回 false.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(err *ErrorX)</span></span> Is(target <span class="hljs-type">error</span>) <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">if</span> errx := <span class="hljs-built_in">new</span>(ErrorX); errors.As(target, &amp;errx) &#123;<br>        <span class="hljs-keyword">return</span> errx.Code == err.Code &amp;&amp; errx.Reason == err.Reason<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Is 方法中，通过对比 Code 和 Reason 字段，来判断 target 错误是否是指定的预定义错误。注意，Is 方法中，没有对比 Message 字段的值，这是因为 Message 字段的值通常是动态的，而错误类型的定义不依赖于 Message。</p><p>至此，成功为 miniblog 开发了一个满足项目需求的错误包 errorsx，代码完整实现见 onexstack 项目的 <a href="https://github.com/onexstack/onexstack/blob/master/pkg/errorsx/errorsx.go">pkg&#x2F;errorsx&#x2F;errorsx.go</a> 文件。  </p><h2 id="2-4-错误码定义"><a href="#2-4-错误码定义" class="headerlink" title="2.4 错误码定义"></a>2.4 错误码定义</h2><p>在实现了 errorsx 错误包之后，便可以根据需要预定义项目需要的错误。这些错误，可以在代码中便捷的引用。通过直接引用预定义错误，不仅可以提高开发效率，还可以保持整个项目的错误返回是一致的。</p><p>完整错误码定义参见：<a href="https://github.com/onexstack/onexstack/blob/master/pkg/errorsx/code.go">https://github.com/onexstack/onexstack/blob/master/pkg/errorsx/code.go</a></p><h2 id="2-5-错误码返回规范"><a href="#2-5-错误码返回规范" class="headerlink" title="2.5 错误码返回规范"></a>2.5 错误码返回规范</h2><p>为了标准化接口错误返回，提高接口错误返回的易读性，miniblog 制定了以下错误返回规范：</p><ol><li>所有接口都要返回 errorsx.ErrorX 类型的错误；</li><li>建议在错误的原始位置，使用 errno.ErrXXX 方式返回 miniblog 自定义错误类型，其他位置直接透传自定义错误：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;github.com/onexstack/miniblog/internal/pkg/errno&quot;</span><br>    <span class="hljs-string">&quot;github.com/onexstack/miniblog/internal/pkg/log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> err := validateUser(); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validatePassword</span><span class="hljs-params">(password <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(password) &lt; <span class="hljs-number">6</span> &#123;<br>        log.Errorw(<span class="hljs-string">&quot;Password is too short&quot;</span>)<br>        <span class="hljs-comment">// 在错误最原始位置封装自定义错误</span><br>        <span class="hljs-comment">// 方式1：不带自定义信息的错误返回</span><br>        <span class="hljs-keyword">return</span> errno.ErrPasswordInvalid<br>        <span class="hljs-comment">// 方式2:带有自定义信息的错误返回</span><br>        <span class="hljs-comment">//return errno.ErrPasswordInvalid.WithMessage(&quot;Password is too short&quot;)</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">validateUser</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-comment">// 直接透传 validatePassword 返回的自定义错误</span><br>    <span class="hljs-keyword">if</span> err := validatePassword(<span class="hljs-string">&quot;test&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> err<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-错误包测试"><a href="#2-6-错误包测试" class="headerlink" title="2.6 错误包测试"></a>2.6 错误包测试</h2><p>Github 地址： <a href="https://github.com/onexstack/onexstack/blob/master/pkg/errorsx/errorsx_test.go">https://github.com/onexstack/onexstack/blob/master/pkg/errorsx/errorsx_test.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> errorsx_test<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-string">&quot;github.com/stretchr/testify/assert&quot;</span><br><span class="hljs-string">&quot;google.golang.org/genproto/googleapis/rpc/errdetails&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/status&quot;</span><br><br><span class="hljs-string">&quot;github.com/onexstack/onexstack/pkg/errorsx&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorX_NewAndToString</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 创建一个 ErrorX 错误  </span><br>errx := errorsx.New(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;InternalError.DBConnection&quot;</span>, <span class="hljs-string">&quot;Database connection failed: %s&quot;</span>, <span class="hljs-string">&quot;timeout&quot;</span>)<br><br><span class="hljs-comment">// 检查字段值  </span><br>assert.Equal(t, <span class="hljs-number">500</span>, errx.Code)<br>assert.Equal(t, <span class="hljs-string">&quot;InternalError.DBConnection&quot;</span>, errx.Reason)<br>assert.Equal(t, <span class="hljs-string">&quot;Database connection failed: timeout&quot;</span>, errx.Message)<br><br><span class="hljs-comment">// 检查字符串表示  </span><br>expected := <span class="hljs-string">`error: code = 500 reason = InternalError.DBConnection message = Database connection failed: timeout metadata = map[]`</span><br>assert.Equal(t, expected, errx.Error())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorX_WithMessage</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 创建一个基础错误  </span><br>errx := errorsx.New(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;BadRequest.InvalidInput&quot;</span>, <span class="hljs-string">&quot;Invalid input for field %s&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>)<br><br><span class="hljs-comment">// 更新错误的消息  </span><br>errx.WithMessage(<span class="hljs-string">&quot;New error message: %s&quot;</span>, <span class="hljs-string">&quot;retry failed&quot;</span>)<br><br><span class="hljs-comment">// 验证变更  </span><br>assert.Equal(t, <span class="hljs-string">&quot;New error message: retry failed&quot;</span>, errx.Message)<br>assert.Equal(t, <span class="hljs-number">400</span>, errx.Code)                         <span class="hljs-comment">// Code 不变</span><br>assert.Equal(t, <span class="hljs-string">&quot;BadRequest.InvalidInput&quot;</span>, errx.Reason) <span class="hljs-comment">// Reason 不变</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorX_WithMetadata</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 创建基础错误</span><br>errx := errorsx.New(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;BadRequest.InvalidInput&quot;</span>, <span class="hljs-string">&quot;Invalid input&quot;</span>)<br><br><span class="hljs-comment">// 添加元数据</span><br>errx.WithMetadata(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,<br><span class="hljs-string">&quot;type&quot;</span>:  <span class="hljs-string">&quot;empty&quot;</span>,<br>&#125;)<br><br><span class="hljs-comment">// 验证元数据</span><br>assert.Equal(t, <span class="hljs-string">&quot;username&quot;</span>, errx.Metadata[<span class="hljs-string">&quot;field&quot;</span>])<br>assert.Equal(t, <span class="hljs-string">&quot;empty&quot;</span>, errx.Metadata[<span class="hljs-string">&quot;type&quot;</span>])<br><br><span class="hljs-comment">// 动态添加更多元数据</span><br>errx.KV(<span class="hljs-string">&quot;user_id&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-string">&quot;trace_id&quot;</span>, <span class="hljs-string">&quot;xyz-789&quot;</span>)<br>assert.Equal(t, <span class="hljs-string">&quot;12345&quot;</span>, errx.Metadata[<span class="hljs-string">&quot;user_id&quot;</span>])<br>assert.Equal(t, <span class="hljs-string">&quot;xyz-789&quot;</span>, errx.Metadata[<span class="hljs-string">&quot;trace_id&quot;</span>])<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorX_Is</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 定义两个预定义错误</span><br>err1 := errorsx.New(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;NotFound.User&quot;</span>, <span class="hljs-string">&quot;User not found&quot;</span>)<br>err2 := errorsx.New(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;NotFound.User&quot;</span>, <span class="hljs-string">&quot;Another message&quot;</span>)<br>err3 := errorsx.New(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;Forbidden&quot;</span>, <span class="hljs-string">&quot;Access denied&quot;</span>)<br><br><span class="hljs-comment">// 验证两个错误均被认为是同一种类型的错误（Code 和 Reason 相等）</span><br>assert.True(t, err1.Is(err2))  <span class="hljs-comment">// Message 不影响匹配</span><br>assert.False(t, err1.Is(err3)) <span class="hljs-comment">// Reason 不同</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorX_FromError_WithPlainError</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 创建一个普通的 Go 错误</span><br>plainErr := errors.New(<span class="hljs-string">&quot;Something went wrong&quot;</span>)<br><br><span class="hljs-comment">// 转换为 ErrorX</span><br>errx := errorsx.FromError(plainErr)<br><br><span class="hljs-comment">// 检查转换后的 ErrorX</span><br>assert.Equal(t, errorsx.UnknownCode, errx.Code)       <span class="hljs-comment">// 默认 500</span><br>assert.Equal(t, errorsx.UnknownReason, errx.Reason)   <span class="hljs-comment">// 默认 &quot;&quot;</span><br>assert.Equal(t, <span class="hljs-string">&quot;Something went wrong&quot;</span>, errx.Message) <span class="hljs-comment">// 转换时保留原始错误消息</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorX_FromError_WithGRPCError</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 创建一个 gRPC 错误</span><br>grpcErr := status.New(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Invalid argument&quot;</span>).Err() <span class="hljs-comment">// gRPC INVALID_ARGUMENT = 3</span><br><br><span class="hljs-comment">// 转换为 ErrorX  </span><br>errx := errorsx.FromError(grpcErr)<br><br><span class="hljs-comment">// 检查转换后的 ErrorX  </span><br>assert.Equal(t, <span class="hljs-number">400</span>, errx.Code) <span class="hljs-comment">// httpstatus.FromGRPCCode(3) 对应 HTTP 400  </span><br>assert.Equal(t, <span class="hljs-string">&quot;Invalid argument&quot;</span>, errx.Message)<br><br><span class="hljs-comment">// 没有附加的元数据  </span><br>assert.Nil(t, errx.Metadata)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorX_FromError_WithGRPCErrorDetails</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// 创建带有详细信息的 gRPC 错误  </span><br>st := status.New(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Invalid argument&quot;</span>)<br>grpcErr, err := st.WithDetails(&amp;errdetails.ErrorInfo&#123;<br>Reason:   <span class="hljs-string">&quot;InvalidInput&quot;</span>,<br>Metadata: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;required&quot;</span>&#125;,<br>&#125;)<br>assert.NoError(t, err) <span class="hljs-comment">// 确保 gRPC 错误创建成功  </span><br><br><span class="hljs-comment">// 转换为 ErrorX  </span><br>errx := errorsx.FromError(grpcErr.Err())<br><br><span class="hljs-comment">// 检查转换后的 ErrorX  </span><br>assert.Equal(t, <span class="hljs-number">400</span>, errx.Code) <span class="hljs-comment">// gRPC INVALID_ARGUMENT = HTTP 400</span><br>assert.Equal(t, <span class="hljs-string">&quot;Invalid argument&quot;</span>, errx.Message)<br>assert.Equal(t, <span class="hljs-string">&quot;InvalidInput&quot;</span>, errx.Reason) <span class="hljs-comment">// 从 gRPC ErrorInfo 中提取  </span><br><br><span class="hljs-comment">// 检查元数据  </span><br>assert.Equal(t, <span class="hljs-string">&quot;name&quot;</span>, errx.Metadata[<span class="hljs-string">&quot;field&quot;</span>])<br>assert.Equal(t, <span class="hljs-string">&quot;required&quot;</span>, errx.Metadata[<span class="hljs-string">&quot;type&quot;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="🤗-总结归纳"><a href="#🤗-总结归纳" class="headerlink" title="🤗 总结归纳"></a>🤗 总结归纳</h1><ul><li>不同风格的错误返回方式</li><li>miniblog 错误包设计</li><li>通过定义错误码，使用自定义的错误码规范，再参考一下 miniblog 的错误包示例，可以快速的搭建起项目的错误包</li></ul><h1 id="📎-参考文章"><a href="#📎-参考文章" class="headerlink" title="📎 参考文章"></a>📎 参考文章</h1><ul><li><a href="https://articles.zsxq.com/id_7baeuqr15wmo.html">https://articles.zsxq.com/id_7baeuqr15wmo.html</a></li><li><a href="https://github.com/onexstack/onexstack">https://github.com/onexstack/onexstack</a></li><li><a href="https://github.com/onexstack/miniblog">onexstack&#x2F;miniblog: 微博客：小而美的高质量 Go 实战项目</a></li></ul><blockquote><p>有关Notion安装或者使用上的问题，欢迎您在底部评论区留言，一起交流~</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>miniblog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 Go项目初始化</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/01%20Go%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/01%20Go%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="📝-主旨内容"><a href="#📝-主旨内容" class="headerlink" title="📝 主旨内容"></a>📝 主旨内容</h1><ul><li>项目初始化的几种方式</li><li>初始化项目仓库</li><li>使用 Air 工具热加载 go 应用</li><li>添加版权声明文件 license</li><li>编写 Makefile 脚本</li></ul><h1 id="1-项目初始化的几种方式"><a href="#1-项目初始化的几种方式" class="headerlink" title="1. 项目初始化的几种方式"></a>1. 项目初始化的几种方式</h1><p>Go 项目开发的第一步是初始化一个 Go 项目仓库。根据开发能力、项目类别、项目需求等，可以选择不同的项目初始化方式。一般而言有以下几种项目初始化方式，具体如下表所示。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>初始化方式</strong></td><td><strong>方式描述</strong></td></tr><tr><td>生成工具</td><td>借助项目开发脚手架自动生成项目模版，例如 kratos、nirvana、kubebuilder、osctl 等工具</td></tr><tr><td>复制已有项目</td><td>复制一个可以满足功能需求的现有项目，然后重命名项目目录并修改 Go 包导入路径，最后基于修改后的源代码进行开发</td></tr><tr><td>从零初始化</td><td>从头初始化一个 Go 项目，包括设计目录结构、代码结构以及进行源代码开发</td></tr></tbody></table><h2 id="1-1-生成工具"><a href="#1-1-生成工具" class="headerlink" title="1.1 生成工具"></a>1.1 生成工具</h2><p>初始化 Go 项目最简单的方法是使用工具进行初始化。通过这些脚手架工具，可以快速生成一个 Go 项目模板，并基于该模板进行开发。目前业界有许多项目生成工具，如 osctl、kratos、nirvana、sponge 等。使用这些工具初始化 Go 项目的最大优点是方便、快捷，且能生成相对高质量的项目模板。然而，缺点也很明显：生成的项目模板的代码质量、目录结构、代码架构、功能列表及构建方式均依赖于工具本身的实现。</p><p>本课程介绍的 miniblog 项目也有其匹配的项目生成工具 osctl。该工具可以生成与 miniblog 项目一致的代码，从代码质量、目录结构、简洁架构、设计思路到可选的功能列表，都与 miniblog 保持一致。</p><h2 id="1-2-复制已有项目"><a href="#1-2-复制已有项目" class="headerlink" title="1.2 复制已有项目"></a>1.2 复制已有项目</h2><p>除了使用脚手架工具快速生成 Go 模板项目外，还可以直接复制一个已有的 Go 项目，然后修改项目的仓库名和 Go 包导入路径，替换与原项目名相关的字符串等方式来初始化一个 Go 项目。这种方式的<strong>缺点是改造工作量较大</strong>。<strong>优点是非常灵活</strong>，可以根据需求选择喜欢的 Go 项目，魔改之后，形成自己的 Go 项目。</p><p>后面如果在开发一个新单体项目时，可以选择直接通过魔改 <a href="https://github.com/onexstack/miniblog">miniblog</a> 来进行二开。</p><p>如果项目复杂度过高，可以选择魔改 <a href="https://github.com/onexstack/onex">onex</a> 项目来进行二开。</p><p>魔改已有项目为一个新项目时，可以使用 Linux 命令批量修改，修改命令通常如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell">cp -a miniblog myproj &amp;&amp; cd myproj # 复制 miniblog 项目为新的项目名：myproj<br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换 Go 包导入路径</span><br>sed -i &#x27;s/github.com\/onexstack\/miniblog/github.com\/onexstack\/myproj/g&#x27; `grep -Rl github.com/onexstack/miniblog *`<br>sed -i &#x27;s/MiniBlog/MyProj/g&#x27; `grep -Rl MiniBlog *` # 替换大写的原项目标识符<br>sed -i &#x27;s/miniblog/myproj/g&#x27; `grep -Rl miniblog *` # 替换所有的 miniblog 项目标识符<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查找并将 miniblog 目录改成新的项目名 myproj</span><br>find . -type d -name &#x27;miniblog&#x27; -execdir mv &#123;&#125; myproj \;<br>make build<br></code></pre></td></tr></table></figure><p><strong>注： 代码中 myproj 需要替换为新项目名</strong></p><h2 id="1-3-从零开发"><a href="#1-3-从零开发" class="headerlink" title="1.3 从零开发"></a>1.3 <strong>从零开发</strong></h2><p>还可以选择从零初始化一个 Go 项目。这种方式最大的缺点是工作量很大，项目目录结构、项目源码、项目代码结构等都需要从零设计并开发。但优点也很明显，可以完全根据自己的需求来设计和开发。</p><blockquote><p>[!important]</p><h3 id="选择合适的项目初始化方法"><a href="#选择合适的项目初始化方法" class="headerlink" title="选择合适的项目初始化方法"></a>选择合适的项目初始化方法</h3><p>在实际开发中，可以根据需要选择合适的项目初始化方法。如果脚手架工具生成的代码，在目录结构设计、开发风格、代码质量、架构设计、功能列表等方面能够满足你的需求，则可以优先考虑使用工具来快速初始化 Go 项目。如果工具不能满足需求，建议基于一个优秀的 Go 项目进行魔改，例如，可以魔改 <a href="https://github.com/onexstack/miniblog">https://github.com/onexstack/miniblog</a> 项目为一个新的项目。</p></blockquote><h1 id="2-初始化项目仓库"><a href="#2-初始化项目仓库" class="headerlink" title="2. 初始化项目仓库"></a>2. 初始化项目仓库</h1><h2 id="2-1-创建项目目录并添加-README-文件"><a href="#2-1-创建项目目录并添加-README-文件" class="headerlink" title="2.1 创建项目目录并添加 README 文件"></a>2.1 创建项目目录并添加 README 文件</h2><p>在开始初始化项目之前，需先设计好项目的名称。一个简洁、易懂且合适的项目名是开发高质量 Go 项目的第一步。通常，需要提前确认以下名称：</p><ul><li>**项目名称：**项目名要具有一定语义，说明该项目的功能，建议的格式为&#x3D;&#x3D;<strong>纯小写的精短名字</strong>&#x3D;&#x3D;。如果项目名字过长，可以按单词用中杠线（-）分割，但最好不要使用。以下是一些合格的名字：api、controllermanager、controller-manager。不建议命名为：controller_manager；</li><li>**项目名称大小写：**还需确认项目名在代码中的大小写格式。统一大小写格式可以使整个代码命名格式保持统一。例如：controller-manager&#x2F;controllermanager 项目的小写格式为 controllermanager，大写格式为 ControllerManager；</li><li>**项目名简写格式：**有些项目名出于易读性考虑，可能会较长。在编写代码时，<strong>如果引用了项目名，可能会导致代码行过长，为了使代码行简短易读，通常会采用简写模式</strong>。带中杠线分割的项目名的简短模式一般为每个单词的首字母，例如：controller-manager 为 cm。不带中杠线分割的项目名简写模式需要根据具体名字确定，且没有统一的命名规则，例如：controller 可以简写为 ctrl。</li></ul><p>通过执行以下命令来创建目录，并在项目目录中添加一个 README.md 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mkdir -p $GOPATH/src/github.com/onexstack/miniblog<br>cd $GOPATH/src/github.com/onexstack/miniblog<br>echo &#x27;## miniblog 项目&#x27; &gt;&gt; README.md<br></code></pre></td></tr></table></figure><blockquote><p>提示：<br>可以使用 <a href="https://readme.so/">https://readme.so</a> 工具来协助生成 README 文件，通常 README 文件需要包含以下部分：Features、Installation、Usage&#x2F;Examples、Documentation、Feedback、Contributing、Authors、License、Related。</p></blockquote><h2 id="2-2-初始化目录为-Go-模块"><a href="#2-2-初始化目录为-Go-模块" class="headerlink" title="2.2 初始化目录为 Go 模块"></a>2.2 <strong>初始化目录为 Go 模块</strong></h2><p>miniblog 是一个 Go 项目，根据 Go 语法要求，还需要将该项目初始化为一个 Go 模块，并添加到 Go 工作区中。初始化命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">go mod init # 初始化当前项目为一个 Go 模块<br>go work init . # 初始化当前目录为一个 Go 工作区<br>go work use . # 添加当前模块到 Go 工作区<br></code></pre></td></tr></table></figure><h2 id="2-3-初始化目录为-Git-仓库"><a href="#2-3-初始化目录为-Git-仓库" class="headerlink" title="2.3 初始化目录为 Git 仓库"></a>2.3 <strong>初始化目录为 Git 仓库</strong></h2><p>当前项目开发基本上都是使用 Git 来管理项目源码，因此，还需要将项目仓库初始化为一个 Git 仓库。</p><p>在提交代码时，有些文件，例如备份文件、临时文件和日志文件不需要提交到项目仓库中，可以通过在项目目录下添加 .gitignore 文件来忽略这些文件。如果你不知道如何配置 .gitignore 文件中的内容，可以借助 .gitignore 文件生成工具来自动生成一个可用的 .gitignore 文件，例如 <a href="https://www.toptal.com/developers/gitignore/">gitignore.io</a> 就是一个很好用的 .gitignore 文件生成工具。miniblog 项目使用的 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/.gitignore">.gitignore</a> 文件如下述代码所示。</p><p>可以执行以下命令将 Go 项目仓库初始化为一个 Git 仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git init # 初始化当前目录为 Git 仓库<br>git config user.name mungdong# 设置仓库级别用户名<br>git config user.email 510195171@qq.com # 设置仓库级别邮箱<br>git config --global credential.helper store # 永久保存凭据<br>git add . # 添加所有被 Git 追踪的文件到暂存区<br>git remote add origin https://github.com/mmungdong/miniblog.git # 将本地仓库与远程仓库相关联<br>git commit -m &quot;feat: 第一次提交&quot; # 将暂存区内容添加到本地仓库中<br></code></pre></td></tr></table></figure><h2 id="2-4-创建需要的目录"><a href="#2-4-创建需要的目录" class="headerlink" title="2.4 创建需要的目录"></a>2.4 创建需要的目录</h2><p>初始化代码仓库后，我们可以根据前面设计的目录规范创建一些空目录，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mkdir -p cmd configs docs scripts<br>ls -F<br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250628020649416.png"></p><p>提前创建符合目录规范的空目录，可以带来以下好处：</p><ol><li>提前规划目录相当于提前规划未来的功能，将未来要实现的功能以目录形式固化在项目仓库中，起到记录作用；</li><li>有利于后续文件按照功能存放在预先规划好的目录中，使项目更加规范。否则，不同开发者可能会根据各自的开发习惯，创建各种各样的目录结构和命名。</li></ol><p>例如，可以将之前设计好的规范存放在 <a href="https://github.com/onexstack/miniblog/tree/master/docs/devel/zh-CN/conversions">docs&#x2F;devel&#x2F;zh-CN&#x2F;conversions</a> 目录中。由于 Git 不追踪空目录，为了让 Git 追踪空目录，我们可以在空目录下创建一个空文件 .keep，并在适当的时候执行以下命令删除这些临时文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">find . -name .keep | xargs -i rm &#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!important]</p><h3 id="命令拆解与作用"><a href="#命令拆解与作用" class="headerlink" title="命令拆解与作用"></a><strong>命令拆解与作用</strong></h3><ul><li><code>**find . -name .keep**</code>：<ul><li><code>find</code> 是用于查找文件和目录的命令，<code>.</code> 表示从当前目录开始搜索（也可替换为具体路径，如 <code>/home/user/project</code> ）。</li><li><code>name .keep</code> 是按名称筛选，只找名为 <code>.keep</code> 的文件 &#x2F; 目录（这类文件常作为占位符，让 Git 等版本控制保留空目录 ）。</li></ul></li><li><code>**xargs -i rm &#123;&#125;**</code>：<ul><li><code>xargs</code> 把前一个命令（<code>find</code>）的输出，转成后续命令（<code>rm</code>）的参数。</li><li><code>i</code> 是 <code>xargs</code> 的选项，让 <code>&#123;&#125;</code> 作为占位符，指代 <code>find</code> 找到的每个 <code>.keep</code> 文件路径。</li><li><code>rm &#123;&#125;</code> 就是删除这些 <code>.keep</code> 文件，<code>&#123;&#125;</code> 会被实际路径替换，实现逐个删除。</li></ul></li></ul></blockquote><p>miniblog 项目的完整目录结构说明见 <a href="https://github.com/onexstack/miniblog/blob/master/docs/devel/zh-CN/directory.md">docs&#x2F;devel&#x2F;zh-CN&#x2F;directory.md</a> 文件。</p><h2 id="2-5-创建-Hello-World-程序并编译二进制文件"><a href="#2-5-创建-Hello-World-程序并编译二进制文件" class="headerlink" title="2.5 创建 Hello World 程序并编译二进制文件"></a>2.5 创建 Hello World 程序并编译二进制文件</h2><p>一个全新的项目，需要先编写一个最简单的 Hello World 程序，以检查开发和编译环境是否就绪。根据目录规范，需要在 <a href="https://github.com/onexstack/miniblog/tree/feature/s01/cmd/mb-apiserver">cmd&#x2F;mb-apiserver</a> 目录下创建 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/cmd/mb-apiserver/main.go">main.go</a> 文件，内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br> <br><span class="hljs-comment">// Go 程序的默认入口函数。阅读项目代码的入口函数.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>执行以下命令编译并运行此 Hello World 程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gofmt 用来格式化当前目录及其子目录中的所有 Go 源文件</span><br>gofmt -s -w ./<br><span class="hljs-meta prompt_"># </span><span class="language-bash">go build 命令用来编译Go源码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-o 指定输出的可执行文件名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 选项用于显示详细的编译过程信息</span><br>go build -o _output/mb-apiserver -v cmd/mb-apiserver/main.go<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行编译生成的可执行文件</span><br>_output/mb-apiserver<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出： Hello World!</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250628020718129.png"></p><p>编译 success ~~~</p><p>main 文件所在的目录 mb-apiserver 也是 miniblog APIServer 的组件名。<strong>在 Go 项目开发中，通常在组件名中包含项目的简写前缀 mb-，通过 mb- 前缀，可以很容易地辨别该组件是 miniblog 的 APIServer 组件。此外，通过 mb- 前缀，也可以有效避免组件名与其他项目的组件名发生冲突。</strong></p><h1 id="3-使用-Air-工具热加载-go-应用"><a href="#3-使用-Air-工具热加载-go-应用" class="headerlink" title="3. 使用 Air 工具热加载 go 应用"></a>3. 使用 Air 工具热加载 go 应用</h1><ul><li>在 Go 项目开发过程中，经常需要修改代码、编译代码、重新启动程序，然后测试程序。若每次都手动操作，则效率较低。此时，可以借助程序热加载工具来自动编译并重启程序。在 Go 生态中，有许多此类工具，其中较为流行的是 <a href="https://github.com/air-verse/air">Air</a> 工具。你可以直接参考 <a href="https://github.com/air-verse/air/blob/master/README-zh_cn.md">Air 官方文档</a>了解如何使用 Air 工具。</li></ul><p>以下是安装和配置 Air 工具的步骤：</p><ol><li><strong>安装 Air 工具</strong></li></ol><p>安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">go install github.com/air-verse/air@latest<br></code></pre></td></tr></table></figure><ol><li><strong>配置 Air 工具</strong></li></ol><p>这里我们使用 Air 官方仓库中给出的示例配置：<a href="https://github.com/air-verse/air/blob/master/air_example.toml">air_example.toml</a>。air_example.toml 中的示例配置基本能满足绝大部分项目需求，一般只需再配置 cmd、bin、args_bin 三个参数即可。</p><p>在 miniblog 项目根目录下创建 .air.toml 文件，文件内容见 miniblog 仓库 feature&#x2F;s01 分支下的 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/.air.toml">.air.toml</a> 文件。.air.toml 基于 air_example.toml 文件修改了以下参数配置：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TOML"><span class="hljs-comment"># air在运行时存储临时文件的目录</span><br><span class="hljs-attr">tmp_dir</span> = <span class="hljs-string">&quot;/tmp/air&quot;</span><br> <br><span class="hljs-section">[build]</span><br><span class="hljs-comment"># cmd 指定了监听文件有变化时，air 需要执行的命令。</span><br><span class="hljs-comment"># 这里指定了执行 make build 重新构建 mb-apiserver 二进制文件</span><br><span class="hljs-attr">cmd</span> = <span class="hljs-string">&quot;go build -o _output/mb-apiserver -v cmd/mb-apiserver/main.go&quot;</span> <br><span class="hljs-comment"># bin 指定了执行完 cmd 命令后，执行的二进制文件。</span><br><span class="hljs-comment"># 这里指定了执行 _output/ mb-apiserver 文件</span><br><span class="hljs-attr">bin</span> = <span class="hljs-string">&quot;_output/mb-apiserver&quot;</span><br><span class="hljs-comment"># args_bin 指定了运行二进制文件（bin/full_bin）时添加额外参数，这里设置为空</span><br><span class="hljs-attr">args_bin</span> = []<br></code></pre></td></tr></table></figure><ol><li><strong>启动 Air 工具</strong></li></ol><p>配置完成后，在项目根目录下运行 air 命令:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs TOML"><span class="hljs-comment"># 默认使用当前目录下的 .air.toml 配置，你可以通过 `-c` 选项指定配置，例如：`air -c .air.toml`</span><br>air<br></code></pre></td></tr></table></figure><h1 id="4-添加版权声明文件-LICENSE-和版本声明"><a href="#4-添加版权声明文件-LICENSE-和版本声明" class="headerlink" title="4. 添加版权声明文件 LICENSE 和版本声明"></a>4. 添加版权声明文件 LICENSE 和版本声明</h1><p>如果项目是一个开源项目或计划在未来开源，则需要为项目添加版权声明，主要包括以下内容：</p><ol><li>存放在项目根目录下的 LICENSE 文件，用于声明项目所遵循的开源协议；</li><li>项目源文件中的版权头信息，用于说明文件所遵循的开源协议。</li></ol><p>业界当前有上百种开源协议可供选择，常用的有六种，按从严格到宽松的顺序依次为：GPL、MPL、LGPL、Apache、BSD、MIT。</p><p>miniblog 项目使用了最宽松的 <strong>MIT</strong> 协议。</p><h2 id="4-1-miniblog-添加-LICENSE-文件"><a href="#4-1-miniblog-添加-LICENSE-文件" class="headerlink" title="4.1 miniblog 添加 LICENSE 文件"></a>4.1 miniblog 添加 LICENSE 文件</h2><p>一般项目的根目录下会存放一个 LICENSE 文件，用于声明开源项目所遵循的协议，因此我们也需要为 miniblog 初始化一个 LICENSE 文件。我们可以使用 license 工具来生成 LICENSE 文件，具体操作命令如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">go</span> install github.com/nishanths/license/v5@latest<br>license -list # 查看支持的代码协议<br># 在 miniblog 项目根目录下执行<br>license -n <span class="hljs-string">&#x27;mmungdong(懵懂) &lt;510195171@qq.com&gt;&#x27;</span> -o LICENSE mit<br></code></pre></td></tr></table></figure><p>上述命令将在当前目录下生成一个名为 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/LICENSE">LICENSE</a> 的文件，该文件包含 MIT 开源协议声明。</p><h2 id="4-2-给源文件添加版本声明"><a href="#4-2-给源文件添加版本声明" class="headerlink" title="4.2 给源文件添加版本声明"></a>4.2 给源文件添加版本声明</h2><p>除了添加整个项目的开源协议声明，还可以为每个源文件添加版权头信息，以声明文件所遵循的开源协议。miniblog 的版权头信息保存在 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/scripts/boilerplate.txt">scripts&#x2F;boilerplate.txt</a> 文件中。</p><blockquote><p>提示：<br>版权头信息保存的文件名，通常命名为 boilerplate。</p></blockquote><p>有了版权头信息，在新建文件时需要将这些信息放在文件头中。如果手动添加，不仅容易出错，还容易遗漏文件。最好的方法是通过自动化手段追加版权头信息。追加方法如下。</p><ol><li><strong>安装 addlicense 工具</strong></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">go</span> install github.com/marmotedu/addlicense@latest<br></code></pre></td></tr></table></figure><ol><li><strong>运行 addlicense 工具添加版权头信息</strong></li></ol><p>运行以下命令添加版权头信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">addlicense -v -f ./scripts/boilerplate.txt --skip-dirs=third_party,_output .<br></code></pre></td></tr></table></figure><p>可以看到 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/cmd/mb-apiserver/main.go#L1">main.go</a> 文件已经添加了版权头信息，内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Copyright 2024 孔令飞 &lt;colin404@foxmail.com&gt;. All rights reserved.</span><br><span class="hljs-comment">// Use of this source code is governed by a MIT style</span><br><span class="hljs-comment">// license that can be found in the LICENSE file. The original repo for</span><br><span class="hljs-comment">// this file is https://github.com/onexstack/miniblog. The professional</span><br><span class="hljs-comment">// version of this repository is https://github.com/onexstack/onex.</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// Go 程序的默认入口函数。阅读项目代码的入口函数.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-编写-Makefile-脚本"><a href="#5-编写-Makefile-脚本" class="headerlink" title="5. 编写 Makefile 脚本"></a>5. 编写 Makefile 脚本</h1><ul><li>学习 Makefile 基本语法，可参考 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/docs/book/makefile.md">docs&#x2F;book&#x2F;makefile.md</a> 文件</li><li>学习 Makefile 高级语法（如果有时间或感兴趣）：陈皓老师编写的<a href="https://bobo-2.oss-cn-shenzhen.aliyuncs.com/2020/11/20201121024724910.pdf">《跟我一起写 Makefile（PDF 重制版）》</a></li></ul><p>miniblog 项目的 <a href="https://github.com/onexstack/miniblog/blob/feature/s01/Makefile">Makefile</a> 文件位于项目根目录下，内容如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Makefile"><span class="hljs-comment"># ==============================================================================</span><br><span class="hljs-comment"># 定义全局 Makefile 变量方便后面引用</span><br> <br>COMMON_SELF_DIR := <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> $(<span class="hljs-built_in">lastword</span> <span class="hljs-variable">$(MAKEFILE_LIST)</span>)</span>)<br><span class="hljs-comment"># 项目根目录</span><br>PROJ_ROOT_DIR := <span class="hljs-variable">$(<span class="hljs-built_in">abspath</span> $(<span class="hljs-built_in">shell</span> cd <span class="hljs-variable">$(COMMON_SELF_DIR)</span>/ &amp;&amp; pwd -P)</span>)<br><span class="hljs-comment"># 构建产物、临时文件存放目录</span><br>OUTPUT_DIR := <span class="hljs-variable">$(PROJ_ROOT_DIR)</span>/_output<br> <br><span class="hljs-comment"># ==============================================================================</span><br><span class="hljs-comment"># 定义默认目标为 all</span><br>.DEFAULT_GOAL := all<br> <br><span class="hljs-comment"># 定义 Makefile all 伪目标，执行 `make` 时，会默认会执行 all 伪目标</span><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: all</span><br><span class="hljs-section">all: tidy format build add-copyright</span><br> <br><span class="hljs-comment"># ==============================================================================</span><br><span class="hljs-comment"># 定义其他需要的伪目标</span><br> <br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: build</span><br><span class="hljs-section">build: tidy # 编译源码，依赖 tidy 目标自动添加/移除依赖包.</span><br>    @go build -v -o <span class="hljs-variable">$(OUTPUT_DIR)</span>/mb-apiserver <span class="hljs-variable">$(PROJ_ROOT_DIR)</span>/cmd/mb-apiserver/main.go<br> <br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: format</span><br><span class="hljs-section">format: # 格式化 Go 源码.</span><br>    @gofmt -s -w ./<br> <br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: add-copyright</span><br><span class="hljs-section">add-copyright: # 添加版权头信息.</span><br>    @addlicense -v -f <span class="hljs-variable">$(PROJ_ROOT_DIR)</span>/scripts/boilerplate.txt <span class="hljs-variable">$(PROJ_ROOT_DIR)</span> --skip-dirs=third_party,vendor,<span class="hljs-variable">$(OUTPUT_DIR)</span><br> <br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: tidy</span><br><span class="hljs-section">tidy: # 自动添加/移除依赖包.</span><br>    @go mod tidy<br> <br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: clean</span><br><span class="hljs-section">clean: # 清理构建产物、临时文件等.</span><br>    @-rm -vrf <span class="hljs-variable">$(OUTPUT_DIR)</span><br></code></pre></td></tr></table></figure><p>在编写 Makefile 规则之后，可以执行 make <target> 命令以运行指定的 Makefile 规则。例如，可以执行 make build 命令编译 mb-apiserver 组件。</p><p>项目支持了 Makefile 之后，未来所有的编译、单元测试等项目管理操作，都建议通过执行 Makefile 规则来完成。添加了 Makefile 之后，还需要更新 .air.toml 文件，将其中的 cmd 改成cmd &#x3D; “make build”。</p><p>上述 Makefile 文件中的 Makefile 规则如下表所示:</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250628020813503.png"></p><h1 id="📎-参考文章"><a href="#📎-参考文章" class="headerlink" title="📎 参考文章"></a>📎 参考文章</h1><ul><li>[05 | 项目初始化（上）：如何初始化一个 Go 项目仓库?(<a href="https://articles.zsxq.com/id_x2tuum620z3a.html">https://articles.zsxq.com/id_x2tuum620z3a.html</a>)</li><li><a href="https://articles.zsxq.com/id_0z7eii1hgsp0.html">06 | 项目初始化（下）：给新项目添加初始文件</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>miniblog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文吃透 k8s 的 Lease （租约）</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F%20k8s%20%E7%9A%84%20Lease%20%EF%BC%88%E7%A7%9F%E7%BA%A6%EF%BC%89/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/%E4%B8%80%E6%96%87%E5%90%83%E9%80%8F%20k8s%20%E7%9A%84%20Lease%20%EF%BC%88%E7%A7%9F%E7%BA%A6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里写文章的前言：</p><p>一个简单的开头,简述这篇文章讨论的问题、目标、人物、背景是什么？并简述你给出的答案。</p><p>可以说说你的故事：阻碍、努力、结果成果，意外与转折。</p></blockquote><h1 id="0-前置背景：为什么需要-Lease-Leader-Election"><a href="#0-前置背景：为什么需要-Lease-Leader-Election" class="headerlink" title="0. 前置背景：为什么需要 Lease&#x2F;Leader Election ?"></a>0. 前置背景：为什么需要 Lease&#x2F;Leader Election ?</h1><h1 id="1-Lease-是什么？主要解决了什么问题？"><a href="#1-Lease-是什么？主要解决了什么问题？" class="headerlink" title="1. Lease 是什么？主要解决了什么问题？"></a>1. Lease 是什么？主要解决了什么问题？</h1><h1 id="2-Lease-的-Leader-Election-领导者选举-功能"><a href="#2-Lease-的-Leader-Election-领导者选举-功能" class="headerlink" title="2. Lease 的 Leader Election (领导者选举) 功能"></a>2. Lease 的 Leader Election (领导者选举) 功能</h1><h2 id="2-1-Leader-Election-核心逻辑：租约机制、选举流程、冲突解决"><a href="#2-1-Leader-Election-核心逻辑：租约机制、选举流程、冲突解决" class="headerlink" title="2.1. Leader Election 核心逻辑：租约机制、选举流程、冲突解决"></a>2.1. Leader Election 核心逻辑：租约机制、选举流程、冲突解决</h2><h2 id="2-2-从-k8s-的原生组件查看如何用-Leader-Election-来保障高可用"><a href="#2-2-从-k8s-的原生组件查看如何用-Leader-Election-来保障高可用" class="headerlink" title="2.2. 从 k8s 的原生组件查看如何用 Leader Election 来保障高可用"></a>2.2. 从 k8s 的原生组件查看如何用 Leader Election 来保障高可用</h2><h2 id="2-3-为你的-Controller-加上-Leader-Election-能力"><a href="#2-3-为你的-Controller-加上-Leader-Election-能力" class="headerlink" title="2.3. 为你的 Controller 加上 Leader Election 能力"></a>2.3. 为你的 Controller 加上 Leader Election 能力</h2><h1 id="3-既是避坑指南，也是最佳实践"><a href="#3-既是避坑指南，也是最佳实践" class="headerlink" title="3. 既是避坑指南，也是最佳实践"></a>3. 既是避坑指南，也是最佳实践</h1><ul><li>（整理开发过程中遇到的问题，暂搁置）</li></ul><h1 id="🤗-总结归纳"><a href="#🤗-总结归纳" class="headerlink" title="🤗 总结归纳"></a>🤗 总结归纳</h1><p>总结文章的内容</p><h1 id="📎-参考文章"><a href="#📎-参考文章" class="headerlink" title="📎 参考文章"></a>📎 参考文章</h1><ul><li><a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/leases/">https://kubernetes.io/zh-cn/docs/concepts/architecture/leases/</a></li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/coordinated-leader-election/">协调领导者选举 | Kubernetes</a></li><li><a href="https://wx.zsxq.com/columns/48888882442228?column_id=158151182582">https://wx.zsxq.com/columns/48888882442228?column_id&#x3D;158151182582</a></li><li><a href="https://wx.zsxq.com/columns/48888882442228?column_id=158151182582">https://wx.zsxq.com/columns/48888882442228?column_id&#x3D;158151182582</a></li><li><a href="https://wx.zsxq.com/columns/48888882442228?column_id=158151182582">https://wx.zsxq.com/columns/48888882442228?column_id&#x3D;158151182582</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode 运行慢？使用内置的【扩展二等分】快速找出”元凶”插件</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/vscode%20%E8%BF%90%E8%A1%8C%E6%85%A2%EF%BC%9F%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E7%9A%84%E3%80%90%E6%89%A9%E5%B1%95%E4%BA%8C%E7%AD%89%E5%88%86%E3%80%91%E5%BF%AB%E9%80%9F%E6%89%BE%E5%87%BA%E2%80%9D%E5%85%83%E5%87%B6%E2%80%9D%E6%8F%92%E4%BB%B6/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/vscode%20%E8%BF%90%E8%A1%8C%E6%85%A2%EF%BC%9F%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E7%9A%84%E3%80%90%E6%89%A9%E5%B1%95%E4%BA%8C%E7%AD%89%E5%88%86%E3%80%91%E5%BF%AB%E9%80%9F%E6%89%BE%E5%87%BA%E2%80%9D%E5%85%83%E5%87%B6%E2%80%9D%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我在使用 vscode 阅读 k8s 源码的时候，跳转函数突然变的特别慢，而且一直跳出 “扩展主机在过去5分钟内意外终止了3次。” 的字样，最后使用 vscode 的扩展二等分找出了拖累 vscode 的插件元凶，以后在安装插件的时候一定要慎重！</p><h1 id="【扩展二等分】是什么？"><a href="#【扩展二等分】是什么？" class="headerlink" title="【扩展二等分】是什么？"></a>【扩展二等分】是什么？</h1><p>VS Code 提供了一个内置的 “扩展 bisect（二分法）” 功能，可以自动帮助你定位导致 “扩展主机意外终止” 的问题插件。这个功能会通过逐步启用 &#x2F; 禁用扩展的方式，高效缩小范围，比手动二分法更便捷。</p><h1 id="如何使用【扩展二等分】？"><a href="#如何使用【扩展二等分】？" class="headerlink" title="如何使用【扩展二等分】？"></a>如何使用【扩展二等分】？</h1><h3 id="步骤-1：打开扩展二分法工具"><a href="#步骤-1：打开扩展二分法工具" class="headerlink" title="步骤 1：打开扩展二分法工具"></a><strong>步骤 1：打开扩展二分法工具</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250717023616830.png"></p><ol><li>打开 VS Code，按图所示或按下 <code>Ctrl+Shift+P</code>（或 <code>Cmd+Shift+P</code> on Mac）打开命令面板；</li><li>输入并选择命令：<code>Extensions: Bisect</code>（扩展：二分法）；</li><li>在弹出的面板中，选择 <strong>“Start Bisect”</strong>（开始二分），启动排查流程。</li></ol><h3 id="步骤-2：按照二分法排查流程"><a href="#步骤-2：按照二分法排查流程" class="headerlink" title="步骤 2：按照二分法排查流程"></a><strong>步骤 2：按照二分法排查流程</strong></h3><p>VS Code 会自动执行以下步骤，你只需根据提示操作：</p><ol><li><strong>初始状态</strong>：工具会先禁用所有扩展，然后提示你：<em>“The bisect will now guide you through enabling subsets of your extensions to find the one causing issues.”</em>（二分法将引导你启用部分扩展，以找到问题根源）</li><li><strong>第一轮二分</strong>：工具会自动启用扩展随机分成两组（A 和 B），自动启用其中一组（例如 A 组），然后提示你：<em>“A subset of extensions has been enabled. Please check if the issue occurs now.”</em>（已启用部分扩展，请检查问题是否复现）</li><li><strong>反馈结果</strong>：此时观察是否会触发 “扩展主机意外终止”：<ul><li>若<strong>问题复现</strong>（例如再次弹出 “扩展主机主机意外终止” 提示）：在弹出的选项中选择 <strong>“Yes, the issue occurs”</strong>（是，问题出现了），工具会锁定当前启用的这组扩展为嫌疑范围；</li><li>若<strong>问题未复现</strong>：选择 <strong>“No, the issue does not occur”</strong>（否，问题未出现），工具会排除当前组，锁定另一组为嫌疑范围。</li></ul></li><li><strong>迭代缩小范围</strong>：工具会重复 “分组→启用→反馈” 的流程，每次轮都会将上一轮锁定的嫌疑范围再二分，直到最终定位到<strong>单个问题扩展</strong>。</li><li><strong>结束排查</strong>：当找到问题扩展时，工具会显示结果：<em>“Found extension causing the issue: [扩展名称]”</em>，并提示你可以禁用或卸载该扩展。</li></ol><h3 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a><strong>关键注意事项</strong></h3><ol><li><strong>保持操作一致</strong>：每轮测试时，尽量执行相同的操作（例如打开你平时会导致崩溃的项目、触发特定功能），确保结果准确。</li><li><strong>耐心完成每一轮</strong>：即使中途觉得 “可能是某个扩展”，也建议完成整个流程，避免误判（可能存在多个扩展冲突的情况）。</li><li><strong>排查后处理</strong>：找到问题扩展后，可先尝试：<ul><li>升级该扩展到最新版本（可能修复了崩溃问题）；</li><li>若升级无效，暂时禁用或卸载，并在扩展的 GitHub 仓库提交 issue 反馈。</li></ul></li></ol><p>最后，一定要卸载这个元凶插件，并永远把它拉进你的黑名单！</p>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s - 学习成长路线及常用资料参考</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/k8s%20-%20%E5%AD%A6%E4%B9%A0%E6%88%90%E9%95%BF%E8%B7%AF%E7%BA%BF%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99%E5%8F%82%E8%80%83/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/k8s%20-%20%E5%AD%A6%E4%B9%A0%E6%88%90%E9%95%BF%E8%B7%AF%E7%BA%BF%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%B5%84%E6%96%99%E5%8F%82%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>这一阶段，我们需要熟练掌握至少一个组件的原理和使用，如果你没有自己需要的或倾向的，这里比较推荐：kube-scheduler。因为企业对 Kubernetes 调度器的二次开发需求很多。另外，如果你有时间和精力也建议学习和使用某个网络插件，例如：Cilium。Cilium 功能复杂，代码量多。如果你没有特别多精力，可以学习下 flannel，建议阅读下 flannel 的源码。其他网络插件的实现原理，跟 flannel 有很多相似之处。</p><h1 id="1-源码阅读"><a href="#1-源码阅读" class="headerlink" title="1. 源码阅读"></a>1. 源码阅读</h1><h2 id="1-1-基础准备"><a href="#1-1-基础准备" class="headerlink" title="1.1. 基础准备"></a>1.1. 基础准备</h2><ol><li>**基础知识了解：**这里只推荐一本书 <a href="https://book.douban.com/subject/36926473/">Kubernetes权威指南：从Docker到Kubernetes实践全接触</a>（选择最新版本的阅读）。这本书，可以理解为是学习 Kubernetes 必备书籍。</li><li><strong>源码相关推荐书籍：</strong></li></ol><ul><li><a href="https://book.douban.com/subject/35100082/">Kubernetes源码剖析</a>，这本书解读的 Kubernetes 版本有点旧，但里面很多知识仍然适用。</li><li><a href="https://book.douban.com/subject/36978517/">深入理解Kubernetes源码 (豆瓣)</a></li></ul><h2 id="1-2-本地部署-k8s"><a href="#1-2-本地部署-k8s" class="headerlink" title="1.2. 本地部署 k8s"></a>1.2. 本地部署 k8s</h2><ul><li>todo</li></ul><h2 id="1-3-选择一个-Kubernetes-组件进行阅读"><a href="#1-3-选择一个-Kubernetes-组件进行阅读" class="headerlink" title="1.3. 选择一个 Kubernetes 组件进行阅读"></a>1.3. 选择一个 Kubernetes 组件进行阅读</h2><ol><li>**找到阅读入口：*<em>Kubernetes 源码 main 文件都保存在 cmd&#x2F;&lt;组件名&gt;&#x2F;</em>.go文件中，如果找不到，你可以直接搜：grep ‘package main’ cmd&#x2F;&lt;组件名&gt;&#x2F;*.go，来找 main 函数所在的源码文件；</li><li>**阅读 example 和单元测试用例：**Kubernetes 源码仓库下没有什么可以帮助你阅读源码的 example 文件，所以这个可以忽略。另外，Kubernetes 仓库目录下有很多单测文件，这些单测文件，我自己阅读的时候，很少去看，你可以根据需要选择去看，或者不看，也没啥影响；</li><li>**阅读代码注释：**这个很重要，Kubernetes 的源码注释都写的比较详细，而且也不是那种凑数的源码注释，很多注释是有阅读价值的。所以，你阅读源码时，有些地方不明白，可以优先看看这些注释，这也是最便捷的方式；</li><li>**借助 ChatGPT 和网络搜索：**这个根据需要自行搜索即可。我阅读源码时，偶尔会用 ChatGPT，直接把整段代码贴上去，看看 ChatGPT 的回答，如果感觉它在胡说八道，在在网上去搜下。不过一般搜不到我想要的答案。更多的时候，我对着源码硬磕，认真琢磨一会儿后，往往能够理解这些源码。</li><li>**写注解、做笔记、勤思考：**非常好的精细化阅读方法，不过我阅读的时候，很多时候是粗度，不会做这些注解和笔记。做了，我也不咋看；</li><li>**写单测协助理解代码：**也是很不错的精细化阅读方法，但我也不咋用，因为成本高；</li><li>**调试阅读：**这个我偶尔会用，在有些关键地方不明白的时候，我会在代码里加上 fmt.Println这类语句，编译、重新部署后，看看源码运行流程和效果。建议你至少魔改一次 Kubernetes 源码，编译并重新部署 Kubernetes 源码，测试看看自己的魔改效果。</li></ol><h2 id="1-4-魔改、运行并测试自己修改后的代码"><a href="#1-4-魔改、运行并测试自己修改后的代码" class="headerlink" title="1.4. 魔改、运行并测试自己修改后的代码"></a>1.4. 魔改、运行并测试自己修改后的代码</h2><h1 id="2-k8s-进阶路线"><a href="#2-k8s-进阶路线" class="headerlink" title="2. k8s 进阶路线"></a>2. k8s 进阶路线</h1><h2 id="2-1-初级阶段"><a href="#2-1-初级阶段" class="headerlink" title="2.1. 初级阶段"></a>2.1. 初级阶段</h2><ul><li>掌握 Kubernetes 基础知识<ul><li><a href="https://book.douban.com/subject/36926473/">https://book.douban.com/subject/36926473/</a></li><li><a href="https://book.douban.com/subject/35100082/">Kubernetes源码剖析</a></li></ul></li><li>学会部署 Kubernetes<ul><li>Kind：可参考 <a href="https://kind.sigs.k8s.io/docs/user/quick-start/">Quick Start</a>；</li><li>Minikube：可参考 <a href="https://minikube.sigs.k8s.io/docs/start/?arch=/windows/x86-64/stable/.exe+download">minikube start</a>；</li><li>手撸一个 Kubernetes 集群：可参考知识星球中，<strong>Kubernetes 集群安装向导</strong> 系列课程。</li></ul></li><li>掌握 Kubernetes 基本使用方式<ul><li>基本操作：可阅读 <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/">Learn Kubernetes Basics</a>，里面有很多实操的案例</li></ul></li></ul><h2 id="2-2-中级阶段"><a href="#2-2-中级阶段" class="headerlink" title="2.2. 中级阶段"></a>2.2. 中级阶段</h2><ul><li>熟悉其中至少一个组件的原理和使用方式</li><li>了解 Kubernetes 核心资源及其使用方式</li><li>能够熟练使用 Kubernetes，并排障</li><li>能够使用 client-go 操作 Kubernetes 资源</li><li>能够编写控制器</li></ul><blockquote><p>这一阶段，我们需要熟练掌握至少一个组件的原理和使用，如果你没有自己需要的或倾向的，这里比较推荐：kube-scheduler。因为企业对 Kubernetes 调度器的二次开发需求很多。另外，如果你有时间和精力也建议学习和使用某个网络插件，例如：Cilium。Cilium 功能复杂，代码量多。如果你没有特别多精力，可以学习下 flannel，建议阅读下 flannel 的源码。其他网络插件的实现原理，跟 flannel 有很多相似之处。</p></blockquote><h2 id="2-3-高级阶段"><a href="#2-3-高级阶段" class="headerlink" title="2.3 高级阶段"></a>2.3 高级阶段</h2><ul><li>对 Kubernetes 的扩展机了如指掌</li><li>能够完成其中某个扩展的设计和开发</li><li>能够熟练使用 client-go 操作 Kubernetes 资源，并了解 client-go 的原理</li><li>能够熟练开发 Operator，熟练使用相关的工具和包，最好能够掌握这些包的原理和实现</li></ul><blockquote><p>Kubernetes 这么受企业欢迎的一个原因是因为其具有强大的可扩展性。这要归功于 Kubernetes 提供了强大的 <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/">扩展机制</a>。这个阶段，我们应该能够熟悉 Kubernetes 的各种扩展机制，并根据工作需要，开发自己的 Kubernetes 扩展，满足企业的需求。这个阶段，你越来越多的从理论，走向实践。而且具备自己独立开发一个以 Kubernetes 为集基石的云原生项目。</p></blockquote><h2 id="2-4-专家阶段"><a href="#2-4-专家阶段" class="headerlink" title="2.4 专家阶段"></a>2.4 专家阶段</h2><ul><li>对 Kubernetes 很熟悉，最好是 360 度无死角的那种</li><li>了解 Kubernetes 社区，社区中相关项目的功能、使用方式、原理等</li><li>能够基于 Kubernetes 独立开发出自己的云原生项目</li></ul><h1 id="3-云原生-CNCF-其他项目学习"><a href="#3-云原生-CNCF-其他项目学习" class="headerlink" title="3. 云原生 CNCF 其他项目学习"></a>3. 云原生 CNCF 其他项目学习</h1><blockquote><p>[!info] CNCF Landscape  </p><p><a href="https://landscape.cncf.io/">https://landscape.cncf.io/</a>  </p></blockquote><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>开源项目</strong></td><td><strong>功能描述</strong></td></tr><tr><td>Helm</td><td>作为 Kubernetes 生态里的 brew、dnf、dpkg，Helm 为 Kubernetes 提供了包管理能力，方便用户快速部署安装各种服务</td></tr><tr><td>Harbor</td><td>Harbor 与 Kubernetes 无直接关系，但作为云原生环境下最常用的镜像仓库解决方案，了解 Harbor 十分重要</td></tr><tr><td>Prometheus</td><td>Prometheus 是云原生环境下最重要的监控组件</td></tr><tr><td>Istio</td><td>Istio 是服务网格的关键项目，但较为复杂，可以尝试简单了解</td></tr><tr><td>controller-runtime</td><td>Kubernetes 社区提供的一个开发框架，旨在帮助开发者快速高效地开发控制器。它是基于 client-go 构建的，通过提供一系列的工具和抽象，使得开发者可以专注于业务逻辑的实现，而不必关心控制器的生命周期管理和事件异常处理等底层细节</td></tr><tr><td>cluster-api</td><td>Cluster API 是一个 Kubernetes 项目，它将声明式 Kubernetes 风格的 API 用于集群的创建、配置和管理。它在核心 Kubernetes 之上，提供可选的附加功能来管理 Kubernetes 集群的生命周期</td></tr><tr><td>kubebuilder</td><td>kubebuilder 旨在简化 Kubernetes 应用程序控制器的开发过程。它通过提供脚手架文件和工具，使得开发者能够更容易地实现 Kubernetes API 和控制器</td></tr><tr><td>kubefed</td><td>Kubernetes Federation v2，又称 KubeFed，是 Kubernetes 官方提供的一种解决方案，用于管理跨多个 Kubernetes 集群的资源。它提供了一个单独的控制平面，用于管理和协调多个 Kubernetes 集群中的资源，从而实现集中化的控制和管理</td></tr><tr><td>kind</td><td>用来快速在本地创建一个开发、测试用的 Kubernetes 集群</td></tr><tr><td>descheduler</td><td>Descheduler 是一个用于解决 Kubernetes 集群中节点资源利用问题的工具，它通过重调度的方式来优化集群中 Pod 的分布，以改善节点资源的利用率</td></tr><tr><td>scheduler-plugins</td><td>scheduler-plugins 是 Kubernetes 调度系统中的一个重要组成部分，它允许开发者通过编写插件来扩展 Kubernetes 的调度功能。这些插件可以在 Kubernetes 调度过程中的不同阶段发挥作用，从而实现对调度逻辑的自定义和增强</td></tr><tr><td>node-feature-discovery</td><td>Node Feature Discovery（NFD）是一个由 Intel 创建的项目，旨在帮助 Kubernetes 集群更智能地管理节点资源。它通过检测每个节点的硬件特性（如 CPU 型号、GPU 型号、内存大小等），并将这些特性以标签的形式发送到 Kubernetes 集群的 API 服务器</td></tr><tr><td>kwok</td><td>轻量级的 Kubernetes 模拟集群工具</td></tr><tr><td>kustomize</td><td>Kustomize 是一个用于 Kubernetes 配置管理的工具，它允许用户通过定义基线配置和补丁来创建自定义的 Kubernetes 资源配置。Kustomize 的主要特点是其灵活性和可扩展性，使得它成为处理复杂逻辑和动态生成内容的强大工具</td></tr><tr><td>autoscaler</td><td>Cluster Autoscaler 是 Kubernetes 提供的一个集群节点弹性伸缩组件，它根据 Pod 的调度状态及资源使用情况对集群的节点进行自动扩容 &#x2F; 缩容。这个组件的主要目的是优化集群资源的利用效率，确保集群能够根据实际需求动态调整节点数量，从而更好地适应工作负载的变化</td></tr></tbody></table><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><blockquote><p>上面进阶完成后可以根据才云科技的路线进行补充学习：<a href="https://github.com/caicloud/kube-ladder">caicloud&#x2F;kube-ladder: Learning Kubernetes, The Chinese Taoist Way</a></p></blockquote><h1 id="📎-参考文章"><a href="#📎-参考文章" class="headerlink" title="📎 参考文章"></a>📎 参考文章</h1><ul><li><a href="https://articles.zsxq.com/id_ivav4uquqsqb.html">10 | Kubernetes 源码阅读方法及进阶指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang面试题整理</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/Golang%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/Golang%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-语言基础与语法（todo）"><a href="#Go-语言基础与语法（todo）" class="headerlink" title="Go 语言基础与语法（todo）"></a>Go 语言基础与语法（todo）</h1><h1 id="数据类型与数据结构（todo）"><a href="#数据类型与数据结构（todo）" class="headerlink" title="数据类型与数据结构（todo）"></a>数据类型与数据结构（todo）</h1><h2 id="new-和-make-的区别？"><a href="#new-和-make-的区别？" class="headerlink" title="new 和 make 的区别？"></a>new 和 make 的区别？</h2><blockquote><p>[!important]</p><ol><li>为什么要有new？</li><li>new和make的共同点</li><li>new和make的区别</li><li>在使用上有哪些坑</li></ol><ul><li><strong>总结</strong>：<code>new</code> 和 <code>make</code> 是 Go 语言中用于分配内存和初始化的两个重要工具，它们在功能和使用场景上有明显的区别。正确区分它们的用途可以避免很多常见的错误。</li><li><strong>最佳实践</strong>：<ul><li>使用 <code>new</code> 时，明确需要一个指针，并且初始化为零值。</li><li>使用 <code>make</code> 时，确保目标是切片、通道或映射，并正确指定初始化参数。</li><li>避免混淆两者的使用场景，牢记它们的返回值类型和适用范围。</li></ul></li></ul></blockquote><h1 id="函数与方法（todo）"><a href="#函数与方法（todo）" class="headerlink" title="函数与方法（todo）"></a>函数与方法（todo）</h1><h1 id="面向对象与接口（todo）"><a href="#面向对象与接口（todo）" class="headerlink" title="面向对象与接口（todo）"></a>面向对象与接口（todo）</h1><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="一、基础概念题（易）"><a href="#一、基础概念题（易）" class="headerlink" title="一、基础概念题（易）"></a><strong>一、基础概念题（易）</strong></h3><h4 id="1-Go语言是否支持面向对象编程？如果支持，它与传统OOP语言（如Java）有何区别？"><a href="#1-Go语言是否支持面向对象编程？如果支持，它与传统OOP语言（如Java）有何区别？" class="headerlink" title="1.Go语言是否支持面向对象编程？如果支持，它与传统OOP语言（如Java）有何区别？"></a><strong>1.Go语言是否支持面向对象编程？如果支持，它与传统OOP语言（如Java）有何区别？</strong></h4><p>（提示：Go官方答案是“是，也不是”，支持封装，通过组合替代继承，通过接口实现多态，无类和<code>implements</code>关键字）</p><h4 id="2-Go语言中如何实现“封装”？请举例说明。"><a href="#2-Go语言中如何实现“封装”？请举例说明。" class="headerlink" title="2.Go语言中如何实现“封装”？请举例说明。"></a><strong>2.Go语言中如何实现“封装”？请举例说明。</strong></h4><p>（提示：通过结构体封装数据，通过方法封装行为；结构体字段首字母大小写控制访问权限，方法与结构体绑定）</p><h4 id="3-结构体与方法的关系是什么？方法的接收者有哪两种类型？"><a href="#3-结构体与方法的关系是什么？方法的接收者有哪两种类型？" class="headerlink" title="3.结构体与方法的关系是什么？方法的接收者有哪两种类型？"></a><strong>3.结构体与方法的关系是什么？方法的接收者有哪两种类型？</strong></h4><p>（提示：方法是绑定特定接收者的函数；接收者分为值类型（<code>T</code>）和指针类型（<code>*T</code>））</p><h4 id="4-以下代码中，-SetName-方法能否修改结构体字段？为什么？"><a href="#4-以下代码中，-SetName-方法能否修改结构体字段？为什么？" class="headerlink" title="4.以下代码中，**SetName**方法能否修改结构体字段？为什么？"></a><strong>4.以下代码中，</strong><code>**SetName**</code><strong>方法能否修改结构体字段？为什么？</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123; name <span class="hljs-type">string</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> SetName(n <span class="hljs-type">string</span>) &#123; p.name = n &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    p := Person&#123;name: <span class="hljs-string">&quot;Tom&quot;</span>&#125;<br>    p.SetName(<span class="hljs-string">&quot;Jack&quot;</span>)<br>    fmt.Println(p.name) <span class="hljs-comment">// 输出什么？</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（提示：值类型接收者，修改的是副本，输出<code>Tom</code>）</p><h4 id="5-什么是接口？Go语言中接口的实现方式与Java有何不同？"><a href="#5-什么是接口？Go语言中接口的实现方式与Java有何不同？" class="headerlink" title="5.什么是接口？Go语言中接口的实现方式与Java有何不同？"></a><strong>5.什么是接口？Go语言中接口的实现方式与Java有何不同？</strong></h4><p>（提示：接口是方法集的抽象；Go采用隐式实现，无需<code>implements</code>关键字，只要类型实现接口所有方法即可）</p><h3 id="二、核心特性题（中）"><a href="#二、核心特性题（中）" class="headerlink" title="二、核心特性题（中）"></a><strong>二、核心特性题（中）</strong></h3><h4 id="1-Go语言中如何通过“组合”替代传统OOP的“继承”？请举例说明结构体嵌套的作用。"><a href="#1-Go语言中如何通过“组合”替代传统OOP的“继承”？请举例说明结构体嵌套的作用。" class="headerlink" title="1.Go语言中如何通过“组合”替代传统OOP的“继承”？请举例说明结构体嵌套的作用。"></a><strong>1.Go语言中如何通过“组合”替代传统OOP的“继承”？请举例说明结构体嵌套的作用。</strong></h4><p>（提示：结构体嵌套（匿名&#x2F;命名）实现功能复用，如<code>type Student struct &#123; Person &#125;</code>，通过“内部类型提升”访问嵌套结构体的方法）</p><h4 id="2-方法接收者选择值类型（-T-）还是指针类型（-T-）的判断依据是什么？"><a href="#2-方法接收者选择值类型（-T-）还是指针类型（-T-）的判断依据是什么？" class="headerlink" title="2.方法接收者选择值类型（**T**）还是指针类型（**T**）的判断依据是什么？"></a><strong>2.方法接收者选择值类型（</strong><code>**T**</code><strong>）还是指针类型（</strong><code>**T**</code><strong>）的判断依据是什么？</strong></h4><p>（提示：</p><ul><li>需修改接收者状态：指针类型</li><li>接收者是大型结构体：指针类型（减少复制开销）</li><li>基本类型&#x2F;引用类型（切片、映射等）：值类型</li><li>包含同步字段（如<code>sync.Mutex</code>）：指针类型）</li></ul><h4 id="3-以下代码是否正确？-Student-是否实现了-SayHello-接口？为什么？"><a href="#3-以下代码是否正确？-Student-是否实现了-SayHello-接口？为什么？" class="headerlink" title="3.以下代码是否正确？**Student**是否实现了**SayHello**接口？为什么？"></a><strong>3.以下代码是否正确？</strong><code>**Student**</code><strong>是否实现了</strong><code>**SayHello**</code><strong>接口？为什么？</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> SayHello <span class="hljs-keyword">interface</span> &#123; Hello() &#125;<br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Person)</span></span> Hello() &#123; fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>) &#125;<br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123; Person &#125;<br></code></pre></td></tr></table></figure><p>（提示：不正确。<code>Student</code>的匿名字段是<code>Person</code>（值类型），而<code>Hello</code>方法属于<code>*Person</code>，<code>Student</code>未实现<code>Hello</code>方法）</p><h4 id="4-什么是“鸭子类型”？Go语言如何通过接口支持鸭子类型？"><a href="#4-什么是“鸭子类型”？Go语言如何通过接口支持鸭子类型？" class="headerlink" title="4.什么是“鸭子类型”？Go语言如何通过接口支持鸭子类型？"></a><strong>4.什么是“鸭子类型”？Go语言如何通过接口支持鸭子类型？</strong></h4><p>（提示：“像鸭子走路、叫，就是鸭子”；Go接口关注“行为”而非“类型”，任何实现接口方法集的类型都可视为接口的实现者）</p><h4 id="5-空接口（-interface-）有何特殊之处？它能存储哪些类型的值？"><a href="#5-空接口（-interface-）有何特殊之处？它能存储哪些类型的值？" class="headerlink" title="5.空接口（**interface{}**）有何特殊之处？它能存储哪些类型的值？"></a><strong>5.空接口（</strong><code>**interface&#123;&#125;**</code><strong>）有何特殊之处？它能存储哪些类型的值？</strong></h4><p>（提示：空接口无方法，可存储任意类型的值；是Go中“任意类型”的抽象，常用于函数参数（如<code>fmt.Println</code>））</p><h3 id="三、实现原理题（难）"><a href="#三、实现原理题（难）" class="headerlink" title="三、实现原理题（难）"></a><strong>三、实现原理题（难）</strong></h3><h4 id="1-接口值的内部结构是什么？如何判断两个接口值是否相等？"><a href="#1-接口值的内部结构是什么？如何判断两个接口值是否相等？" class="headerlink" title="1.接口值的内部结构是什么？如何判断两个接口值是否相等？"></a><strong>1.接口值的内部结构是什么？如何判断两个接口值是否相等？</strong></h4><p>（提示：接口值由“动态类型+动态值”二元组组成；相等需满足动态类型和动态值均相等，<code>nil</code>接口与包裹<code>nil</code>指针的接口不等价）</p><h4 id="2-以下代码中，-i-nil-的判断结果是什么？为什么？"><a href="#2-以下代码中，-i-nil-的判断结果是什么？为什么？" class="headerlink" title="2.以下代码中，**i == nil**的判断结果是什么？为什么？"></a><strong>2.以下代码中，</strong><code>**i == nil**</code><strong>的判断结果是什么？为什么？</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> MyInterface <span class="hljs-keyword">interface</span> &#123; Do() &#125;<br><span class="hljs-keyword">type</span> MyStruct <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*MyStruct)</span></span> Do() &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> s *MyStruct = <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">var</span> i MyInterface = s<br>    fmt.Println(i == <span class="hljs-literal">nil</span>) <span class="hljs-comment">// 输出什么？</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（提示：接口值动态类型为<code>*MyStruct</code>，动态值为<code>nil</code>，故<code>i != nil</code>，输出<code>false</code>）</p><h4 id="3-方法接收者为值类型和指针类型时，编译器会做哪些隐式转换？"><a href="#3-方法接收者为值类型和指针类型时，编译器会做哪些隐式转换？" class="headerlink" title="3.方法接收者为值类型和指针类型时，编译器会做哪些隐式转换？"></a><strong>3.方法接收者为值类型和指针类型时，编译器会做哪些隐式转换？</strong></h4><p>（提示：</p><ul><li>指针类型变量调用值接收者方法：自动转换为<code>p</code></li><li>值类型变量调用指针接收者方法：仅当值可寻址时转换（如<code>&amp;p</code>），字面量不可寻址会报错）</li></ul><h4 id="4-接口组合的作用是什么？请举例说明如何通过接口组合扩展功能。"><a href="#4-接口组合的作用是什么？请举例说明如何通过接口组合扩展功能。" class="headerlink" title="4.接口组合的作用是什么？请举例说明如何通过接口组合扩展功能。"></a><strong>4.接口组合的作用是什么？请举例说明如何通过接口组合扩展功能。</strong></h4><p>（提示：接口组合实现“行为复用”，如<code>type ReadWriter interface &#123; Reader; Writer &#125;</code>，组合<code>Reader</code>和<code>Writer</code>接口）</p><h4 id="5-类型断言的两种方式是什么？如何判断断言是否成功？"><a href="#5-类型断言的两种方式是什么？如何判断断言是否成功？" class="headerlink" title="5.类型断言的两种方式是什么？如何判断断言是否成功？"></a><strong>5.类型断言的两种方式是什么？如何判断断言是否成功？</strong></h4><p>（提示：</p><ul><li>直接断言：<code>t, ok := i.(Type)</code>（<code>ok</code>为<code>bool</code>）</li><li>类型分支：<code>switch t := i.(type) &#123; case Type: ... &#125;</code>）</li></ul><h3 id="四、最佳实践与设计题（进阶）"><a href="#四、最佳实践与设计题（进阶）" class="headerlink" title="四、最佳实践与设计题（进阶）"></a><strong>四、最佳实践与设计题（进阶）</strong></h3><h4 id="1-在设计接口时，应遵循哪些原则？请举例说明“最小接口原则”。"><a href="#1-在设计接口时，应遵循哪些原则？请举例说明“最小接口原则”。" class="headerlink" title="1.在设计接口时，应遵循哪些原则？请举例说明“最小接口原则”。"></a><strong>1.在设计接口时，应遵循哪些原则？请举例说明“最小接口原则”。</strong></h4><p>（提示：关注“行为”而非“类型”，接口方法集应最小化；例如<code>io.Reader</code>仅包含<code>Read</code>方法，适用于所有读操作）</p><h4 id="2-如何通过接口实现多态？请用代码示例说明。"><a href="#2-如何通过接口实现多态？请用代码示例说明。" class="headerlink" title="2.如何通过接口实现多态？请用代码示例说明。"></a><strong>2.如何通过接口实现多态？请用代码示例说明。</strong></h4><p>（提示：定义接口，不同类型实现接口方法，通过接口变量调用不同实现，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> Shape <span class="hljs-keyword">interface</span> &#123; Area() <span class="hljs-type">float64</span> &#125;<br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span>&#123; radius <span class="hljs-type">float64</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Circle)</span></span> Area() <span class="hljs-type">float64</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * c.radius * c.radius &#125;<br><span class="hljs-comment">// 再定义Rectangle实现Area，通过Shape变量调用实现多态</span><br><span class="hljs-string">``</span><span class="hljs-string">`）</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h4 id="3-Go语言中为什么推荐“组合优于继承”？请对比两者的优缺点。"><a href="#3-Go语言中为什么推荐“组合优于继承”？请对比两者的优缺点。" class="headerlink" title="3.Go语言中为什么推荐“组合优于继承”？请对比两者的优缺点。"></a><strong>3.Go语言中为什么推荐“组合优于继承”？请对比两者的优缺点。</strong></h4><p>（提示：组合是“has-a”关系，耦合低，灵活；继承是“is-a”关系，耦合高，易导致类爆炸；Go通过结构体嵌套实现组合）</p><h4 id="4-以下代码存在什么问题？如何修复？"><a href="#4-以下代码存在什么问题？如何修复？" class="headerlink" title="4.以下代码存在什么问题？如何修复？"></a><strong>4.以下代码存在什么问题？如何修复？</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123; Eat() &#125;<br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dog)</span></span> Eat() &#123; fmt.Println(<span class="hljs-string">&quot;Dog eat&quot;</span>) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Feed</span><span class="hljs-params">(a Animal)</span></span> &#123; a.Eat() &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    d := Dog&#123;&#125;<br>    Feed(d) <span class="hljs-comment">// 编译报错？为什么？</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（提示：<code>Dog</code>的值类型未实现<code>Animal</code>，<code>Eat</code>方法属于<code>*Dog</code>；修复：<code>Feed(&amp;d)</code>）</p><h4 id="5-在并发场景中，若结构体包含-sync-Mutex-，其方法接收者应选择值类型还是指针类型？为什么？"><a href="#5-在并发场景中，若结构体包含-sync-Mutex-，其方法接收者应选择值类型还是指针类型？为什么？" class="headerlink" title="5.在并发场景中，若结构体包含**sync.Mutex**，其方法接收者应选择值类型还是指针类型？为什么？"></a><strong>5.在并发场景中，若结构体包含</strong><code>**sync.Mutex**</code><strong>，其方法接收者应选择值类型还是指针类型？为什么？</strong></h4><p>（提示：指针类型；值类型会复制锁，导致同步失效）</p><h3 id="五、原理与扩展题（进阶-）"><a href="#五、原理与扩展题（进阶-）" class="headerlink" title="五、原理与扩展题（进阶+）"></a><strong>五、原理与扩展题（进阶+）</strong></h3><h4 id="1-接口的“动态类型”和“动态值”在运行时如何存储？空接口与非空接口的内存布局有何差异？"><a href="#1-接口的“动态类型”和“动态值”在运行时如何存储？空接口与非空接口的内存布局有何差异？" class="headerlink" title="1.接口的“动态类型”和“动态值”在运行时如何存储？空接口与非空接口的内存布局有何差异？"></a><strong>1.接口的“动态类型”和“动态值”在运行时如何存储？空接口与非空接口的内存布局有何差异？</strong></h4><p>（提示：非空接口包含类型指针和数据指针；空接口仅需存储数据指针，无方法表）</p><h4 id="2-为什么说“接口由使用者定义”是Go的设计哲学？请结合标准库举例。"><a href="#2-为什么说“接口由使用者定义”是Go的设计哲学？请结合标准库举例。" class="headerlink" title="2.为什么说“接口由使用者定义”是Go的设计哲学？请结合标准库举例。"></a><strong>2.为什么说“接口由使用者定义”是Go的设计哲学？请结合标准库举例。</strong></h4><p>（提示：接口应根据使用场景抽象，如<code>io.Reader</code>由使用者（如<code>os.File</code>）实现，而非接口定义者强制）</p><h4 id="3-如何判断一个类型是否实现了某个接口？编译期和运行期分别有哪些检查机制？"><a href="#3-如何判断一个类型是否实现了某个接口？编译期和运行期分别有哪些检查机制？" class="headerlink" title="3.如何判断一个类型是否实现了某个接口？编译期和运行期分别有哪些检查机制？"></a><strong>3.如何判断一个类型是否实现了某个接口？编译期和运行期分别有哪些检查机制？</strong></h4><p>（提示：编译期检查方法签名是否匹配；运行期通过类型断言或<code>reflect</code>包判断）</p><h4 id="4-Go语言中如何实现“接口继承”？请举例说明接口的组合。"><a href="#4-Go语言中如何实现“接口继承”？请举例说明接口的组合。" class="headerlink" title="4.Go语言中如何实现“接口继承”？请举例说明接口的组合。"></a><strong>4.Go语言中如何实现“接口继承”？请举例说明接口的组合。</strong></h4><p>（提示：接口嵌套实现组合，如<code>type ReadCloser interface &#123; Reader; Closer &#125;</code>）</p><h4 id="5-对比Go与Java在面向对象编程上的3个核心差异，并分析Go的设计优势。"><a href="#5-对比Go与Java在面向对象编程上的3个核心差异，并分析Go的设计优势。" class="headerlink" title="5.对比Go与Java在面向对象编程上的3个核心差异，并分析Go的设计优势。"></a><strong>5.对比Go与Java在面向对象编程上的3个核心差异，并分析Go的设计优势。</strong></h4><p>（提示：隐式接口实现、组合替代继承、无类层次结构；优势：低耦合、高灵活、简化多态实现）</p><h1 id="包与依赖管理"><a href="#包与依赖管理" class="headerlink" title="包与依赖管理"></a>包与依赖管理</h1><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><h2 id="1-什么是context？它的主要作用是什么？"><a href="#1-什么是context？它的主要作用是什么？" class="headerlink" title="1. 什么是context？它的主要作用是什么？"></a>1. 什么是<code>context</code>？它的主要作用是什么？</h2><h2 id="2-context-Background-和context-TODO-有什么区别？"><a href="#2-context-Background-和context-TODO-有什么区别？" class="headerlink" title="2. context.Background()和context.TODO()有什么区别？"></a>2. <code>context.Background()</code>和<code>context.TODO()</code>有什么区别？</h2><h2 id="3-context包提供了哪些创建子context的函数？它们的作用分别是什么？"><a href="#3-context包提供了哪些创建子context的函数？它们的作用分别是什么？" class="headerlink" title="3. context包提供了哪些创建子context的函数？它们的作用分别是什么？"></a>3. <code>context</code>包提供了哪些创建子<code>context</code>的函数？它们的作用分别是什么？</h2><h2 id="4-context如何实现取消信号的传递？"><a href="#4-context如何实现取消信号的传递？" class="headerlink" title="4. context如何实现取消信号的传递？"></a>4. <code>context</code>如何实现取消信号的传递？</h2><h2 id="5-WithCancel返回的CancelFunc有什么特点？调用后会发生什么？"><a href="#5-WithCancel返回的CancelFunc有什么特点？调用后会发生什么？" class="headerlink" title="5. WithCancel返回的CancelFunc有什么特点？调用后会发生什么？"></a>5. <code>WithCancel</code>返回的<code>CancelFunc</code>有什么特点？调用后会发生什么？</h2><h2 id="6-context-WithValue传递的数据有什么限制？如何正确使用？"><a href="#6-context-WithValue传递的数据有什么限制？如何正确使用？" class="headerlink" title="6. context.WithValue传递的数据有什么限制？如何正确使用？"></a>6. <code>context.WithValue</code>传递的数据有什么限制？如何正确使用？</h2><h2 id="7-如何利用context防止goroutine泄漏？"><a href="#7-如何利用context防止goroutine泄漏？" class="headerlink" title="7. 如何利用context防止goroutine泄漏？"></a>7. 如何利用<code>context</code>防止goroutine泄漏？</h2><h2 id="8-context的底层数据结构有哪些？分别对应什么类型的context？"><a href="#8-context的底层数据结构有哪些？分别对应什么类型的context？" class="headerlink" title="8. context的底层数据结构有哪些？分别对应什么类型的context？"></a>8. <code>context</code>的底层数据结构有哪些？分别对应什么类型的<code>context</code>？</h2><h2 id="9-context的取消机制是如何保证线程安全的？"><a href="#9-context的取消机制是如何保证线程安全的？" class="headerlink" title="9. context的取消机制是如何保证线程安全的？"></a>9. <code>context</code>的取消机制是如何保证线程安全的？</h2><h2 id="10-timerCtx的超时取消是如何实现的？"><a href="#10-timerCtx的超时取消是如何实现的？" class="headerlink" title="10. timerCtx的超时取消是如何实现的？"></a>10. <code>timerCtx</code>的超时取消是如何实现的？</h2><h2 id="11-使用context有哪些最佳实践？"><a href="#11-使用context有哪些最佳实践？" class="headerlink" title="11. 使用context有哪些最佳实践？"></a>11. 使用<code>context</code>有哪些最佳实践？</h2><h2 id="12-context的取消信号是建议性的还是强制性的？为什么？"><a href="#12-context的取消信号是建议性的还是强制性的？为什么？" class="headerlink" title="12. context的取消信号是建议性的还是强制性的？为什么？"></a>12. <code>context</code>的取消信号是建议性的还是强制性的？为什么？</h2><h2 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a>GMP</h2><h3 id="一、底层原理与基础概念（面试初期，考察基础知识掌握）"><a href="#一、底层原理与基础概念（面试初期，考察基础知识掌握）" class="headerlink" title="一、底层原理与基础概念（面试初期，考察基础知识掌握）"></a><strong>一、底层原理与基础概念（面试初期，考察基础知识掌握）</strong></h3><h3 id="1-请简述-Golang-的-GMP-调度模型是什么？"><a href="#1-请简述-Golang-的-GMP-调度模型是什么？" class="headerlink" title="1. 请简述 Golang 的 GMP 调度模型是什么？"></a><strong>1. 请简述 Golang 的 GMP 调度模型是什么？</strong></h3><blockquote><p>核心知识点：GMP 模型的定义（Go 语言实现并发的调度模型）、核心组成（G、M、P）、设计目标（高效调度 goroutine，平衡 CPU 利用率与并发性能）。</p></blockquote><h3 id="2-Golang-中-G、M、P-分别代表什么？它们各自的作用是什么？"><a href="#2-Golang-中-G、M、P-分别代表什么？它们各自的作用是什么？" class="headerlink" title="2. Golang 中 G、M、P 分别代表什么？它们各自的作用是什么？"></a><strong>2. Golang 中 G、M、P 分别代表什么？它们各自的作用是什么？</strong></h3><blockquote><p>核心知识点：</p><ul><li>G（Goroutine）：协程，轻量级执行单元，包含栈、状态等信息；</li><li>M（Machine）：操作系统线程，执行具体代码；</li><li>P（Processor）：逻辑处理器，连接 G 和 M 的中间层，包含本地队列、调度器状态等；三者的基础职责与依赖关系。</li></ul></blockquote><h3 id="3-Golang-的线程实现模型有哪些？1-1-关系、N-1-关系、M-N-关系之间有什么区别？"><a href="#3-Golang-的线程实现模型有哪些？1-1-关系、N-1-关系、M-N-关系之间有什么区别？" class="headerlink" title="3. Golang 的线程实现模型有哪些？1:1 关系、N:1 关系、M:N 关系之间有什么区别？"></a><strong>3. Golang 的线程实现模型有哪些？1:1 关系、N:1 关系、M:N 关系之间有什么区别？</strong></h3><blockquote><p>核心知识点：</p><ul><li>三种模型定义（1:1：用户线程与内核线程一一对应；N:1：多用户线程映射到 1 个内核线程；M:N：多用户线程映射到多内核线程）；</li><li>各模型的优缺点（如 1:1 的 OS 调度开销、N:1 的并发限制、M:N 的平衡优势）；</li><li>GMP 属于 M:N 模型的原因。</li></ul></blockquote><h3 id="4-在-GMP-模型中，P-和-M-的个数是如何确定的？P-和-M-何时会被创建？"><a href="#4-在-GMP-模型中，P-和-M-的个数是如何确定的？P-和-M-何时会被创建？" class="headerlink" title="4. 在 GMP 模型中，P 和 M 的个数是如何确定的？P 和 M 何时会被创建？"></a><strong>4. 在 GMP 模型中，P 和 M 的个数是如何确定的？P 和 M 何时会被创建？</strong></h3><blockquote><p>核心知识点：</p><ul><li>P 的数量：默认由 GOMAXPROCS 控制（通常等于 CPU 核心数），可通过环境变量或代码设置；</li><li>M 的数量：动态创建，默认无上限（受系统限制），当 P 的本地队列有 G 但无可用 M 时创建新 M，或回收空闲 M；</li><li>两者创建的触发条件（如启动时初始化 P，运行中因 G 等待 &#x2F; 唤醒创建 M）。</li></ul></blockquote><h3 id="5-Golang-调度器的设计策略是什么？请详细说明其工作原理。"><a href="#5-Golang-调度器的设计策略是什么？请详细说明其工作原理。" class="headerlink" title="5. Golang 调度器的设计策略是什么？请详细说明其工作原理。"></a><strong>5. Golang 调度器的设计策略是什么？请详细说明其工作原理。</strong></h3><blockquote><p>核心知识点：</p><ul><li>主要策略：复用线程、减少阻塞、局部性调度（优先本地队列）、work stealing 等；</li><li>工作流程：G 的创建与入队、P 选择 G 分配给 M 执行、G 阻塞 &#x2F; 唤醒时的调度切换逻辑。</li></ul></blockquote><h3 id="6-为什么-Golang-协程比线程轻量？从-GMP-模型角度解释。"><a href="#6-为什么-Golang-协程比线程轻量？从-GMP-模型角度解释。" class="headerlink" title="6. 为什么 Golang 协程比线程轻量？从 GMP 模型角度解释。"></a><strong>6. 为什么 Golang 协程比线程轻量？从 GMP 模型角度解释。</strong></h3><blockquote><p>核心知识点：</p><ul><li>内存占用：G 的栈初始小（2KB）且动态伸缩，线程栈固定且大；</li><li>调度开销：G 由用户态调度器（基于 P）管理，无需内核态切换；</li><li>资源复用：M 可被多个 G 复用，减少 OS 线程创建销毁成本。</li></ul></blockquote><h3 id="7-在-GMP-模型中，全局队列和本地队列的作用是什么？它们如何协同工作？"><a href="#7-在-GMP-模型中，全局队列和本地队列的作用是什么？它们如何协同工作？" class="headerlink" title="7. 在 GMP 模型中，全局队列和本地队列的作用是什么？它们如何协同工作？"></a><strong>7. 在 GMP 模型中，全局队列和本地队列的作用是什么？它们如何协同工作？</strong></h3><blockquote><p>核心知识点：</p><ul><li>本地队列：每个 P 维护的 G 队列，优先调度（减少锁竞争，提高局部性）；</li><li>全局队列：存放未分配到 P 的 G，当本地队列空时 P 会从全局队列获取 G；</li><li>协同机制：G 创建时优先入本地队列，本地队列满则入全局队列；P 调度时先查本地队列，再查全局队列。</li></ul></blockquote><h3 id="8-请解释-Golang-中的-work-stealing-机制，它是如何实现的？"><a href="#8-请解释-Golang-中的-work-stealing-机制，它是如何实现的？" class="headerlink" title="8. 请解释 Golang 中的 work stealing 机制，它是如何实现的？"></a><strong>8. 请解释 Golang 中的 work stealing 机制，它是如何实现的？</strong></h3><blockquote><p>核心知识点：</p><ul><li>定义：当一个 P 的本地队列无 G 可执行时，从其他 P 的本地队列 “偷取” G 执行；</li><li>实现逻辑：偷取时优先从其他 P 队列尾部取一半 G，减少竞争；触发条件（本地队列空、全局队列空）。</li></ul></blockquote><h3 id="9-GMP-模型中的-G、M、P-三者之间是如何交互的？请描述一个-goroutine-从创建到执行完毕的完整流程。"><a href="#9-GMP-模型中的-G、M、P-三者之间是如何交互的？请描述一个-goroutine-从创建到执行完毕的完整流程。" class="headerlink" title="9. GMP 模型中的 G、M、P 三者之间是如何交互的？请描述一个 goroutine 从创建到执行完毕的完整流程。"></a><strong>9. GMP 模型中的 G、M、P 三者之间是如何交互的？请描述一个 goroutine 从创建到执行完毕的完整流程</strong>。</h3><blockquote><p>核心知识点：</p><ul><li>交互关系：P 绑定 M，G 需关联 P 才能被 M 执行；</li><li>完整流程：G 创建→入本地 &#x2F; 全局队列→P 选择 G 绑定到 M 执行→G 阻塞时 M 解绑 P 并休眠（或执行其他 G）→G 唤醒后重新入队→执行完毕回收资源.</li></ul></blockquote><h3 id="二、实际应用场景（面试中期，考察知识落地能力）"><a href="#二、实际应用场景（面试中期，考察知识落地能力）" class="headerlink" title="二、实际应用场景（面试中期，考察知识落地能力）"></a><strong>二、实际应用场景（面试中期，考察知识落地能力）</strong></h3><h3 id="1-在实际开发中，如何设置-GOMAXPROCS？它对程序性能有什么影响？"><a href="#1-在实际开发中，如何设置-GOMAXPROCS？它对程序性能有什么影响？" class="headerlink" title="1. 在实际开发中，如何设置 GOMAXPROCS？它对程序性能有什么影响？"></a><strong>1. 在实际开发中，如何设置 GOMAXPROCS？它对程序性能有什么影响？</strong></h3><blockquote><p>核心知识点：</p><ul><li>设置方式：通过<code>runtime.GOMAXPROCS(n)</code>或环境变量<code>GOMAXPROCS</code>；</li><li>影响：过小则 CPU 利用率低（P 不足），过大则增加 P 间调度开销；</li><li>最佳实践：默认等于 CPU 核心数，CPU 密集型可设为核心数，IO 密集型可适当增大。</li></ul></blockquote><h3 id="2-在高并发场景下，Golang-的-GMP-模型如何保证程序的高效运行？"><a href="#2-在高并发场景下，Golang-的-GMP-模型如何保证程序的高效运行？" class="headerlink" title="2. 在高并发场景下，Golang 的 GMP 模型如何保证程序的高效运行？"></a><strong>2. 在高并发场景下，Golang 的 GMP 模型如何保证程序的高效运行？</strong></h3><blockquote><p>核心知识点：</p><ul><li>轻量 G 支持高并发（百万级 G）；</li><li>M:N 调度减少内核切换；</li><li>work stealing 平衡各 P 负载；</li><li>P 的本地队列减少锁竞争；</li><li>G 阻塞时 M 复用（不阻塞其他 G）。</li></ul></blockquote><h3 id="3-在什么情况下会发生-goroutine-泄漏？如何通过-GMP-模型理解并避免这种情况？"><a href="#3-在什么情况下会发生-goroutine-泄漏？如何通过-GMP-模型理解并避免这种情况？" class="headerlink" title="3. 在什么情况下会发生 goroutine 泄漏？如何通过 GMP 模型理解并避免这种情况？"></a><strong>3. 在什么情况下会发生 goroutine 泄漏？如何通过 GMP 模型理解并避免这种情况？</strong></h3><blockquote><p>核心知识点：</p><ul><li>泄漏场景：G 陷入无限循环、等待未发送的 channel、未关闭的资源阻塞；</li><li>GMP 角度：泄漏的 G 会一直占用 P 的队列或内存，导致资源浪费，甚至 P 被长期占用；</li><li>避免方式：设置超时机制、确保 channel 正确关闭、使用 context 控制生命周期。</li></ul></blockquote><h3 id="4-如何监控和调试-Golang-程序中的-goroutine-调度情况？请列举常用的工具和方法。"><a href="#4-如何监控和调试-Golang-程序中的-goroutine-调度情况？请列举常用的工具和方法。" class="headerlink" title="4. 如何监控和调试 Golang 程序中的 goroutine 调度情况？请列举常用的工具和方法。"></a><strong>4. 如何监控和调试 Golang 程序中的 goroutine 调度情况？请列举常用的工具和方法。</strong></h3><blockquote><p>核心知识点：</p><ul><li>工具：<code>go tool trace</code>（生成调度轨迹）、<code>pprof</code>（CPU&#x2F;goroutine 分析）、<code>go vet</code>；</li><li>方法：打印 goroutine 数量（<code>runtime.NumGoroutine()</code>）、分析死锁（<code>go test -race</code>）、追踪 P&#x2F;M 状态。</li></ul></blockquote><h3 id="5-在实际项目中，如何利用-Golang-的并发特性提高程序性能？请结合-GMP-模型进行分析。"><a href="#5-在实际项目中，如何利用-Golang-的并发特性提高程序性能？请结合-GMP-模型进行分析。" class="headerlink" title="5. 在实际项目中，如何利用 Golang 的并发特性提高程序性能？请结合 GMP 模型进行分析。"></a><strong>5. 在实际项目中，如何利用 Golang 的并发特性提高程序性能？请结合 GMP 模型进行分析。</strong></h3><blockquote><p>核心知识点：</p><ul><li>合理拆分任务为多个 G，利用 P 的并行能力；</li><li>避免 G 过度创建（控制数量，减少调度开销）；</li><li>利用 channel 同步 G，避免共享内存竞争；</li><li>根据任务类型（CPU&#x2F;IO 密集）调整 GOMAXPROCS。</li></ul></blockquote><h3 id="6-针对-CPU-密集型和-IO-密集型任务，如何通过调整-GMP-模型的参数来优化程序性能？"><a href="#6-针对-CPU-密集型和-IO-密集型任务，如何通过调整-GMP-模型的参数来优化程序性能？" class="headerlink" title="6. 针对 CPU 密集型和 IO 密集型任务，如何通过调整 GMP 模型的参数来优化程序性能？"></a><strong>6. 针对 CPU 密集型和 IO 密集型任务，如何通过调整 GMP 模型的参数来优化程序性能？</strong></h3><blockquote><p>核心知识点：</p><ul><li>CPU 密集型：GOMAXPROCS 设为 CPU 核心数（减少 P 切换开销），控制 G 数量（避免过多 G 竞争 P）；</li><li>IO 密集型：适当增大 GOMAXPROCS（利用 IO 等待时的空闲 P），允许更多 G（IO 等待时 G 挂起，不占用 M）。</li></ul></blockquote><h3 id="7-如何理解-cpu-密集型任务和-IO-密集型任务？"><a href="#7-如何理解-cpu-密集型任务和-IO-密集型任务？" class="headerlink" title="7. 如何理解 cpu 密集型任务和 IO 密集型任务？"></a>7. 如何理解 cpu 密集型任务和 IO 密集型任务？</h3><blockquote><p>CPU密集型和IO密集型是描述程序运行时资源消耗特征的两种典型场景，核心区别在于程序的时间主要消耗在<strong>CPU计算</strong>还是<strong>IO等待</strong>上。</p><p><strong>1. CPU密集型（CPU-bound）</strong></p><ul><li><p><strong>定义</strong>：程序的主要时间消耗在<strong>CPU计算</strong>上（如逻辑运算、数据处理、复杂算法等），CPU利用率通常很高（接近100%），而IO操作（如读写文件、网络请求）占比极低。</p></li><li><p><strong>典型场景</strong>：</p><ul><li>数学计算（如矩阵运算、加密解密、大数据统计）；</li><li>图像&#x2F;视频处理（如像素渲染、编码解码）；</li><li>复杂逻辑处理（如高频交易的实时计算）。</li></ul></li><li><p><strong>特点</strong>：</p><ul><li>任务执行效率主要依赖CPU性能（主频、核心数）；</li><li>过多的并发（如创建大量线程&#x2F;协程）会导致CPU上下文切换频繁，反而降低效率（因为CPU本身已处于满负荷状态）。</li></ul></li></ul><p><strong>2. IO密集型（IO-bound）</strong></p><ul><li><strong>定义</strong>：程序的主要时间消耗在<strong>IO等待</strong>上（如等待磁盘读写、网络响应、数据库查询结果等），而CPU计算时间占比很低，大部分时间CPU处于空闲状态（等待IO完成）。</li><li><strong>典型场景</strong>：<ul><li>网络通信（如HTTP服务、RPC调用、爬虫）；</li><li>数据库操作（如查询、插入数据）；</li><li>文件读写（如日志记录、大文件传输）。</li></ul></li><li><strong>特点</strong>：<ul><li>任务执行效率主要依赖IO设备的性能（如磁盘读写速度、网络带宽）；</li><li>适合通过<strong>高并发</strong>（如多线程&#x2F;协程）掩盖IO等待时间：在一个任务等待IO时，CPU可以切换到其他任务执行，提高CPU利用率。</li></ul></li></ul><h3 id="核心区别总结"><a href="#核心区别总结" class="headerlink" title="核心区别总结"></a><strong>核心区别总结</strong></h3><table><thead><tr><th>维度</th><th>CPU密集型</th><th>IO密集型</th></tr></thead><tbody><tr><td>时间消耗占比</td><td>主要消耗在CPU计算</td><td>主要消耗在IO等待</td></tr><tr><td>CPU利用率</td><td>接近100%</td><td>较低（大部分时间空闲）</td></tr><tr><td>性能瓶颈</td><td>CPU性能（核心数、主频）</td><td>IO设备性能（磁盘、网络等）</td></tr><tr><td>并发策略</td><td>并发数不宜过多（避免切换开销）</td><td>高并发更有效（掩盖IO等待）</td></tr></tbody></table><h3 id="结合Golang的GMP模型理解"><a href="#结合Golang的GMP模型理解" class="headerlink" title="结合Golang的GMP模型理解"></a><strong>结合Golang的GMP模型理解</strong></h3><ul><li><p><strong>CPU密集型任务</strong>：</p><p>  由于任务主要占用CPU，G（协程）会长期绑定P（处理器）和M（系统线程）执行计算。此时需合理设置<code>GOMAXPROCS</code>（通常等于CPU核心数），避免P过多导致CPU切换频繁，反而降低效率。</p></li><li><p><strong>IO密集型任务</strong>：</p><p>  当G执行IO操作时，会被挂起（脱离P和M），P和M可以调度其他就绪的G执行，待IO完成后G再重新加入就绪队列。因此，即使创建大量G（协程），也不会过度消耗系统资源（因为挂起的G几乎不占CPU），通过高并发有效利用了CPU空闲时间。</p></li></ul><p>理解这两种场景的差异，有助于在实际开发中优化程序的并发策略（如调整<code>GOMAXPROCS</code>、控制协程数量等），提升性能。</p></blockquote><h3 id="三、综合应用与架构设计（面试后期，考察深度理解与系统思维）"><a href="#三、综合应用与架构设计（面试后期，考察深度理解与系统思维）" class="headerlink" title="三、综合应用与架构设计（面试后期，考察深度理解与系统思维）"></a><strong>三、综合应用与架构设计（面试后期，考察深度理解与系统思维）</strong></h3><h3 id="1-在分布式系统中，Golang-的-GMP-模型如何帮助处理大量并发连接？请结合实际案例说明。"><a href="#1-在分布式系统中，Golang-的-GMP-模型如何帮助处理大量并发连接？请结合实际案例说明。" class="headerlink" title="1. 在分布式系统中，Golang 的 GMP 模型如何帮助处理大量并发连接？请结合实际案例说明。"></a><strong>1. 在分布式系统中，Golang 的 GMP 模型如何帮助处理大量并发连接？请结合实际案例说明。</strong></h3><blockquote><p>核心知识点：</p><ul><li>大量并发连接对应大量 G（轻量，内存可控）；</li><li>M:N 调度使每个连接的 IO 操作不阻塞其他连接；</li><li>案例：如 Go 实现的 Web 服务器（如 Gin），单进程可处理十万级连接，依赖 GMP 高效调度。</li></ul></blockquote><h3 id="2-当程序出现性能瓶颈时，如何从-GMP-模型的角度进行分析和优化？"><a href="#2-当程序出现性能瓶颈时，如何从-GMP-模型的角度进行分析和优化？" class="headerlink" title="2. 当程序出现性能瓶颈时，如何从 GMP 模型的角度进行分析和优化？"></a><strong>2. 当程序出现性能瓶颈时，如何从 GMP 模型的角度进行分析和优化？</strong></h3><blockquote><p>核心知识点：</p><ul><li>分析方向：P 利用率（是否不足或过度）、G 阻塞情况（是否有大量 G 等待）、M 创建是否过多（系统线程开销）；</li><li>优化手段：调整 GOMAXPROCS、减少 G 阻塞时间（如异步 IO）、避免 G 泄漏、平衡 P 负载。</li></ul></blockquote><h3 id="3-在微服务架构中，如何合理利用-Golang-的-GMP-模型来设计高并发服务？"><a href="#3-在微服务架构中，如何合理利用-Golang-的-GMP-模型来设计高并发服务？" class="headerlink" title="3. 在微服务架构中，如何合理利用 Golang 的 GMP 模型来设计高并发服务？"></a><strong>3. 在微服务架构中，如何合理利用 Golang 的 GMP 模型来设计高并发服务？</strong></h3><blockquote><p>核心知识点：</p><ul><li>服务拆分：每个微服务实例利用 P 并行处理请求；</li><li>资源隔离：不同业务用独立 P 池（通过 GOMAXPROCS 隔离）；</li><li>流量控制：限制 G 数量避免 P 过载；</li><li>异步处理：非核心流程用 G 异步执行，不阻塞主流程。</li></ul></blockquote><h1 id="内存管理与垃圾回收"><a href="#内存管理与垃圾回收" class="headerlink" title="内存管理与垃圾回收"></a>内存管理与垃圾回收</h1><h2 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h2><h3 id="1-什么是逃逸分析？其核心作用是什么？"><a href="#1-什么是逃逸分析？其核心作用是什么？" class="headerlink" title="1.什么是逃逸分析？其核心作用是什么？"></a>1.什么是逃逸分析？其核心作用是什么？</h3><blockquote><p>逃逸分析是编译器在静态代码分析阶段对变量内存分配位置（堆或栈）进行的优化判断机制。在 Go 语言中，变量的内存分配并非由开发者显式指定（如 C&#x2F;C++ 中的<code>malloc</code>或<code>new</code>），而是由编译器通过逃逸分析决定：若变量的指针被多个方法或线程引用（即变量生命周期超出当前函数范围），则称该变量发生 “逃逸”，会被分配到堆上；反之则优先分配到栈上。</p><p>简单来说，逃逸分析的核心逻辑是：编译器通过判断变量是否在函数外部被引用，决定其分配位置 —— 函数外部无引用则优先分配到栈，有引用则必定分配到堆（特殊情况如大型数组因栈空间不足也可能分配到堆）。</p></blockquote><blockquote><ol><li><strong>优化内存分配，提升程序性能:</strong> 栈内存分配和释放效率远高于堆（栈通过<code>PUSH</code>指令完成分配，函数退出后自动释放；堆需寻找合适内存块且依赖垃圾回收释放）。逃逸分析能将无需分配到堆的变量留在栈上，减少堆内存使用，降低堆分配开销。</li><li><strong>减少垃圾回收（GC）: 压力</strong>堆上的变量需要通过 GC 回收，若大量变量逃逸到堆，会导致 GC 频繁触发，增加系统开销。逃逸分析通过控制堆上变量数量，减轻 GC 负担，提高程序运行效率。</li><li><strong>简化内存管理:</strong> 开发者无需手动管理内存（如 C&#x2F;C++ 中的手动释放），编译器通过逃逸分析自动决定变量分配位置，减少内存泄漏风险，让开发者更专注于业务逻辑。</li></ol></blockquote><blockquote><p>核心目标是在保证程序正确性的前提下，通过优先使用栈内存提升性能、减少 GC 压力，同时简化开发者的内存管理工作</p></blockquote><h3 id="2-栈和堆的区别？逃逸分析如何影响性能？"><a href="#2-栈和堆的区别？逃逸分析如何影响性能？" class="headerlink" title="2.栈和堆的区别？逃逸分析如何影响性能？"></a>2.栈和堆的区别？逃逸分析如何影响性能？</h3><blockquote><p>[!important]</p><h3 id="栈和堆的区别"><a href="#栈和堆的区别" class="headerlink" title="栈和堆的区别"></a><strong>栈和堆的区别</strong></h3><ol><li><strong>分配与释放方式</strong><ul><li>栈：通过<code>PUSH</code>指令快速分配内存，函数执行结束后自动释放，无需手动管理。</li><li>堆：需要寻找合适的内存块进行分配，释放依赖垃圾回收（GC），过程复杂且耗时。</li></ul></li><li><strong>性能</strong><ul><li>栈：分配和释放速度极快，适合已知大小、生命周期短的变量。</li><li>堆：分配速度较慢，可能产生内存碎片，且 GC 会带来额外开销。</li></ul></li><li><strong>内存管理主体</strong><ul><li>栈：由编译器自动管理，内存空间连续，大小固定（通常较小）。</li><li>堆：由 Go 运行时管理，内存空间不连续，大小动态变化，可分配较大内存。</li></ul></li></ol></blockquote><blockquote><p>[!important]</p><h3 id="逃逸分析对性能的影响"><a href="#逃逸分析对性能的影响" class="headerlink" title="逃逸分析对性能的影响"></a><strong>逃逸分析对性能的影响</strong></h3><ol><li><strong>减少堆内存分配，降低 GC 压力:</strong> 逃逸分析将未逃逸的变量分配到栈上，减少堆上变量数量。堆上变量减少会降低 GC 的扫描和回收成本，减少 GC 对程序运行的干扰，提升性能。</li><li><strong>提升内存操作效率:</strong> 栈的分配和释放效率远高于堆。通过逃逸分析，更多变量可在栈上处理，避免堆分配的内存块查找、碎片整理等耗时操作，加快程序执行速度。</li><li><strong>避免不必要的堆分配:</strong> 即使使用<code>new</code>函数创建的变量，若编译器通过逃逸分析判断其在函数退出后无外部引用，仍会分配到栈上，减少堆内存占用和分配开销。</li><li><strong>特殊情况的优化限制:</strong> 若变量过大（超过栈的存储能力），即使未逃逸也会分配到堆上，避免栈溢出。这种情况下，逃逸分析确保了程序稳定性，但可能增加堆操作的性能开销。</li></ol></blockquote><h3 id="3-逃逸分析是怎么完成的？如何确定是否发生逃逸（如何验证代码中是否发生逃逸）？"><a href="#3-逃逸分析是怎么完成的？如何确定是否发生逃逸（如何验证代码中是否发生逃逸）？" class="headerlink" title="3.逃逸分析是怎么完成的？如何确定是否发生逃逸（如何验证代码中是否发生逃逸）？"></a>3.逃逸分析是怎么完成的？如何确定是否发生逃逸（如何验证代码中是否发生逃逸）？</h3><blockquote><p>[!important]</p><ol><li><strong>基本原则</strong>：Go 语言逃逸分析最基本的原则是，如果一个函数返回对一个变量的引用，那么这个变量就会发生逃逸。</li><li><strong>分析逻辑</strong>：编译器会分析代码的特征和变量的生命周期。Go 中的变量只有在编译器可以证明在函数返回后不会再被引用的情况下，才会分配到栈上，其他情况下都会分配到堆上。</li><li><strong>判断依据</strong>：编译器会根据变量是否被外部引用来决定是否逃逸：<ul><li>如果变量在函数外部没有引用，则优先放到栈上。</li><li>如果变量在函数外部存在引用，则必定放到堆上。</li><li>特殊情况：若定义了一个很大的数组，需要申请的内存过大，超过了栈的存储能力，即使变量在函数外部没有引用，也会放到堆上。</li></ul></li></ol></blockquote><blockquote><p>[!important]</p><h3 id="如何确定是否发生逃逸（验证方法）"><a href="#如何确定是否发生逃逸（验证方法）" class="headerlink" title="如何确定是否发生逃逸（验证方法）"></a><strong>如何确定是否发生逃逸（验证方法）</strong></h3><ol><li><strong>使用</strong><code>**go build**</code><strong>命令搭配</strong><code>**gcflags**</code><strong>参数</strong>：通过<code>go build -gcflags &#39;-m -l&#39; 文件名.go</code>命令可以查看编译器的优化细节，包括逃逸分析结果。其中，<code>m</code>用于输出编译器的优化细节（包括逃逸分析），<code>l</code>用于禁用函数内联优化，防止逃逸被编译器通过内联彻底抹除。</li></ol><p>执行命令后，输出中若出现 “escapes to heap” 相关内容，如 “&amp;t escapes to heap”“moved to heap: t”，则表明变量<code>t</code>发生了逃逸.  </p><ol start="2"><li><strong>使用反汇编命令</strong>：执行<code>go tool compile -S 文件名.go</code>命令，查看反汇编结果。若结果中出现<code>newobject</code>函数，该函数用于在堆上分配一块内存，说明对应的变量被存放到了堆上，即发生了逃逸</li></ol></blockquote><h3 id="4-golang-中-new-的变量是在堆上还是在栈上？"><a href="#4-golang-中-new-的变量是在堆上还是在栈上？" class="headerlink" title="4.golang 中 new 的变量是在堆上还是在栈上？"></a>4.golang 中 new 的变量是在堆上还是在栈上？</h3><blockquote><p>在 Go 语言中，使用<code>new</code>函数创建的变量究竟分配在堆上还是栈上，并非由<code>new</code>函数本身决定，而是由编译器的逃逸分析结果决定。</p><ul><li>若编译器通过逃逸分析判断，<code>new</code>创建的变量在函数返回后不会被外部引用，那么该变量会被分配到栈上。</li><li>若分析发现变量在函数外部存在引用（即发生逃逸），则会被分配到堆上。</li></ul><p>例如，当<code>new</code>创建的变量作为函数返回值（指针）被外部接收时，变量会逃逸到堆上；而若变量仅在函数内部使用，无外部引用，则可能分配在栈上。</p><p>简言之，<code>new</code>只是用于分配内存并返回指针的工具，其创建的变量的内存位置，完全由变量是否逃逸决定。</p></blockquote><h3 id="5-列举5种常见的逃逸场景"><a href="#5-列举5种常见的逃逸场景" class="headerlink" title="5.列举5种常见的逃逸场景"></a>5.列举5种常见的逃逸场景</h3><blockquote><p>根据《Go程序员面试笔试宝典》的内容，以下是5种常见的逃逸场景：</p><ol><li><p><strong>函数返回局部变量的指针</strong></p><p> 当函数返回对局部变量的引用（指针）时，该变量会发生逃逸。因为编译器无法保证函数退出后该变量不再被外部引用，只能将其分配到堆上。例如：</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br>    t := <span class="hljs-number">3</span><br>    <span class="hljs-keyword">return</span> &amp;t <span class="hljs-comment">// t 逃逸到堆</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>变量被外部函数引用（如闭包）</strong></p><p> 若局部变量被闭包捕获并在函数外部使用，变量会逃逸。闭包的生命周期可能长于函数，变量需在堆上分配以保证后续访问有效。</p></li><li><p><strong>变量类型为切片、映射等引用类型且被外部使用</strong></p><p> 切片、映射等引用类型的底层数据结构（如切片的数组指针）若被函数外部引用，其底层内存会逃逸到堆上。即使变量本身是局部的，只要外部持有其引用，就会触发逃逸。</p></li><li><p><strong>变量大小超过栈的存储能力</strong></p><p> 当定义大型数组或结构体（如占用内存超过栈的默认容量）时，即使变量未被外部引用，也会因栈空间不足而逃逸到堆上。</p></li><li><p><strong>参数为接口类型且无法在编译期确定具体类型</strong></p><p> 当变量作为参数传入<code>interface&#123;&#125;</code>类型的函数（如<code>fmt.Println</code>）时，由于编译期难以确定具体类型，变量可能逃逸到堆上。例如：</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    t := <span class="hljs-number">3</span><br>    fmt.Println(t) <span class="hljs-comment">// t 可能逃逸，因 fmt.Println 参数为 interface&#123;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p> 这类场景中，编译器无法提前确定变量的具体类型，导致变量逃逸。</p></li></ol></blockquote><h3 id="6-逃逸分析与GC的关系？如何权衡逃逸与性能？"><a href="#6-逃逸分析与GC的关系？如何权衡逃逸与性能？" class="headerlink" title="6.逃逸分析与GC的关系？如何权衡逃逸与性能？"></a>6.逃逸分析与GC的关系？如何权衡逃逸与性能？</h3><blockquote><p>[!important]</p><h3 id="一、逃逸分析与GC的关系"><a href="#一、逃逸分析与GC的关系" class="headerlink" title="一、逃逸分析与GC的关系"></a>一、逃逸分析与GC的关系</h3><ol><li><p><strong>逃逸分析直接影响GC的工作量</strong></p><p> 逃逸分析决定变量分配在堆上还是栈上：栈上的变量会随函数退出自动释放，无需GC参与；而堆上的变量需要通过GC回收。</p><ul><li>若变量未逃逸（分配在栈上）：GC无需扫描和回收该变量，减少GC的处理对象。</li><li>若变量逃逸（分配在堆上）：GC需要跟踪其生命周期并在合适时机回收，增加GC的负担。</li></ul></li><li><p><strong>逃逸变量的数量影响GC效率</strong></p><p> 大量变量逃逸到堆上会导致堆内存占用增加，GC需要扫描的范围扩大，回收频率可能升高，进而影响程序性能。</p></li></ol><h3 id="二、如何权衡逃逸与性能"><a href="#二、如何权衡逃逸与性能" class="headerlink" title="二、如何权衡逃逸与性能"></a>二、如何权衡逃逸与性能</h3><ol><li><p><strong>减少不必要的逃逸，降低GC压力</strong></p><ul><li>避免函数返回局部变量的指针（除非必要），减少堆上变量的产生。</li><li>避免将局部变量通过闭包或接口传递到外部（如非必要不使用<code>fmt.Println</code>等含<code>interface&#123;&#125;</code>参数的函数，减少因类型不确定导致的逃逸）。</li></ul></li><li><p><strong>允许合理的逃逸，保证程序正确性</strong></p><ul><li>当变量需要被外部引用（如作为返回值供后续使用），必须允许其逃逸到堆上，这是功能实现的必要代价。</li><li>大型变量（如大数组）即使未被外部引用，也可能因栈空间不足而逃逸，此时需接受堆分配以避免栈溢出。</li></ul></li><li><p><strong>通过工具分析逃逸情况，针对性优化</strong></p><p> 使用<code>go build -gcflags &#39;-m -l&#39;</code>命令查看逃逸分析结果，识别不必要的逃逸变量（如意外被闭包捕获的局部变量），通过调整代码逻辑（如避免闭包引用、拆分大型结构体）减少堆分配，平衡逃逸与GC性能。</p></li></ol><p>综上，逃逸分析通过控制堆上变量的数量影响GC效率，权衡的核心是：在保证程序功能正确的前提下，通过减少不必要的逃逸降低GC压力，同时接受必要的逃逸以满足业务需求。</p></blockquote><h3 id="7-除了上述题目，需要知道常见的逃逸场景，避免在面试中遇到面试官给的-code-无法判断是否存在逃逸。"><a href="#7-除了上述题目，需要知道常见的逃逸场景，避免在面试中遇到面试官给的-code-无法判断是否存在逃逸。" class="headerlink" title="7.除了上述题目，需要知道常见的逃逸场景，避免在面试中遇到面试官给的 code 无法判断是否存在逃逸。"></a>7.除了上述题目，需要知道常见的逃逸场景，避免在面试中遇到面试官给的 code 无法判断是否存在逃逸。</h3><blockquote><p>略</p></blockquote><h3 id="8-如何手动控制内存逃逸分析-noescape"><a href="#8-如何手动控制内存逃逸分析-noescape" class="headerlink" title="8.如何手动控制内存逃逸分析 - noescape"></a>8.如何手动控制内存逃逸分析 - noescape</h3><blockquote><p>在《Go程序员面试笔试宝典》中，关于手动控制内存逃逸分析的内容主要与<code>unsafe</code>包的使用相关，而<code>noescape</code>的核心思想是通过特定手段让编译器认为指针不会逃逸，从而将变量分配到栈上（而非堆上）。以下是结合文档的具体说明：</p><h3 id="1-noescape的本质与作用"><a href="#1-noescape的本质与作用" class="headerlink" title="1. noescape的本质与作用"></a>1. <code>noescape</code>的本质与作用</h3><p><code>noescape</code>并非Go语言直接提供的公开函数，而是通过<code>unsafe</code>包的特性实现的一种技巧：通过隐藏指针的外部引用关系，让编译器的逃逸分析认为变量未被外部引用，从而将其分配到栈上，避免因逃逸导致的堆分配和GC开销。</p><p>其核心逻辑是：使用<code>unsafe.Pointer</code>对指针进行转换，切断编译器对指针引用关系的追踪，使编译器无法检测到变量被外部引用，进而不触发逃逸。</p><h3 id="2-基于unsafe包手动控制逃逸的方式（类似noescape的实现）"><a href="#2-基于unsafe包手动控制逃逸的方式（类似noescape的实现）" class="headerlink" title="2. 基于unsafe包手动控制逃逸的方式（类似noescape的实现）"></a>2. 基于<code>unsafe</code>包手动控制逃逸的方式（类似<code>noescape</code>的实现）</h3><p>根据文档中对<code>unsafe</code>包的介绍（第6章），<code>unsafe.Pointer</code>可直接操作内存地址，绕过Go的类型系统，这种特性可用于影响编译器的逃逸分析判断：</p><ul><li>当通过<code>unsafe.Pointer</code>将局部变量的指针转换为不被编译器追踪的形式时，编译器可能无法检测到该指针被外部引用，从而将变量分配到栈上。</li></ul><p>示例代码（原理示意）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;unsafe&quot;</span><br><br><span class="hljs-comment">// noescape 隐藏指针的外部引用，阻止逃逸</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">noescape</span><span class="hljs-params">(p unsafe.Pointer)</span></span> unsafe.Pointer &#123;<br>    x := <span class="hljs-type">uintptr</span>(p)<br>    <span class="hljs-comment">// 通过uintptr转换切断指针关联，编译器无法追踪</span><br>    <span class="hljs-keyword">return</span> unsafe.Pointer(x ^ <span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> unsafe.Pointer &#123;<br>    <span class="hljs-keyword">var</span> local <span class="hljs-type">int</span> = <span class="hljs-number">10</span><br>    <span class="hljs-comment">// 用noescape处理局部变量指针，编译器认为其未被外部引用</span><br>    <span class="hljs-keyword">return</span> noescape(unsafe.Pointer(&amp;local))<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，<code>noescape</code>通过<code>uintptr</code>转换切断了<code>unsafe.Pointer</code>与原变量的关联，编译器无法检测到<code>local</code>的指针被外部返回，因此可能将<code>local</code>分配到栈上（而非堆上）。</p><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h3><ul><li><strong>文档强调</strong>：<code>unsafe</code>包的使用会绕过Go的类型安全检查，可能导致未定义行为，需谨慎使用（第6章）。</li><li><code>noescape</code>类操作仅在特定场景下有效（如确保指针确实不会被外部长期引用），若实际存在外部引用，可能导致内存安全问题（如变量已被栈释放但仍被访问）。</li></ul><p>综上，手动控制内存逃逸分析（类似<code>noescape</code>）的核心是利用<code>unsafe</code>包切断编译器对指针引用关系的追踪，使变量优先分配到栈上，但需严格遵循内存安全原则。</p></blockquote><h1 id="测试与错误处理"><a href="#测试与错误处理" class="headerlink" title="测试与错误处理"></a>测试与错误处理</h1><h1 id="实战与工具链"><a href="#实战与工具链" class="headerlink" title="实战与工具链"></a>实战与工具链</h1><h1 id="底层原理与优化"><a href="#底层原理与优化" class="headerlink" title="底层原理与优化"></a>底层原理与优化</h1><h1 id="Golang-面试题分类参考"><a href="#Golang-面试题分类参考" class="headerlink" title="Golang 面试题分类参考"></a>Golang 面试题分类参考</h1><h3 id="一、Go-语言基础与语法"><a href="#一、Go-语言基础与语法" class="headerlink" title="一、Go 语言基础与语法"></a>一、Go 语言基础与语法</h3><ul><li>包含：Go 语言的起源与特点（设计哲学、核心优势）、基本语法（关键字、变量 &#x2F; 常量声明、类型系统）、运算符与流程控制（循环、条件、switch）、注释与命名规范等。</li></ul><h3 id="二、数据类型与数据结构"><a href="#二、数据类型与数据结构" class="headerlink" title="二、数据类型与数据结构"></a>二、数据类型与数据结构</h3><ul><li>包含：基本类型（整型、浮点型、布尔型、字符串等）、复合类型（数组、切片、映射）、结构体（定义、初始化、嵌套、内存对齐）、指针（指针类型、指针运算、nil 指针）等。</li></ul><h3 id="三、函数与方法"><a href="#三、函数与方法" class="headerlink" title="三、函数与方法"></a>三、函数与方法</h3><ul><li>包含：函数定义与调用（参数、返回值、多返回值）、匿名函数与闭包、方法（接收者、值语义与指针语义）、defer 关键字（执行时机、使用场景、陷阱）、函数类型与回调等。</li></ul><h3 id="四、面向对象与接口"><a href="#四、面向对象与接口" class="headerlink" title="四、面向对象与接口"></a>四、面向对象与接口</h3><ul><li>包含：封装（结构体 + 方法）、组合与继承（Go 的 “继承” 实现方式）、接口（定义、隐式实现、鸭子类型）、接口值（动态类型与动态值）、类型断言与类型转换、空接口等。</li></ul><h3 id="五、包与依赖管理"><a href="#五、包与依赖管理" class="headerlink" title="五、包与依赖管理"></a>五、包与依赖管理</h3><ul><li>包含：包的概念（定义、导入、可见性）、Go Module（初始化、依赖管理、版本控制）、包加载顺序与 init 函数、第三方包使用等。</li></ul><h3 id="六、并发编程"><a href="#六、并发编程" class="headerlink" title="六、并发编程"></a>六、并发编程</h3><ul><li>包含：协程（goroutine）、通道（channel，创建、读写、关闭、缓冲）、GPM 调度模型、同步机制（Mutex、RWMutex、WaitGroup、ErrGroup）、并发模式（生产者 - 消费者、工作池等）、select 语句等。</li></ul><h3 id="七、内存管理与垃圾回收"><a href="#七、内存管理与垃圾回收" class="headerlink" title="七、内存管理与垃圾回收"></a>七、内存管理与垃圾回收</h3><ul><li>包含：内存分配（栈与堆）、内存逃逸分析（触发条件、影响）、垃圾回收机制（三色标记、STW、混合写屏障）、内存泄漏（原因与避免）、unsafe 包（Pointer、Sizeof 等）等。</li></ul><h3 id="八、测试与错误处理"><a href="#八、测试与错误处理" class="headerlink" title="八、测试与错误处理"></a>八、测试与错误处理</h3><ul><li>包含：单元测试（testing 包、子测试）、基准测试（性能分析）、错误处理（error 接口、自定义错误、panic 与 recover）、日志系统（标准库 log 与第三方框架）等。</li></ul><h3 id="九、实战与工具链"><a href="#九、实战与工具链" class="headerlink" title="九、实战与工具链"></a>九、实战与工具链</h3><ul><li>包含：Go 工具链（go build&#x2F;run&#x2F;test&#x2F;get 等命令）、跨平台编译、性能分析工具（pprof、trace）、序列化与反序列化（JSON 等）、常见实战场景（文件操作、网络编程等）。</li></ul><h3 id="十、底层原理与优化"><a href="#十、底层原理与优化" class="headerlink" title="十、底层原理与优化"></a>十、底层原理与优化</h3><ul><li>包含：Go 程序执行流程（编译、链接、执行）、函数调用栈（栈帧）、调度器原理、编译器优化（函数内联等）、代码优化技巧（减少内存分配、并发控制等）。</li></ul><p>该分类既遵循 Go 语言的知识逻辑（从基础到高级，从语法到原理），又突出面试高频考点（如并发、接口、内存管理等），便于系统梳理和针对性复习。</p><h1 id="📎-参考资料"><a href="#📎-参考资料" class="headerlink" title="📎 参考资料"></a>📎 参考资料</h1><ul><li><a href="https://github.com/mmungdong/book">mmungdong&#x2F;book: 收集的一些书籍和资料</a></li><li><a href="https://mp.weixin.qq.com/s/_FTvpvLIWfYzgNhOJgKypA">万字解析 golang netpoll 底层原理</a></li><li><a href="https://articles.zsxq.com/id_zxg9w7exp342.html">Go 语言 fsm 源码解读，这一次让你彻底学会有限状态机</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 学习笔记</title>
    <link href="/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/React%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/React%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-初始化-React-项目"><a href="#1-初始化-React-项目" class="headerlink" title="1. 初始化 React 项目"></a>1. 初始化 React 项目</h1><h2 id="1-React-脚手架-create-react-app-初始化项目"><a href="#1-React-脚手架-create-react-app-初始化项目" class="headerlink" title="1. React 脚手架 create-react-app 初始化项目"></a>1. <strong>React 脚手架 create-react-app 初始化项目</strong></h2><h3 id="1-node-安装"><a href="#1-node-安装" class="headerlink" title="1. node 安装"></a>1. node 安装</h3><p>下载地址：<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a></p><p>版本选择：最新版带有LTS（稳定版）的。</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802155412382.png"></p><p>node下载好之后会自动带一个npm的包管理工具。</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802155450481.png"></p><h3 id="2-React脚手架-create-react-app"><a href="#2-React脚手架-create-react-app" class="headerlink" title="2. React脚手架 create-react-app"></a>2. React脚手架 create-react-app</h3><ol><li><strong>下载脚手架</strong></li></ol><p>npm 下载react脚手架</p><p><code>npm install create-react-app -g</code></p><p>查看react脚手架版本</p><p><code>create-react-app --version</code></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802155749281.png"></p><ol><li><strong>通过脚手架创建项目</strong></li></ol><p>create-react-app 【项目名】，项目名不可以包含大写字母</p><p>这里创建过慢需要设置下淘宝源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">npm config set registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p><code>create-react-app learn_react_scaffold</code></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802155856043.png"></p><ol><li><strong>项目启动</strong></li></ol><p>通过运行<code>npm run start</code>运行项目。</p><p>react-scripts 命令集成了webpack的打包方式。</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802155929953.png"></p><ol><li><strong>项目目录结构</strong></li></ol><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802160014826.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802160035630.png"></p><h1 id="2-组件化开发"><a href="#2-组件化开发" class="headerlink" title="2. 组件化开发"></a>2. 组件化开发</h1><h2 id="1-React组件划分"><a href="#1-React组件划分" class="headerlink" title="1. React组件划分"></a>1. React组件划分</h2><ul><li>根据组件的定义方式，划分为<strong>函数组件</strong>和<strong>类组件</strong>。</li><li>根据组件内部是否有状体需要维护，划分为<strong>无状态组件</strong>和<strong>有状态组件</strong>。</li><li>根据组件的不同职责，划分为<strong>展示型组件</strong>和<strong>容器型组件。</strong></li><li><strong>函数组件，无状态组件和展示型组件</strong>主要关注ui展示。</li><li><strong>类组件，有状态组件和容器型组件主要关注数据逻辑。</strong></li></ul><h2 id="2-类组件要求"><a href="#2-类组件要求" class="headerlink" title="2. 类组件要求"></a>2. 类组件要求</h2><ul><li><strong>组件的名称必须是大写字母开头</strong>。（无论是类组件还是函数式组件）</li><li>类组件需要继承自 <strong>React.Component</strong>。</li><li>类组件必须实现 <strong>render</strong> 函数。</li></ul><h2 id="3-Helloworld（类组件的封装细节）"><a href="#3-Helloworld（类组件的封装细节）" class="headerlink" title="3. Helloworld（类组件的封装细节）"></a>3. Helloworld（类组件的封装细节）</h2><h3 id="1-install"><a href="#1-install" class="headerlink" title="1. install"></a>1. install</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换至淘宝源</span><br>npm config set registry https://registry.npmmirror.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 create-react-app 创建 react 项目</span><br>npx create-react-app 03-react-component<br></code></pre></td></tr></table></figure><h3 id="2-项目结构"><a href="#2-项目结构" class="headerlink" title="2. 项目结构"></a>2. 项目结构</h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802160546687.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span><br><br><span class="hljs-comment">// 编写react代码，并进行渲染</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">react.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br> &#125;<br><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">react.Component</span> &#123;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;hello world&quot;</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 渲染</span><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; message &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>        <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br> &#125;<br><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloWorld</span><br></code></pre></td></tr></table></figure><h3 id="3-react-scripts-命令对应的-webpack-配置"><a href="#3-react-scripts-命令对应的-webpack-配置" class="headerlink" title="3. react-scripts 命令对应的 webpack 配置"></a>3. react-scripts 命令对应的 webpack 配置</h3><p>webpack配置默认隐藏：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802160828040.png"></p><ul><li>弹出对应配置：</li></ul><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">npm run eject<br></code></pre></td></tr></table></figure><p>弹出webpack配置</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802160954820.png"></p><p>文件变动：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161033090.png"></p><h3 id="4-render-函数的返回值"><a href="#4-render-函数的返回值" class="headerlink" title="4. render 函数的返回值"></a>4. render 函数的返回值</h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161107628.png"></p><h2 id="4-函数式组件的封装"><a href="#4-函数式组件的封装" class="headerlink" title="4. 函数式组件的封装"></a>4. <strong>函数式组件的封装</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-comment">// 函数式组件和 render 的返回值一样</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>React functional App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-类组件的生命周期"><a href="#5-类组件的生命周期" class="headerlink" title="5. 类组件的生命周期"></a>5. <strong>类组件的生命周期</strong></h2><blockquote><p>参考：<a href="https://zh-hans.react.dev/reference/react/Component">Component – React 中文文档</a></p></blockquote><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161440462.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161502753.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161529169.png"></p><h3 id="1-常用的生命周期代码示例"><a href="#1-常用的生命周期代码示例" class="headerlink" title="1. 常用的生命周期代码示例"></a><strong>1. 常用的生命周期代码示例</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161715426.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./HelloWorld&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">isShowHW</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">switchHWShow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">isShowHW</span>: !<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isShowHW</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; isShowHW &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.switchHWShow()&#125;&gt;切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123; isShowHW &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> /&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><br>    <span class="hljs-comment">// 1. 构造方法</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world constructor ~&quot;</span>)<br><br>        <span class="hljs-variable language_">super</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;hello world&quot;</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">changeText</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;你好👋，李银河！&quot;</span><br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 执行render函数</span><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world render ~&quot;</span>)<br>        <span class="hljs-keyword">const</span> &#123; message &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123; message &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">e</span> =&gt;</span> this.changeText() &#125;&gt;点击修改文本<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 组件被挂载到DOM中时，会执行该生命周期函数</span><br>    <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world componentDidMount ~&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 组件的DOM更新完成：DOM发生更新</span><br>    <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState, snapshot</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world componentDidUpdate: &quot;</span>, prevProps, prevState, snapshot)<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 组件即将从DOM中卸载时：从DOM中移除</span><br>    <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world componentWillUnmount ~&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 不常用到的生命周期</span><br>    <span class="hljs-comment">// 判断是否需要重新渲染界面（是否需要重新执行render函数）</span><br>    <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world shouldComponentUpdate ~&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-comment">// 在更新前保存一些数据</span><br>    <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world getSnapshotBeforeUpdate ~&quot;</span>)<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">scrollPosition</span>: <span class="hljs-number">1000</span>,<br>            <span class="hljs-attr">prevMessage</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">message</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloWorld</span><br></code></pre></td></tr></table></figure><p>初次页面：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161840774.png"></p><p>点击修改文本：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161906731.png"></p><p>点击切换：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802161947474.png"></p><h3 id="2-常用的生命周期详解"><a href="#2-常用的生命周期详解" class="headerlink" title="2. 常用的生命周期详解"></a><strong>2. 常用的生命周期详解</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802162031720.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802162105619.png"></p><h3 id="3-不常用的生命周期函数"><a href="#3-不常用的生命周期函数" class="headerlink" title="3. 不常用的生命周期函数"></a><strong>3. 不常用的生命周期函数</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802162229762.png"></p><h2 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h2><h3 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1. 父传子"></a>1. 父传子</h3><ul><li>通过props传递数据</li></ul><h3 id="2-父传子代码示例"><a href="#2-父传子代码示例" class="headerlink" title="2. 父传子代码示例"></a>2. 父传子代码示例</h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802162337980.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./c-cpns/Father&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Father</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Children</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Children&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;父组件&#x27;</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;我是父组件的数据&#x27;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; message, title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是父组件<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Children</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&#123;message&#125;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Father</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Children</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props)<br>    <span class="hljs-variable language_">super</span>(props)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; message, title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>父组件中的tilte：&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>父组件中的message：&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Children</span><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802162500799.png"></p><h3 id="3-类型校验"><a href="#3-类型校验" class="headerlink" title="3. 类型校验"></a><strong>3. 类型校验</strong></h3><blockquote><p>参考：<a href="https://zh-hans.legacy.reactjs.org/docs/typechecking-with-proptypes.html">使用 PropTypes 进行类型检查 – React (reactjs.org)</a></p></blockquote><h3 id="4-子传父"><a href="#4-子传父" class="headerlink" title="4. 子传父"></a><strong>4. 子传父</strong></h3><p>• 通过从父组件中传递过来的函数将参数传递进去实现通信</p><p><strong>子传父代码示例:</strong></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802162656554.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AddCounter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./AddCounter&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">100</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; counter &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        counter: &#123; counter &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">AddCounter</span> <span class="hljs-attr">addCounter</span>=<span class="hljs-string">&#123;(number)</span>=&gt;</span> this.setState(&#123; counter: counter + number &#125;)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddCounter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">addCounter</span>(<span class="hljs-params">count</span>) &#123;<br>    <span class="hljs-comment">// 组件通信-子传父</span><br>    <span class="hljs-comment">// 组件通信直接从props中获取父组件传递过来的函数来通信</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">addCounter</span>(count)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addCounter(1)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addCounter(5)&#125;&gt;+5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addCounter(10)&#125;&gt;+10<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">AddCounter</span><br></code></pre></td></tr></table></figure><h2 id="7-组件的插槽实现"><a href="#7-组件的插槽实现" class="headerlink" title="7. 组件的插槽实现"></a><strong>7. 组件的插槽实现</strong></h2><h3 id="7-1-实现方式一（不推荐）"><a href="#7-1-实现方式一（不推荐）" class="headerlink" title="7.1. 实现方式一（不推荐）"></a><strong>7.1. 实现方式一（不推荐）</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802162859283.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./nav-bar&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>插槽1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>插槽2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>插槽3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;prop-types&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 实现方式一：从 this.props.children 中取得传递的组件/值</span><br>    <span class="hljs-keyword">const</span> &#123; children &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>1. 可以通过数组的形式取得子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children[0]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children[1]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children[2]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2. 可以通过遍历的形式取得子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        &#123;React.Children.map(children, (child, index) =&gt; &#123;</span><br><span class="language-xml">          return (</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;child&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          )</span><br><span class="language-xml">        &#125;)&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>3. 直接获取 children<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 指定传入插槽的传入类型为数组，如果不符合，会在控制台报警告，</span><br><span class="hljs-comment">// 出于性能方面的考虑，propTypes 仅在开发模式下进行检查</span><br><span class="hljs-title class_">NavBar</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">array</span>,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">NavBar</span><br></code></pre></td></tr></table></figure><h3 id="2-实现方式二（推荐）"><a href="#2-实现方式二（推荐）" class="headerlink" title="2. 实现方式二（推荐）"></a><strong>2. 实现方式二（推荐）</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163006211.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NavBarTwo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./nav-bar-two&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBarTwo</span> <span class="hljs-attr">firstSlot</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">div</span>&gt;</span>我是插槽1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125; secondSlot=&#123;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是插槽2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125; thirdSlot=&#123;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是插槽3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBarTwo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; firstSlot, secondSlot, thirdSlot &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;firstSlot&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;secondSlot&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;thirdSlot&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">NavBarTwo</span><br></code></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a><strong>3. 作用域插槽</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163145744.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./nav-bar&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">selectChange</span>(<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)<br>    <span class="hljs-keyword">switch</span> (item) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;home&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span> &#x27;<span class="hljs-attr">red</span>&#x27;&#125;&#125;&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;about&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span> &#x27;<span class="hljs-attr">skyblue</span>&#x27;&#125;&#125;&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;contact&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span> &#x27;<span class="hljs-attr">black</span>&#x27;&#125;&#125;&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#123;item</span> =&gt;</span> this.selectChange(item)&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NavBar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; slot &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;slot(&quot;about&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">NavBar</span><br></code></pre></td></tr></table></figure><h2 id="8-非父子组件通信-Context"><a href="#8-非父子组件通信-Context" class="headerlink" title="8. 非父子组件通信 - Context"></a><strong>8. 非父子组件通信 - Context</strong></h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a><strong>1. 作用</strong></h3><p>• 非父子组件间的数据共享</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163314731.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163330667.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163351806.png"></p><h3 id="2-类组件中使用-Context"><a href="#2-类组件中使用-Context" class="headerlink" title="2. 类组件中使用 Context"></a><strong>2. 类组件中使用 Context</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163442294.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 1. 先声明一个context</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title function_">createContext</span>()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ThemeContext</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/theme-context&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Home&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">info</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-attr">level</span>: <span class="hljs-string">&#x27;高级&#x27;</span> &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; info &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        // 2. 在context中存值</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;color:</span> &quot;<span class="hljs-attr">red</span>&quot;, <span class="hljs-attr">size:</span> &quot;<span class="hljs-attr">30</span>&quot;&#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> &#123;<span class="hljs-attr">...info</span>&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Home</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/theme-context&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;我是Home组件&#x27;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">const</span> &#123;color, size&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123; title &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>下面是 ThemeContext 中的数据：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 第一种写法： */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            (ctx) =&gt; &#123;</span><br><span class="language-xml">              return (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>color: &#123; ctx.color &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>size: &#123; ctx.size &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 第二种写法： */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第二种写法：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>color: &#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>size: &#123;size&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Home</span>.<span class="hljs-property">contextType</span> = <span class="hljs-title class_">ThemeContext</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163548963.png"></p><h3 id="3-函数式组件获取-context-中的数据"><a href="#3-函数式组件获取-context-中的数据" class="headerlink" title="3. 函数式组件获取 context 中的数据"></a><strong>3. 函数式组件获取 context 中的数据</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163547853.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/theme-context&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeBanner</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./HomeBanner&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">info</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-attr">level</span>: <span class="hljs-string">&#x27;高级&#x27;</span> &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; info &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;color:</span> &quot;<span class="hljs-attr">red</span>&quot;, <span class="hljs-attr">size:</span> &quot;<span class="hljs-attr">30</span>&quot;&#125;&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> &#123;<span class="hljs-attr">...info</span>&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Home</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/theme-context&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">HomeBanner</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HomeBanner 函数式组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          (ctx) =&gt; &#123;</span><br><span class="language-xml">            return (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>color: &#123; ctx.color &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>size: &#123; ctx.size &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            )</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HomeBanner</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163729208.png"></p><h3 id="4-context-中的默认值设置"><a href="#4-context-中的默认值设置" class="headerlink" title="4. context 中的默认值设置"></a><strong>4. context 中的默认值设置</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163809368.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-comment">// 1. 在创建的conntext时候设置默认值，</span><br><span class="hljs-comment">// 注意后面使用时 ThemeContext.Provider 中只要设置了value属性，这里设置的所有默认值都会被覆盖掉</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ThemeContext</span> = <span class="hljs-title function_">createContext</span>(&#123;<span class="hljs-attr">nickname</span>: <span class="hljs-string">&#x27;coderwhy&#x27;</span>, <span class="hljs-attr">level</span>: <span class="hljs-string">&#x27;高级&#x27;</span>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ThemeContext</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/theme-context&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Profile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Profile<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            (ctx) =&gt; &#123;</span><br><span class="language-xml">              return (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>nickname: &#123; ctx.nickname &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>level: &#123; ctx.level &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Profile</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163901155.png"></p><h3 id="5-多个-context-使用"><a href="#5-多个-context-使用" class="headerlink" title="5. 多个 context 使用"></a><strong>5. 多个 context 使用</strong></h3><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802163932163.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">UserContext</span> = <span class="hljs-title function_">createContext</span>()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">UserContext</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/theme-context&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeBanner</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./HomeBanner&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Profile</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Profile&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/user-context&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">info</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-attr">level</span>: <span class="hljs-string">&#x27;高级&#x27;</span> &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; info &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;color:</span> &quot;<span class="hljs-attr">red</span>&quot;, <span class="hljs-attr">size:</span> &quot;<span class="hljs-attr">30</span>&quot;&#125;&#125;&gt;</span></span><br><span class="language-xml">          // 这里多个context嵌套使用</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">UserContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;name:</span> &quot;<span class="hljs-attr">wuyanzu</span>&quot;, <span class="hljs-attr">age:</span> &quot;<span class="hljs-attr">18</span>&quot;&#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> &#123;<span class="hljs-attr">...info</span>&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Home</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">HomeBanner</span>/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">UserContext.Provider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Provider</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Profile</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemeContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/theme-context&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserContext</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./context/user-context&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;我是Home组件&#x27;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">const</span> &#123;color, size&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123; title &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>下面是 ThemeContext 中的数据：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 第一种写法： */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            (ctx) =&gt; &#123;</span><br><span class="language-xml">              return (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>color: &#123; ctx.color &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>size: &#123; ctx.size &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ThemeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">UserContext.Consumer</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            (ctx) =&gt; &#123;</span><br><span class="language-xml">              return (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>name: &#123; ctx.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>age: &#123; ctx.age &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">UserContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 第二种写法： */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第二种写法：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>color: &#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>size: &#123;size&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Home</span>.<span class="hljs-property">contextType</span> = <span class="hljs-title class_">ThemeContext</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802164100120.png"></p><h2 id="9-非父子组件通信-事件总线"><a href="#9-非父子组件通信-事件总线" class="headerlink" title="9. 非父子组件通信 - 事件总线"></a><strong>9. 非父子组件通信 - 事件总线</strong></h2><h3 id="1-Install"><a href="#1-Install" class="headerlink" title="1. Install"></a><strong>1. Install</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">npm install hy-event-store<br></code></pre></td></tr></table></figure><h3 id="2-demo-case"><a href="#2-demo-case" class="headerlink" title="2. demo case"></a><strong>2. demo case</strong></h3><ol><li>创建 eventBus 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HYEventBus</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;hy-event-store&#x27;</span><br><br><span class="hljs-keyword">const</span> eventBus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HYEventBus</span>()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> eventBus<br></code></pre></td></tr></table></figure><ol><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> eventBus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils/event-bus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloOne</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./component/HelloOne&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloTwo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./component/HelloTwo&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 监听事件</span><br>    eventBus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是App组件，监听到了来自HelloOne组件的事件&#x27;</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在组件销毁时，一定要记得取消监听事件，养成好习惯</span><br>    eventBus.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">HelloOne</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">HelloTwo</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> eventBus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/event-bus&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;我是来自HelloOne组件的一个事件&#x27;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 发送事件</span><br>  eventSend = <span class="hljs-function">() =&gt;</span> &#123;<br>    eventBus.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;helloOneSendEvent&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">event</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>HelloOne<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.eventSend&#125;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloOne</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> eventBus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/event-bus&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTwo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 监听事件</span><br>    eventBus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是HelloTwo组件，监听到了来自HelloOne组件的事件&#x27;</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在组件销毁时，一定要记得取消监听事件，养成好习惯</span><br>    eventBus.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>HelloTwo<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloTwo</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802164528890.png"></p><h3 id="3-存在this绑定问题"><a href="#3-存在this绑定问题" class="headerlink" title="3. 存在this绑定问题"></a><strong>3. 存在this绑定问题</strong></h3><p><strong>1. 问题复现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> eventBus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/event-bus&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTwo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 监听事件</span><br>    eventBus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleHelloOneEvent</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">handleHelloOneEvent</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是HelloTwo组件，监听到了来自HelloOne组件的事件&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event)<br>    <span class="hljs-comment">// 这里打印下this，是 undefined，证明我们在这里处理时无法通过this那倒state</span><br>    <span class="hljs-comment">// 也就无法通过this.setState来更新状态</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在组件销毁时，一定要记得取消监听事件，养成好习惯</span><br>    eventBus.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>HelloTwo<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloTwo</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802164644764.png"></p><p><strong>2. 修复</strong></p><p>方法一和方法二任选一个就可以:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> eventBus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/event-bus&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTwo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 监听事件</span><br>    <span class="hljs-comment">// 修复方法一：通过bind绑定this，才能通过this.setState来更新状态</span><br>    eventBus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleHelloOneEvent</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// handleHelloOneEvent(event) &#123;</span><br>  <span class="hljs-comment">//   console.log(&#x27;我是HelloTwo组件，监听到了来自HelloOne组件的事件&#x27;)</span><br>  <span class="hljs-comment">//   console.log(event)</span><br>  <span class="hljs-comment">//   // 这里打印下this，是 undefined，证明我们在这里处理时无法通过this那倒state</span><br>  <span class="hljs-comment">//   // 也就无法通过this.setState来更新状态</span><br>  <span class="hljs-comment">//   console.log(this)</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// 修复方法二：通过箭头函数，通过箭头函数的this来获取this，从而通过this来更新状态</span><br>  handleHelloOneEvent = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是HelloTwo组件，监听到了来自HelloOne组件的事件&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在组件销毁时，一定要记得取消监听事件，养成好习惯</span><br>    eventBus.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;helloOneSendEvent&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>HelloTwo<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">HelloTwo</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802164807534.png"></p><h2 id="10-setState-用法及原理参考"><a href="#10-setState-用法及原理参考" class="headerlink" title="10. setState 用法及原理参考"></a><strong>10. setState 用法及原理参考</strong></h2><blockquote><p><a href="https://blog.csdn.net/qq_44285582/article/details/142868211">React(四) 事件总线，setState的原理，PureComponent优化React性能,ref获取类组件与函数组件_react事件总线-CSDN博客</a></p></blockquote><h3 id="1-setState的三种用法"><a href="#1-setState的三种用法" class="headerlink" title="1. setState的三种用法"></a><strong>1. setState的三种用法</strong></h3><ul><li><strong>用法一：基本使用</strong></li></ul><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165012910.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello React&quot;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-comment">// 用法一：直接修改state中的数据，这个是个异步动作，</span><br>    <span class="hljs-comment">//        等所有的state的值修改好后才会去走render()函数</span><br>    <span class="hljs-comment">//        底层其实是用了Object.assign(this.state,setState的新对象)，把两个对象做了合并。</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;你好啊，李银河！&quot;</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; message &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.changeMsg()&#125;&gt;点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./10_setState的三种用法/App&quot;</span><br><br><span class="hljs-comment">// 编写react代码，并进行渲染</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)<br></code></pre></td></tr></table></figure><ul><li><strong>用法二：传入回调函数</strong></li></ul><blockquote><p>好处一: 可以在回调函数中编写对新state处理的逻辑<br>好处二: 当前的回调函数会将之前的state和props传递进来</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello React&quot;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// changeMsg() &#123;</span><br><br>  <span class="hljs-comment">//   // 用法一：直接修改state中的数据，这个是个异步动作，</span><br>  <span class="hljs-comment">//   //        等所有的state的值修改好后才会去走render()函数</span><br>  <span class="hljs-comment">//   //        底层其实是用了Object.assign(this.state,setState的新对象)，把两个对象做了合并。</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     message: &quot;你好啊，李银河！&quot;</span><br>  <span class="hljs-comment">//   &#125;)</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 用法二：可以传入一个函数，这个函数会接收到state和props两个参数，</span><br>    <span class="hljs-comment">//        这个函数的返回值会作为state的新值</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state, props</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">message</span>, props)<br><br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;你好啊，李银河！&quot;</span><br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; message &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.changeMsg()&#125;&gt;点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165239253.png"></p><ul><li><strong>用法三：setState 是一个异步调用，传入 callback 来使用最新的 state 的值处理逻辑</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello React&quot;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// changeMsg() &#123;</span><br><br>  <span class="hljs-comment">//   // 用法一：直接修改state中的数据，这个是个异步动作，</span><br>  <span class="hljs-comment">//   //        等所有的state的值修改好后才会去走render()函数</span><br>  <span class="hljs-comment">//   //        底层其实是用了Object.assign(this.state,setState的新对象)，把两个对象做了合并。</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     message: &quot;你好啊，李银河！&quot;</span><br>  <span class="hljs-comment">//   &#125;)</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// changeMsg() &#123;</span><br>  <span class="hljs-comment">//   // 用法二：可以传入一个函数，这个函数会接收到state和props两个参数，</span><br>  <span class="hljs-comment">//   //        这个函数的返回值会作为state的新值</span><br>  <span class="hljs-comment">//   this.setState((state, props) =&gt; &#123;</span><br>  <span class="hljs-comment">//     console.log(state.message, props)</span><br><br>  <span class="hljs-comment">//     return &#123;</span><br>  <span class="hljs-comment">//       message: &quot;你好啊，李银河！&quot;</span><br>  <span class="hljs-comment">//     &#125;</span><br>  <span class="hljs-comment">//   &#125;)</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 用法三：可以传入一个函数，这个函数的返回值会作为state的新值，并且可以传入一个回调函数，</span><br>    <span class="hljs-comment">//        这个回调函数会在state更新完毕后执行，可以获取到最新的state</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;你好啊，李银河！&quot;</span>&#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 回调函数，在state更新完毕后执行，可以获取到最新的state</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">message</span>)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; message &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.changeMsg()&#125;&gt;点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165357084.png"></p><h3 id="2-react-为什么设计成异步的？"><a href="#2-react-为什么设计成异步的？" class="headerlink" title="2. react 为什么设计成异步的？"></a><strong>2. react 为什么设计成异步的？</strong></h3><blockquote><p><a href="https://github.com/facebook/react/issues/11527">https://github.com/facebook/react/issues/11527</a></p></blockquote><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165500725.png"></p><p>📌 <strong>注意事项一：setState是批量更新的，不是每次调用都会更新</strong></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165602536.png"></p><p>• 错误使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">increament</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 这里的 counter 执行完方法后结果为1，</span><br>    <span class="hljs-comment">// 因为setState是异步调用，每次获取的counter值都为0</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render ~&quot;</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; counter &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.increament()&#125;&gt;点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165650009.png"></p><p>• 我们要想每次都拿到最新的 state 的值使用，应该用<strong>回调函数</strong>的方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">counter</span>: state.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>      &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">counter</span>: state.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>      &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">counter</span>: state.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render ~&quot;</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; counter &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.increment()&#125;&gt;点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165743166.png"></p><p>📌 <strong>注意事项二：setState 在 React 18 之前是同步的，React 18 之后是异步的</strong></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802165836696.png"></p><p>💡 <strong>将setState异步变为同步</strong></p><ol><li>使用callback回调参数</li><li>使用react-dom中的flushSync</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; flushSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 将setState的回调函数写到flushSync中，同步更新state后在执行后续代码</span><br>    <span class="hljs-title function_">flushSync</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>      &#125;)<br>    &#125;)<br>    <span class="hljs-comment">// 这里执行完flushSync中的方法并更新后才会执行这里的代码</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render ~&quot;</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; counter &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.increment()&#125;&gt;点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h2 id="11-React-性能优化"><a href="#11-React-性能优化" class="headerlink" title="11. React 性能优化"></a><strong>11. React 性能优化</strong></h2><h3 id="1-diff-算法和-key-的作用"><a href="#1-diff-算法和-key-的作用" class="headerlink" title="1. diff 算法和 key 的作用"></a><strong>1. diff 算法和 key 的作用</strong></h3><blockquote><p><a href="https://juejin.cn/post/6967626390380216334">https://juejin.cn/post/6967626390380216334</a></p></blockquote><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170118844.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170134236.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170148798.png"></p><h3 id="2-render-函数优化"><a href="#2-render-函数优化" class="headerlink" title="2. render 函数优化"></a><strong>2. render 函数优化</strong></h3><ol><li>问题</li></ol><p>问题说明：在每个组件中包含的子组件，只要父组件的一个 state 或者 props 值被修改，该组件以及子组件都会重新执行 render 函数</p><p>👨🏻‍💻 code demo：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170400839.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Recommend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Recommend&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Hello React&quot;</span>,<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;你好啊，李银河！&quot;</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App render ~&quot;</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; msg, counter &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;msg&#125; - &#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.changeMsg()&#125;&gt;修改msg<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.increment()&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Recommend</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>      <br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Home render ~&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Recommend</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Recommend render ~&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Recommend<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Recommend</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./11_render函数的优化/App&quot;</span><br><br><span class="hljs-comment">// 编写react代码，并进行渲染</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)<br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170559574.png"></p><p>💡 <strong>解法一：使用 shouldComponentUpdate 来阻止更新（SCU优化）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在这里执行一些判断，返回false，阻止更新，返回true，则执行该组件的render函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Home render ~&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170730881.png"></p><p>• 同样，当我们的 state 的值没有被修改时，也可以这样来优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Recommend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Recommend&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Hello React&quot;</span>,<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-comment">// msg: &quot;你好啊，李银河！&quot;</span><br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Hello React&quot;</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 这里我们可以判断state或者props值在变化后需不需要重新执行render函数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === nextState) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App render ~&quot;</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; msg, counter &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;msg&#125; - &#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.changeMsg()&#125;&gt;修改msg<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.increment()&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Recommend</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>      <br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170834648.png"></p><p>💡 <strong>解法二：（推荐）使用 PureComponent 和 memo 来进行 render 优化</strong></p><ul><li>类组件继承 PureComponent， 函数式组件用memo包裹，目的还是当 state 或者 props 的值不发生变化时不进行 render 渲染</li></ul><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802170948807.png"></p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802171001997.png"></p><p>👨🏻‍💻 code demo：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802171031792.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Recommend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Recommend&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Profile</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Profile&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Hello React&quot;</span>,<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-comment">// msg: &quot;你好啊，李银河！&quot;</span><br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Hello React&quot;</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span> + <span class="hljs-number">1</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;App render ~&quot;</span>)<br><br>    <span class="hljs-keyword">const</span> &#123; msg, counter &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;msg&#125; - &#123;counter&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.changeMsg()&#125;&gt;修改msg<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.increment()&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Recommend</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Profile</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>      <br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Home render ~&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Profile</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Profile render ~&quot;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Profile<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Profile</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Recommend</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Recommend render ~&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Recommend<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Recommend</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./11_render函数的优化/App&quot;</span><br><br><span class="hljs-comment">// 编写react代码，并进行渲染</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>)<br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802171238980.png"></p><h3 id="3-数据不可变的力量"><a href="#3-数据不可变的力量" class="headerlink" title="3. 数据不可变的力量"></a><strong>3. 数据不可变的力量</strong></h3><blockquote><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/24926838">https://zhuanlan.zhihu.com/p/24926838</a></li><li><a href="https://segmentfault.com/a/1190000021162454">https://segmentfault.com/a/1190000021162454</a></li></ul></blockquote><p>• 我们通常写的类组件或者函数式组件都继承自 PureComponent 或者被 memo 所包裹，这样在 setState 或者 useState 的时候，都需要保证新对象和旧对象的内存地址不一样，才可以触发页面渲染。</p><p>👨🏻‍💻 code case：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">books</span>: [<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;计算机网络入门&quot;</span>,<br>          <span class="hljs-attr">price</span>: <span class="hljs-number">23</span>,<br>          <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;你不知道的javascript&quot;</span>,<br>          <span class="hljs-attr">price</span>: <span class="hljs-number">67</span>,<br>          <span class="hljs-attr">count</span>: <span class="hljs-number">7</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;算法图解&quot;</span>,<br>          <span class="hljs-attr">price</span>: <span class="hljs-number">48</span>,<br>          <span class="hljs-attr">count</span>: <span class="hljs-number">3</span>,<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">addBook</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> newBook = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Golang高级程序语言设计&quot;</span>,<br>        <span class="hljs-attr">price</span>: <span class="hljs-number">48</span>,<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">3</span>,<br>    &#125;<br><br>    <span class="hljs-comment">// 不要这样直接修改state下面的值，否则不会触发页面渲染</span><br><br>    <span class="hljs-comment">// 1. 直接修改原有的 state，再重新设着一遍 state</span><br>    <span class="hljs-comment">//    在 PureComponent 是不能引起重新渲染的</span><br>    <span class="hljs-comment">// this.state.books.push(newBook)</span><br>    <span class="hljs-comment">// this.setState(&#123;</span><br>    <span class="hljs-comment">//   books: this.state.books</span><br>    <span class="hljs-comment">// &#125;)</span><br><br>    <span class="hljs-comment">// 需要像下面这样在 setState 设置的时候赋值一个和之前不一样的对象，才可以触发页面渲染</span><br>    <span class="hljs-comment">// 赋值一份新的books，在新的books 中做修改，可以造成重新渲染</span><br>    <span class="hljs-keyword">const</span> books = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">books</span>, newBook]<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">books</span>: books<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; books &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App Books<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            books.map((item, index) =&gt; &#123;</span><br><span class="language-xml">              return (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>name: &#123;item.name&#125;  price: &#123;item.price&#125; count: &#123;item.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;)</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;this.addBook()&#125;&#125;&gt;添加一本书<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p>case: 修改books的count</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">books</span>: [<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;计算机网络入门&quot;</span>,<br>          <span class="hljs-attr">price</span>: <span class="hljs-number">23</span>,<br>          <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;你不知道的javascript&quot;</span>,<br>          <span class="hljs-attr">price</span>: <span class="hljs-number">67</span>,<br>          <span class="hljs-attr">count</span>: <span class="hljs-number">7</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;算法图解&quot;</span>,<br>          <span class="hljs-attr">price</span>: <span class="hljs-number">48</span>,<br>          <span class="hljs-attr">count</span>: <span class="hljs-number">3</span>,<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">addBook</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> newBook = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Golang高级程序语言设计&quot;</span>,<br>        <span class="hljs-attr">price</span>: <span class="hljs-number">48</span>,<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">3</span>,<br>    &#125;<br><br>    <span class="hljs-comment">// 不要这样直接修改state下面的值，否则不会触发页面渲染</span><br><br>    <span class="hljs-comment">// 1. 直接修改原有的 state，再重新设着一遍 state</span><br>    <span class="hljs-comment">//    在 PureComponent 是不能引起重新渲染的</span><br>    <span class="hljs-comment">// this.state.books.push(newBook)</span><br>    <span class="hljs-comment">// this.setState(&#123;</span><br>    <span class="hljs-comment">//   books: this.state.books</span><br>    <span class="hljs-comment">// &#125;)</span><br><br>    <span class="hljs-comment">// 需要像下面这样在 setState 设置的时候赋值一个和之前不一样的对象，才可以触发页面渲染</span><br>    <span class="hljs-comment">// 赋值一份新的books，在新的books 中做修改，可以造成重新渲染</span><br>    <span class="hljs-keyword">const</span> books = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">books</span>, newBook]<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">books</span>: books<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">addCount</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">const</span> books = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">books</span>]<br>    books[index].<span class="hljs-property">count</span>++<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">books</span>: books &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; books &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App Books<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            books.map((item, index) =&gt; &#123;</span><br><span class="language-xml">              return (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span></span><br><span class="language-xml">                  name: &#123;item.name&#125;  price: &#123;item.price&#125; count: &#123;item.count&#125;  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123; this.addCount(index) &#125;&#125;&gt; +1 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;)</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;this.addBook()&#125;&#125;&gt;添加一本书<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h2 id="12-ref-获取原生-dom-的三种方式"><a href="#12-ref-获取原生-dom-的三种方式" class="headerlink" title="12. ref 获取原生 dom 的三种方式"></a><strong>12. ref 获取原生 dom 的三种方式</strong></h2><blockquote><p>• React 可以使用 ref 来获取原生 dom 对象</p></blockquote><p>👨🏻‍💻 code case：</p><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802171642428.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; createRef, <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = (&#123;<br><br>    &#125;)<br><br>    <span class="hljs-comment">// 方式二中创建ref对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">yuyanRef</span> = <span class="hljs-title function_">createRef</span>()<br><br>    <span class="hljs-comment">// 方式三中创建ref对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dehuaRef</span> = <span class="hljs-literal">null</span><br>  &#125;<br><br>  <span class="hljs-title function_">getYanzuDom</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 方式一：（已废弃）直接在 React 元素上绑定一个字符串</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">yanzuRef</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">getYuyanDom</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 方式二：（推荐）首先在 constructor() 中创建一个ref，然后绑定到 React 元素上</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">yuyanRef</span>.<span class="hljs-property">current</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">getDehuaDom</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 方式三：传入一个回调函数，当页面被渲染后，回调函数被执行，元素被传入</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dehuaRef</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;yanzuRef&quot;</span>&gt;</span>hello, yanzu wu<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.getYanzuDom()&#125;&gt;get yanzu&#x27;s dom<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.yuyanRef&#125;</span>&gt;</span>hello, yuyan peng<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.getYuyanDom()&#125;&gt;get yuyan&#x27;s dom<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;element</span> =&gt;</span> this.dehuaRef = element&#125;&gt;hello, dehua liu<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.getDehuaDom()&#125;&gt;get dehua&#x27;s dom<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802171720058.png"></p><h2 id="13-ref-获取组件（类组件和函数式组件）"><a href="#13-ref-获取组件（类组件和函数式组件）" class="headerlink" title="13. ref 获取组件（类组件和函数式组件）"></a><strong>13. ref 获取组件（类组件和函数式组件）</strong></h2><ul><li>通过 ref 获取组件信息，可以通过下面代码查看具体获取方式，注意函数式组件 forwardRef 和 memo 包裹函数的顺序。</li></ul><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802171824222.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span>, createRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Helloworld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Helloworld&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyFunction</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyFunction&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br><br>    <span class="hljs-comment">// 类组件中的ref</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">helloworldRef</span> = <span class="hljs-title function_">createRef</span>()<br>    <span class="hljs-comment">// 函数式组件中的ref</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">yanzuRef</span> = <span class="hljs-title function_">createRef</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">getHelloworldRef</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">helloworldRef</span>.<span class="hljs-property">current</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">getYanzuRef</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">yanzuRef</span>.<span class="hljs-property">current</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 类组件 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Helloworld</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.helloworldRef&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.getHelloworldRef()&#125;&gt;获取组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* 函数式组件 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MyFunction</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.yanzuRef&#125;/</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> this.getYanzuRef()&#125;&gt;获取组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PureComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Helloworld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PureComponent</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>👋 你好，李银河！（Helloworld类组件中的一个span）<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Helloworld</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, forwardRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyFunction</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>MyFunction (函数式组件)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你好，彭于晏！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span>你好，吴彦祖！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;))<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MyFunction</span><br></code></pre></td></tr></table></figure><p><img src="https://images-1306852673.cos.ap-chengdu.myqcloud.com/20250802172008611.png"></p><h2 id="14-受控组件和非受控组件"><a href="#14-受控组件和非受控组件" class="headerlink" title="14. 受控组件和非受控组件"></a><strong>14. 受控组件和非受控组件</strong></h2><p>todo</p>]]></content>
    
    
    <categories>
      
      <category>代码笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
